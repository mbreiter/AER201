MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-4-2017  3:18:19         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*******************************************************************************
                      00002 ;                                                                              
                      00003 ;    Filename: main.asm                                                        
                      00004 ;    Date: 2 Feb 2017                                                         
                      00005 ;    File Version: 1.0                                                 
                      00006 ;    Author: Matthew Reiter                                                     
                      00007 ;    Course: AER201                                                                  
                      00008 ;    Description: Bottle sorting machine                                                             
                      00009 
                      00010 ;*******************************************************************************
                      00011 ; configuration settings
                      00012 ;*******************************************************************************
                      00013     
                      00014 #include <p18f4620.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Nov 17 2016
                      00005 ;  MPASM PIC18F4620 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      01440         LIST
                      00015 #include <lcd.inc>
  0000                00001     extern      InitLCD,WrtLCD,ClrLCD,ClkLCD,WR_INS,WR_DATA,LCD_L1,LCD_L2
                      00002 
                      00003 
                      00004 
                      00005 
                      00006 
                      00007 
                      00016 #include <rtc.inc>
                      00001 ;External labels
  0000                00002     extern write_rtc,read_rtc,rtc_convert,i2c_common_setup, regaddress, databyte, datachar
                      00003 
                      00004 ;; RTC MACROS
                      00005 ;;
                      00006 ;; Sebastian K, commit 110219-2205
                      00007 ;; forked off PIC16 sample code
                      00008 ;; for PIC18F4620
                      00009 ;; relocatable labels, declared in another file
                      00010 
  0000                00011     variable _loopknt=0
                      00012 
                      00013 rtc_resetAll macro
                      00014 ;input: none
                      00015 ;output: none
                      00016 ;desc: Resets all the time keeping registers on the RTC to zero
                      00017 
                      00018     local      Again
                      00019 
                      00020     clrf databyte
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-4-2017  3:18:19         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00021     movlw 6
                      00022     movwf regaddress ;start at 6 and go down, and set all to 0
                      00023 
                      00024 Again
                      00025     call write_rtc
                      00026     decfsz regaddress
                      00027     bra Again
                      00028     call write_rtc ;sets registers 0-6 to zero
                      00029     endm
                      00030 
                      00031 
                      00032 
                      00033 
                      00034 rtc_set macro addliteral,datliteral
                      00035 ;input: addliteral: value of address
                      00036 ; datliteral: value of data
                      00037 ;output: none
                      00038 ;desc: loads the data in datliteral into the
                      00039 ; address specified by addliteral in the RTC
                      00040 
                      00041     movlw addliteral
                      00042     movwf regaddress
                      00043     movlw datliteral
                      00044     movwf databyte
                      00045     call write_rtc
                      00046     endm
                      00047 
                      00048 rtc_read macro addliteral
                      00049 ;input: addliteral
                      00050 ;output: datachar, tens_digit, ones_digit
                      00051 ;desc: From the selected register in the RTC, read the data
                      00052 ; and load it into 0x75. 0x75 is also converted into
                      00053 ; ASCII characters and the tens digit is placed into
                      00054 ; 0x77 and the ones digit is placed in 0x78
                      00055     movlw addliteral
                      00056     movwf regaddress
                      00057     call read_rtc
                      00058     movf datachar,w
                      00059     call rtc_convert
                      00060     endm
                      00017     List    P=18F4620, F=INHX32, C=160, N=80, ST=OFF, MM=OFF, R=DEC
                      00018 
                      00019     CONFIG OSC=HS, FCMEN=OFF, IESO=OFF
                      00020     CONFIG PWRT = OFF, BOREN = SBORDIS, BORV = 3
                      00021     CONFIG WDT = ON, WDTPS = 32768
                      00022     CONFIG MCLRE = ON, LPT1OSC = OFF, PBADEN = OFF
                      00023     CONFIG STVREN = ON, LVP = OFF, XINST = OFF
                      00024     CONFIG DEBUG = OFF
                      00025     CONFIG CP0 = OFF, CP1 = OFF, CP2 = OFF, CP3 = OFF
                      00026     CONFIG CPB = OFF, CPD = OFF
                      00027     CONFIG WRT0 = OFF, WRT1 = OFF, WRT2 = OFF, WRT3 = OFF
                      00028     CONFIG WRTB = OFF, WRTC = OFF, WRTD = OFF
                      00029     CONFIG EBTR0 = OFF, EBTR1 = OFF, EBTR2 = OFF, EBTR3 = OFF
                      00030     CONFIG EBTRB = OFF
                      00031     
                      00032 ;*******************************************************************************
                      00033 ; variable and constants
                      00034 ;*******************************************************************************
                      00035     
                      00036 ; timers
                      00037             CODE
                      00038 #define     timer_H     0x9E
                      00039 #define     timer_L     0x58
  00000010            00040 OP_sec      equ         0x10
  00000011            00041 OP_INT      equ         0x11
                      00042 
                      00043 ; keys
  00000000            00044 key1        equ         d'0'
  00000001            00045 key2        equ         d'1'
  00000002            00046 key3        equ         d'2'
  00000003            00047 keyA        equ         d'3'
  00000004            00048 key4        equ         d'4'
  00000005            00049 key5        equ         d'5'
  00000006            00050 key6        equ         d'6'
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-4-2017  3:18:19         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000007            00051 keyB        equ         d'7'
  00000008            00052 key7        equ         d'8'
  00000009            00053 key8        equ         d'9'
  0000000A            00054 key9        equ         d'10'
  0000000B            00055 keyC        equ         d'11'
  0000000C            00056 keyS        equ         d'12'
  0000000D            00057 key0        equ         d'13'
  0000000E            00058 keyH        equ         d'14'
  0000000F            00059 keyD        equ         d'15'
                      00060 
  00000050            00061 KEY         equ         0x50
  00000051            00062 temp_KEY    equ         0x51
  00000052            00063 KEY_ISR     equ         0x52
                      00064 
                      00065 ; temporary variable used in isrs
  00000000            00066 temp_ISR    equ         0x00
                      00067 
                      00068 ; temporary registers to save W and status
  00000001            00069 temp_S      equ         0x01
  00000002            00070 temp_W      equ         0x02
  00000003            00071 counter     equ         0x03
  00000004            00072 counter2    equ         0x04
                      00073 
                      00074 ; delays for timers
  00000028            00075 delayR      equ         0x28        ; primary delay register
  00000029            00076 d5us        equ         0x29        ; 5 us delay
  00000030            00077 d200us      equ         0x30        ; 200 us delay
  00000031            00078 d50ms       equ         0x31        ; 50 ms delay
                      00079                     
                      00080 ; EEPROM
                      00081 #define     temp_EE     d'220'
                      00082 #define     last_log    d'168'
  00000070            00083 clear_EE    equ         0x70
  00000071            00084 H_EE        equ         0x71
  00000072            00085 L_EE        equ         0x72
  00000073            00086 REG_EE      equ         0x73
  00000074            00087 tempH_EE    equ         0x74
  00000075            00088 tempL_EE    equ         0x75
  00000076            00089 MAX_EE      equ         0x76
  00000077            00090 READ_EE     equ         0x77
                      00091 
                      00092 ; pc interface
                      00093 ; rtc
  0000                00094     extern          tens_digit
  0000                00095     extern          ones_digit
                      00096 
                      00097 ;*******************************************************************************
                      00098 ; tables
                      00099 ;*******************************************************************************
000000 6F62 4C74 0000 00100 Welcome         db          "botL", 0
000006 726D 6820 206C 00101 Team            db          "mr hl hg", 0
       6768 0000 
000010 7453 6E61 6264 00102 StandBy         db          "Standby", 0
       0079 
000018 6F53 7472 6E69 00103 Log             db          "Sorting Stats",0
       2067 7453 7461 
       0073 
000026 6F53 7472 6E69 00104 Exe             db          "Sorting...", 0
       2E67 2E2E 0000 
000032 7453 706F 6570 00105 Stopped         db          "Stopped", 0
       0064 
00003A 6954 656D 203A 00106 Op_Time         db          "Time: ", 0
       0000 
000042 6153 6976 676E 00107 Save            db          "Saving...", 0
       2E2E 002E 
00004C 7254 6E61 6673 00108 Transfer        db          "Transferring...", 0
       7265 6972 676E 
       2E2E 002E 
00005C 6153 6566 7974 00109 Safety          db          "Safety check...", 0                
       6320 6568 6B63 
       2E2E 002E 
                      00110             
                      00111 ;*******************************************************************************
                      00112 ; macros
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-4-2017  3:18:19         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00113 ;*******************************************************************************
                      00114 
                      00115 movMSB  macro   port
                      00116         andlw   0xF0
                      00117         iorwf   port, f
                      00118         iorlw   0x0F
                      00119         andwf   port, f
                      00120         endm
                      00121 
                      00122 Delay50N macro count, N
                      00123         local   loop
                      00124         movlw   N
                      00125         movwf   count
                      00126 
                      00127 loop
                      00128         call    Delay50ms
                      00129         decfsz  count
                      00130         goto    loop
                      00131         endm
                      00132 
                      00133 Display macro   Message
                      00134         local   loop
                      00135         movlw   upper Message   ; Move Table<20:16>
                      00136         movwf   TBLPTRU
                      00137         movlw   high Message    ; Move Table<15:8> 
                      00138         movwf   TBLPTRH
                      00139         movlw   low Message     ; Move Table<7:0>
                      00140         movwf   TBLPTRL
                      00141         tblrd*                  ; Read byte from TBLPTRL to TABLAT
                      00142         movf    TABLAT, W
                      00143 loop
                      00144         call    WR_DATA         ; write to LCD
                      00145         tblrd+*                 ; next row in table
                      00146         movf    TABLAT, W 
                      00147         bnz     loop
                      00148         endm 
                      00149 
                      00150 WriteRTC    macro
                      00151         movff   tens_digit, WREG
                      00152         call    WR_DATA
                      00153         movff   ones_digit, WREG
                      00154         call    WR_DATA
                      00155         endm
                      00156         
                      00157 WriteEE     macro   word, addH, addL
                      00158         movff   addH, EEADRH    ; High address
                      00159         movff   addL, EEADRH    ; Low address
                      00160         movff   word, EEDATA    ; set word
                      00161 
                      00162         btfsc   EECON1, WR          ; test if WR=0, skip if so
                      00163         bra         $-2
                      00164 
                      00165         bcf         EECON1, EEPGD   ; Point to data memory
                      00166         bcf         EECON1, CFGS    ; Access EEPROM
                      00167         bsf         EECON1, WREN    ; enable write
                      00168         bcf         EECON1, GIE     ; disable interrupts during write
                      00169         bcf         PIR2, EEIF
                      00170 
                      00171         movlw   0x55
                      00172         movwf   EECON2      ; write 55h
                      00173         movlw   0xAA        
                      00174         movwf   EECON2      ; write 0xAA
                      00175         bsf         EECON1, WR      ; begin write
                      00176         btfsc   EECON1, WR          
                      00177         bra         $-2
                      00178 
                      00179         bsf         EECON1, GIE     ; enable interrupts after write
                      00180         bcf      ECON1, WREN        ; disable writes
                      00181         endm
                      00182 
                      00183 READEE      macro   file, addH, addL
                      00184         movff   addH, EEADRH        ; read to high
                      00185         movff   addL, EEADR         ; read to low
                      00186         bcf     EECON1, EEPGD       ; point to data memory
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-4-2017  3:18:19         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00187         bcf     EECON1, CFGS        ; access to EEPROM
                      00188         bsf     EECON1, RD          ; read EEPROM
                      00189         movff   EEDATA, file        ; put data into file
                      00190         endm
                      00191 
                      00192 ChangeMode  macro   ModeId, NextMode
                      00193         local Next, Exit
                      00194         
                      00195         movlw   ModeId              ; poll for mode
                      00196         cpfseq  KEY                 ; check this against key press
                      00197         goto    Exit
                      00198 
                      00199 Next    
                      00200         clrf    LATA                ; clear pins before proceeding
                      00201         clrf    LATB
                      00202         clrf    LATC
                      00203         clrf    LATD
                      00204         goto    NextMode
                      00205 
                      00206 Exit
                      00207         nop
                      00208         endm
                      00209 
                      00210 ;*******************************************************************************
                      00211 ; reset vector and isrs
                      00212 ;*******************************************************************************
                      00213         ORG     0x000               ; processor reset vector
000000 EF?? F???      00214         goto    INIT                ; go to beginning of program
                      00215 
                      00216         ORG     0x008
000008 EF?? F???      00217         goto    ISR_High
                      00218 
                      00219         ORG     0x018
000018 EF?? F???      00220         goto    ISR_LOW
                      00221     
00001C                00222 ISR_High
00001C 6E02           00223         movwf   temp_W              ; save current W
00001E CFD8 F001      00224         movff   STATUS, temp_S      ; save status
                      00225         
                      00226         ; ISR_High routines
000022 C001 FFD8      00227         movff   temp_S, STATUS      ; retreive status
000026 3A02           00228         swapf   temp_W, f
000028 3802           00229         swapf   temp_W, w           ; restore W
00002A 0010           00230         retfie
                      00231 
00002C                00232 ISR_LOW
00002C 6E02           00233         movwf   temp_W              ; save current W
00002E CFD8 F001      00234         movff   STATUS, temp_S      ; save status
                      00235         
                      00236         ; ISR_Low routines
000032 C001 FFD8      00237         movff   temp_S, STATUS      ; retreive status
000036 3A02           00238         swapf   temp_W, f
000038 3802           00239         swapf   temp_W, w           ; restore W
00003A 0010           00240         retfie
                      00241         
                      00242 ;*******************************************************************************
                      00243 ; main
                      00244 ;*******************************************************************************
00003C                00245 INIT
                      00246         ; i/o
00003C 0E00           00247         movlw   b'00000000'
00003E 6E92           00248         movwf   TRISA
000040 0EFF           00249         movlw   b'11111111'
000042 6E93           00250         movwf   TRISB               ; keypad
000044 0EBF           00251         movlw   b'10111111'
000046 6E94           00252         movwf   TRISC
000048 0E00           00253         movlw   b'00000000'
00004A 6E95           00254         movwf   TRISD
00004C 0E07           00255         movlw   b'00000111'
00004E 6E96           00256         movwf   TRISE
                      00257         
                      00258         ; analog/digital pins
000050 0E0F           00259         movlw       b'00001111'     ; Set all AN pins to Digital
000052 6EC1           00260         movwf       ADCON1
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-4-2017  3:18:19         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00261         
                      00262         ; clear Ports
000054 6A89           00263         clrf    LATA
000056 6A8A           00264         clrf    LATB
000058 6A8B           00265         clrf    LATC
00005A 6A8C           00266         clrf    LATD
00005C 6A8D           00267         clrf    LATE
                      00268         
                      00269         ; initializations
00005E EC?? F???      00270         call    InitLCD
000062 EC?? F???      00271         call    i2c_common_setup
000066 EC?? F???      00272         call    Delay50ms       
                      00273         ;call   initUSART
                      00274         ;call   initEEPROM
                      00275         
00006A 0E08           00276         movlw   b'00001000'
00006C 6ED5           00277         movwf   T0CON
                      00278         
                      00279         ; interrupts
00006E 6AD0           00280         clrf    RCON
000070 6AF2           00281         clrf    INTCON
000072 6AF1           00282         clrf    INTCON2
000074 6AF0           00283         clrf    INTCON3
000076 8ED0           00284         bsf     RCON, IPEN          ; priority mode
000078 8EF2           00285         bsf     INTCON, GIEH        ; permit global interrupts
00007A 8CF2           00286         bsf     INTCON, GIEL
00007C 8AF1           00287         bsf     INTCON2, INTEDG1    ; INTEDG1 on rising edge
00007E 8AF2           00288         bsf     INTCON, TMR0IE
000080 84F1           00289         bsf     INTCON2, TMR0IP     ; set to high priority
                      00290         
                      00291 ;       rtcresetAll ;<---- This causes cancer!!!!! Fix by loading sample code.
                      00292 ;       rtc_set 0x00, b'00000000'               ; Set seconds to 0
                      00293 ;       rtc_set 0x01, b'00011000'               ; Set minutes (18)
                      00294 ;       rtc_set 0x02, b'00000011'               ; Set hours (3) (24hour)
                      00295 ;       rtc_set 0x04, b'00000100'               ; Set day (4)
                      00296 ;       rtc_set 0x05, b'00000010'               ; Set month (2)
                      00297 ;       rtc_set 0x06, b'00010111'               ; Set year (17)
                      00298         
                      00299         Display Welcome
  0000                    M         local   loop
000082 0E??               M         movlw   upper Welcome   ; Move Table<20:16>
000084 6EF8               M         movwf   TBLPTRU
000086 0E??               M         movlw   high Welcome    ; Move Table<15:8> 
000088 6EF7               M         movwf   TBLPTRH
00008A 0E??               M         movlw   low Welcome     ; Move Table<7:0>
00008C 6EF6               M         movwf   TBLPTRL
00008E 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000090 50F5               M         movf    TABLAT, W
000092                    M loop
000092 EC?? F???          M         call    WR_DATA         ; write to LCD
000096 000B               M         tblrd+*                 ; next row in table
000098 50F5               M         movf    TABLAT, W 
00009A E1??               M         bnz     loop
00009C EC?? F???      00300         call LCD_L2
                      00301         Display Team
  0000                    M         local   loop
0000A0 0E??               M         movlw   upper Team      ; Move Table<20:16>
0000A2 6EF8               M         movwf   TBLPTRU
0000A4 0E??               M         movlw   high Team       ; Move Table<15:8> 
0000A6 6EF7               M         movwf   TBLPTRH
0000A8 0E??               M         movlw   low Team        ; Move Table<7:0>
0000AA 6EF6               M         movwf   TBLPTRL
0000AC 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0000AE 50F5               M         movf    TABLAT, W
0000B0                    M loop
0000B0 EC?? F???          M         call    WR_DATA         ; write to LCD
0000B4 000B               M         tblrd+*                 ; next row in table
0000B6 50F5               M         movf    TABLAT, W 
0000B8 E1??               M         bnz     loop
                      00302         Delay50N delayR, 0x3C
  0000                    M         local   loop
0000BA 0E3C               M         movlw   0x3C
0000BC 6E28               M         movwf   delayR
                          M 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-4-2017  3:18:19         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000BE                    M loop
0000BE EC?? F???          M         call    Delay50ms
0000C2 2E28               M         decfsz  delayR
0000C4 EF?? F???          M         goto    loop
                      00303         
                      00304 ;*******************************************************************************
                      00305 ; standby mode
                      00306 ;*******************************************************************************
0000C8                00307 STANDBY
0000C8 EC?? F???      00308         call    ClrLCD
                      00309         Display StandBy
  0000                    M         local   loop
0000CC 0E??               M         movlw   upper StandBy   ; Move Table<20:16>
0000CE 6EF8               M         movwf   TBLPTRU
0000D0 0E??               M         movlw   high StandBy    ; Move Table<15:8> 
0000D2 6EF7               M         movwf   TBLPTRH
0000D4 0E??               M         movlw   low StandBy     ; Move Table<7:0>
0000D6 6EF6               M         movwf   TBLPTRL
0000D8 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0000DA 50F5               M         movf    TABLAT, W
0000DC                    M loop
0000DC EC?? F???          M         call    WR_DATA         ; write to LCD
0000E0 000B               M         tblrd+*                 ; next row in table
0000E2 50F5               M         movf    TABLAT, W 
0000E4 E1??               M         bnz     loop
                      00310         
0000E6                00311 HOLD_STANDBY
0000E6 EC?? F???      00312         call    READ_KEY_RTC
                      00313         ;ChangeMode keyA, EXE
                      00314         ;ChangeMode keyB, LOG
                      00315         ;ChangeMode keyC, PLOG
                      00316         ;ChangeMode keyD, PC
0000EA D???           00317         bra     HOLD_STANDBY
                      00318 
                      00319 ;*******************************************************************************
                      00320 ; sorting statistics log mode
                      00321 ;*******************************************************************************
                      00322 ;LOG
                      00323 ;       call ClrLCD
                      00324 ;       Display Log
                      00325 ;       
                      00326 ;HOLD_LOG
                      00327 ;       call    READ_KEY
                      00328 ;       ChangeMode key0, STANDBY
                      00329 ;       bra     HOLD_LOG
                      00330         
                      00331 ;*******************************************************************************
                      00332 ; subroutines
                      00333 ;*******************************************************************************
                      00334 
0000EC                00335 Delay5us
0000EC 0E78           00336         movlw   d'120'
0000EE 6E29           00337         movwf   d5us
                      00338         
0000F0                00339 loop5us
0000F0 2E29           00340         decfsz  d5us
0000F2 EF?? F???      00341         goto    loop5us
0000F6 0000           00342         nop
0000F8 0012           00343         return
                      00344 
0000FA                00345 Delay200us
0000FA 0EA4           00346         movlw   0xA4
0000FC 6E30           00347         movwf   d200us
                      00348 
0000FE                00349 loop200us
0000FE 2E30           00350         decfsz  d200us
000100 EF?? F???      00351         goto    loop200us
000104 0000           00352         nop
000106 0012           00353         return
                      00354 
000108                00355 Delay50ms
000108 0EF9           00356         movlw   0xF9
00010A 6E31           00357         movwf   d50ms
                      00358         
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-4-2017  3:18:19         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00010C                00359 loop50ms
00010C EC?? F???      00360         call    Delay200us
000110 2E31           00361         decfsz  d50ms
                      00362 
000112                00363 Cycles
000112 EF?? F???      00364         goto    loop50ms
000116 EC?? F???      00365         call    Delay200us
00011A 0012           00366         return
                      00367 
                      00368 ;READ_KEY
                      00369 ;HOLD_KEY
                      00370 ;       btfss   PORTB, 1        ; check for keypad interrupt
                      00371 ;       goto    HOLD_KEY
                      00372 ;       swapf   PORTB, W
                      00373 ;       andlw   0x0F
                      00374 ;       movwf   KEY
                      00375 ;       btfsc   PORTB, 1
                      00376 ;       goto    $-2
                      00377 ;       return
                      00378         
00011C                00379 READ_KEY_RTC
00011C                00380 HOLD_KEY_RTC
00011C EC?? F???      00381         call    LCD_L2          ; go to second line to print RTC
                      00382         rtc_read    0x02        ; get hours first
                          M ;input: addliteral
                          M ;output: datachar, tens_digit, ones_digit
                          M ;desc: From the selected register in the RTC, read the data
                          M ; and load it into 0x75. 0x75 is also converted into
                          M ; ASCII characters and the tens digit is placed into
                          M ; 0x77 and the ones digit is placed in 0x78
000120 0E02               M     movlw 0x02
000122 6E??               M     movwf regaddress
000124 EC?? F???          M     call read_rtc
000128 50??               M     movf datachar,w
00012A EC?? F???          M     call rtc_convert
00012E 50??           00383         movf    tens_digit, W
000130 EC?? F???      00384         call    WR_DATA
000134 50??           00385         movf    ones_digit, W
000136 EC?? F???      00386         call    WR_DATA
                      00387         
                      00388         rtc_read    0x01        ; get minutes
                          M ;input: addliteral
                          M ;output: datachar, tens_digit, ones_digit
                          M ;desc: From the selected register in the RTC, read the data
                          M ; and load it into 0x75. 0x75 is also converted into
                          M ; ASCII characters and the tens digit is placed into
                          M ; 0x77 and the ones digit is placed in 0x78
00013A 0E01               M     movlw 0x01
00013C 6E??               M     movwf regaddress
00013E EC?? F???          M     call read_rtc
000142 50??               M     movf datachar,w
000144 EC?? F???          M     call rtc_convert
                      00389         WriteRTC
000148 C??? FFE8          M         movff   tens_digit, WREG
00014C EC?? F???          M         call    WR_DATA
000150 C??? FFE8          M         movff   ones_digit, WREG
000154 EC?? F???          M         call    WR_DATA
000158 0E20           00390         movlw   " "
00015A EC?? F???      00391         call    WR_DATA
                      00392         
                      00393         rtc_read    0x05        ; month
                          M ;input: addliteral
                          M ;output: datachar, tens_digit, ones_digit
                          M ;desc: From the selected register in the RTC, read the data
                          M ; and load it into 0x75. 0x75 is also converted into
                          M ; ASCII characters and the tens digit is placed into
                          M ; 0x77 and the ones digit is placed in 0x78
00015E 0E05               M     movlw 0x05
000160 6E??               M     movwf regaddress
000162 EC?? F???          M     call read_rtc
000166 50??               M     movf datachar,w
000168 EC?? F???          M     call rtc_convert
                      00394         WriteRTC
00016C C??? FFE8          M         movff   tens_digit, WREG
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-4-2017  3:18:19         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000170 EC?? F???          M         call    WR_DATA
000174 C??? FFE8          M         movff   ones_digit, WREG
000178 EC?? F???          M         call    WR_DATA
00017C 0E2F           00395         movlw   0x2F            ; ascii code for forward slash
00017E EC?? F???      00396         call    WR_DATA
                      00397         
                      00398         rtc_read    0x04
                          M ;input: addliteral
                          M ;output: datachar, tens_digit, ones_digit
                          M ;desc: From the selected register in the RTC, read the data
                          M ; and load it into 0x75. 0x75 is also converted into
                          M ; ASCII characters and the tens digit is placed into
                          M ; 0x77 and the ones digit is placed in 0x78
000182 0E04               M     movlw 0x04
000184 6E??               M     movwf regaddress
000186 EC?? F???          M     call read_rtc
00018A 50??               M     movf datachar,w
00018C EC?? F???          M     call rtc_convert
                      00399         WriteRTC   
000190 C??? FFE8          M         movff   tens_digit, WREG
000194 EC?? F???          M         call    WR_DATA
000198 C??? FFE8          M         movff   ones_digit, WREG
00019C EC?? F???          M         call    WR_DATA
0001A0 0E2F           00400         movlw   0x2F            ; ascii code for forward slash
0001A2 EC?? F???      00401         call    WR_DATA
                      00402         
                      00403         rtc_read    0x06        ; display year
                          M ;input: addliteral
                          M ;output: datachar, tens_digit, ones_digit
                          M ;desc: From the selected register in the RTC, read the data
                          M ; and load it into 0x75. 0x75 is also converted into
                          M ; ASCII characters and the tens digit is placed into
                          M ; 0x77 and the ones digit is placed in 0x78
0001A6 0E06               M     movlw 0x06
0001A8 6E??               M     movwf regaddress
0001AA EC?? F???          M     call read_rtc
0001AE 50??               M     movf datachar,w
0001B0 EC?? F???          M     call rtc_convert
                      00404         WriteRTC
0001B4 C??? FFE8          M         movff   tens_digit, WREG
0001B8 EC?? F???          M         call    WR_DATA
0001BC C??? FFE8          M         movff   ones_digit, WREG
0001C0 EC?? F???          M         call    WR_DATA
                      00405         
0001C4 A281           00406         btfss   PORTB, 1        ; keypad interrupt
0001C6 EF?? F???      00407         goto    HOLD_KEY_RTC
0001CA 3881           00408         swapf   PORTB, W        ; copy PORTB7:4 to W3:0
0001CC 0B0F           00409         andlw   0x0F            ; only want W3:0
0001CE 6E50           00410         movwf   KEY             ; write this value to the KEY
0001D0 B281           00411         btfsc   PORTB, 1        ; wait for release
0001D2 EF?? F???      00412         goto    $-2             ; go back one instruction
0001D6 0012           00413         return  
                      00414     end

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

