MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*******************************************************************************
                      00002 ;
                      00003 ;    Filename: main.asm
                      00004 ;    Date: 2 Feb 2017
                      00005 ;    File Version: 1.0
                      00006 ;    Author: Matthew Reiter
                      00007 ;    Course: AER201
                      00008 ;    Description: botL - a pastic bottle sorting machine
                      00009  
                      00010 ;*******************************************************************************
                      00011 ; configuration settings
                      00012 ;*******************************************************************************
                      00013 
Warning[205]: Found directive in column 1. (list)
                      00014 list    P=18F4620, F=INHX32, C=160, N=80, ST=OFF, MM=OFF, R=DEC
                      00015 #include <p18f4620.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Nov 17 2016
                      00005 ;  MPASM PIC18F4620 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      01440         LIST
                      00016 #include <lcd.inc>
  0000                00001     extern      InitLCD,WrtLCD,ClrLCD,ClkLCD,WR_INS,WR_DATA,LCD_L1,LCD_L2,delay5ms
                      00002 
                      00003 
                      00004 
                      00005 
                      00006 
                      00007 
                      00017 #include <rtc.inc>
Warning[205]: Found directive in column 1. (extern)
  0000                00001 extern  write_rtc,read_rtc,rtc_convert,i2c_common_setup, regaddress, databyte, datachar,tens_digit,ones_digit
                      00002 
Warning[205]: Found directive in column 1. (variable)
  0000                00003 variable _loopknt=0
                      00004 
                      00005 rtc_resetAll macro
                      00006 
                      00007     clrf    databyte
                      00008     movlw   6
                      00009     movwf   regaddress ;start at 6 and go down, and set all to 0
                      00010 
                      00011     del_loop#v(_loopknt)
                      00012     call    write_rtc
                      00013     decfsz  regaddress
                      00014     bra     del_loop#v(_loopknt)
                      00015     call    write_rtc ;sets registers 0-6 to zero
                      00016     _loopknt set _loopknt+1
Warning[205]: Found directive in column 1. (endm)
                      00017 endm
                      00018 
                      00019 rtc_set macro addliteral,datliteral
                      00020     movlw   addliteral
                      00021     movwf   regaddress
                      00022     movlw   datliteral
                      00023     movwf   databyte
                      00024     call    write_rtc
Warning[205]: Found directive in column 1. (endm)
                      00025 endm
                      00026 
                      00027 rtc_read macro addliteral
                      00028     movlw   addliteral
                      00029     movwf   regaddress
                      00030     call    read_rtc
                      00031     movff   datachar, WREG
                      00032     call    rtc_convert
Warning[205]: Found directive in column 1. (endm)
                      00033 endm
                      00018 #include <colour.inc>
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                00001     extern      i2c_common_setup, regaddress, databyte, datachar, READ_COLOUR_I2C, WRITE_COLOUR_I2C, WR_DATA, data_colourL, data_col
                            ourH, delay5ms
                      00002 
                      00003 ;    #define TCS34725_ADDRESS          (0x29)
                      00004 ;
                      00005 ;    #define TCS34725_COMMAND_BIT      (0x80)
                      00006 ;
                      00007 ;    #define TCS34725_ENABLE           (0x00)
                      00008 ;    #define TCS34725_ENABLE_AIEN      (0x10)    /* RGBC Interrupt Enable */
                      00009 ;    #define TCS34725_ENABLE_WEN       (0x08)    /* Wait enable - Writing 1 activates the wait timer */
                      00010 ;    #define TCS34725_ENABLE_AEN       (0x02)    /* RGBC Enable - Writing 1 actives the ADC, 0 disables it */
                      00011 ;    #define TCS34725_ENABLE_PON       (0x01)    /* Power on - Writing 1 activates the internal oscillator, 0 disables it */
                      00012 ;    #define TCS34725_ATIME            (0x01)    /* Integration time */
                      00013 ;    #define TCS34725_WTIME            (0x03)    /* Wait time (if TCS34725_ENABLE_WEN is asserted) */
                      00014 ;    #define TCS34725_WTIME_2_4MS      (0xFF)    /* WLONG0 = 2.4ms   WLONG1 = 0.029s */
                      00015 ;    #define TCS34725_WTIME_204MS      (0xAB)    /* WLONG0 = 204ms   WLONG1 = 2.45s  */
                      00016 ;    #define TCS34725_WTIME_614MS      (0x00)    /* WLONG0 = 614ms   WLONG1 = 7.4s   */
                      00017 ;    #define TCS34725_AILTL            (0x04)    /* Clear channel lower interrupt threshold */
                      00018 ;    #define TCS34725_AILTH            (0x05)
                      00019 ;    #define TCS34725_AIHTL            (0x06)    /* Clear channel upper interrupt threshold */
                      00020 ;    #define TCS34725_AIHTH            (0x07)
                      00021 ;    #define TCS34725_PERS             (0x0C)    /* Persistence register - basic SW filtering mechanism for interrupts */
                      00022 ;    #define TCS34725_PERS_NONE        (0b0000)  /* Every RGBC cycle generates an interrupt                                */
                      00023 ;    #define TCS34725_PERS_1_CYCLE     (0b0001)  /* 1 clean channel value outside threshold range generates an interrupt   */
                      00024 ;    #define TCS34725_PERS_2_CYCLE     (0b0010)  /* 2 clean channel values outside threshold range generates an interrupt  */
                      00025 ;    #define TCS34725_PERS_3_CYCLE     (0b0011)  /* 3 clean channel values outside threshold range generates an interrupt  */
                      00026 ;    #define TCS34725_PERS_5_CYCLE     (0b0100)  /* 5 clean channel values outside threshold range generates an interrupt  */
                      00027 ;    #define TCS34725_PERS_10_CYCLE    (0b0101)  /* 10 clean channel values outside threshold range generates an interrupt */
                      00028 ;    #define TCS34725_PERS_15_CYCLE    (0b0110)  /* 15 clean channel values outside threshold range generates an interrupt */
                      00029 ;    #define TCS34725_PERS_20_CYCLE    (0b0111)  /* 20 clean channel values outside threshold range generates an interrupt */
                      00030 ;    #define TCS34725_PERS_25_CYCLE    (0b1000)  /* 25 clean channel values outside threshold range generates an interrupt */
                      00031 ;    #define TCS34725_PERS_30_CYCLE    (0b1001)  /* 30 clean channel values outside threshold range generates an interrupt */
                      00032 ;    #define TCS34725_PERS_35_CYCLE    (0b1010)  /* 35 clean channel values outside threshold range generates an interrupt */
                      00033 ;    #define TCS34725_PERS_40_CYCLE    (0b1011)  /* 40 clean channel values outside threshold range generates an interrupt */
                      00034 ;    #define TCS34725_PERS_45_CYCLE    (0b1100)  /* 45 clean channel values outside threshold range generates an interrupt */
                      00035 ;    #define TCS34725_PERS_50_CYCLE    (0b1101)  /* 50 clean channel values outside threshold range generates an interrupt */
                      00036 ;    #define TCS34725_PERS_55_CYCLE    (0b1110)  /* 55 clean channel values outside threshold range generates an interrupt */
                      00037 ;    #define TCS34725_PERS_60_CYCLE    (0b1111)  /* 60 clean channel values outside threshold range generates an interrupt */
                      00038 ;    #define TCS34725_CONFIG           (0x0D)
                      00039 ;    #define TCS34725_CONFIG_WLONG     (0x02)    /* Choose between short and long (12x) wait times via TCS34725_WTIME */
                      00040 ;    #define TCS34725_CONTROL          (0x0F)    /* Set the gain level for the sensor */
                      00041 ;    #define TCS34725_ID               (0x12)    /* 0x44 = TCS34721/TCS34725, 0x4D = TCS34723/TCS34727 */
                      00042 ;    #define TCS34725_STATUS           (0x13)
                      00043 ;    #define TCS34725_STATUS_AINT      (0x10)    /* RGBC Clean channel interrupt */
                      00044 ;    #define TCS34725_STATUS_AVALID    (0x01)    /* Indicates that the RGBC channels have completed an integration cycle */
                      00045 ;    #define TCS34725_CDATAL           (0x14)    /* Clear channel data */
                      00046 ;    #define TCS34725_CDATAH           (0x15)
                      00047 ;    #define TCS34725_RDATAL           (0x16)    /* Red channel data */
                      00048 ;    #define TCS34725_RDATAH           (0x17)
                      00049 ;    #define TCS34725_GDATAL           (0x18)    /* Green channel data */
                      00050 ;    #define TCS34725_GDATAH           (0x19)
                      00051 ;    #define TCS34725_BDATAL           (0x1A)    /* Blue channel data */
                      00052 ;    #define TCS34725_BDATAH           (0x1B)
                      00053 
                      00054 
Warning[207]: Found label after column 1. (COLOUR_INIT)
                      00055     COLOUR_INIT macro
                      00056         COLOUR_WRITE    0x00, 0x01 ; Enable Register (0x00), Power ON (0x01)
                      00057         call    delay5ms
                      00058         COLOUR_WRITE    0x00, 0x02 ; Enable Register (0x00), RGBC enable (0x02)
                      00059         call    delay5ms
                      00060         COLOUR_WRITE    0x01, 0xff ; Timing Register (0x01), 2.4ms (0xff) cycle
                      00061         call    delay5ms
                      00062         COLOUR_WRITE    0x0f, 0x03 ; Control Register (0x0f), 60x gain (0x03)
                      00063         call    delay5ms
                      00064     endm
                      00065     
Warning[207]: Found label after column 1. (COLOUR_READ)
                      00066     COLOUR_READ  macro  address
                      00067         movlw   address
                      00068         movwf   regaddress
                      00069         call    READ_COLOUR_I2C
                      00070     endm
                      00071     
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[207]: Found label after column 1. (COLOUR_WRITE)
                      00072     COLOUR_WRITE macro address, datliteral
                      00073         movlw   address
                      00074         movwf   regaddress
                      00075         movlw   datliteral
                      00076         movwf   databyte
                      00077         call    WRITE_COLOUR_I2C
                      00078     endm
                      00079     
Warning[207]: Found label after column 1. (COLOUR_GET_DATA)
                      00080     COLOUR_GET_DATA macro clear, red, green, blue
                      00081         call    delay5ms
                      00082         
                      00083         COLOUR_READ 0x14    ; read clear colour address low, command bits set later
                      00084         movff   databyte, clear+0
                      00085         COLOUR_READ 0x15    ; read clear colour address high, command bits set later
                      00086         movff   databyte, clear+1
                      00087                 
                      00088         COLOUR_READ 0x16    ; read red colour address low, command bits set later
                      00089         movff   databyte, red+0
                      00090         COLOUR_READ 0x17    ; read red colour address high, command bits set later
                      00091         movff   databyte, red+0
                      00092         
                      00093         COLOUR_READ 0x18    ; read green colour address low, command bits set later
                      00094         movff   databyte, green+0
                      00095         COLOUR_READ 0x19    ; read green colour address high, command bits set later
                      00096         movff   databyte, green+1
                      00097         
                      00098         COLOUR_READ 0x1a    ; read blue colour address low, command bits set later
                      00099         movff   databyte, blue+0
                      00100         COLOUR_READ 0x1b    ; read blue colour address high, command bits set later
                      00101         movff   databyte, blue+1
                      00102     endm
                      00103     
                      00019 #include <sorting.inc>
  0000                00001     extern  i2c_common_setup, regaddress, databyte, datachar, READ_ARDUINO, INIT_ARDUINO, WR_DATA, delay5ms
                      00002     
Warning[207]: Found label after column 1. (ARDUINO_READ)
                      00003     ARDUINO_READ macro bottle_sort
                      00004         call    READ_ARDUINO
                      00005         movff   WREG, bottle_sort
                      00006     endm
                      00007     
                      00008 
                      00009 
                      00010 
                      00020 
                      00021     CONFIG OSC=HS, FCMEN=OFF, IESO=OFF
                      00022     CONFIG PWRT = OFF, BOREN = SBORDIS, BORV = 3
                      00023     CONFIG WDT = OFF, WDTPS = 32768
                      00024     CONFIG MCLRE = ON, LPT1OSC = OFF, PBADEN = OFF
                      00025     CONFIG STVREN = ON, LVP = OFF, XINST = OFF
                      00026     CONFIG DEBUG = OFF
                      00027     CONFIG CP0 = OFF, CP1 = OFF, CP2 = OFF, CP3 = OFF
                      00028     CONFIG CPB = OFF, CPD = OFF
                      00029     CONFIG WRT0 = OFF, WRT1 = OFF, WRT2 = OFF, WRT3 = OFF
                      00030     CONFIG WRTB = OFF, WRTC = OFF, WRTD = OFF
                      00031     CONFIG EBTR0 = OFF, EBTR1 = OFF, EBTR2 = OFF, EBTR3 = OFF
                      00032     CONFIG EBTRB = OFF
                      00033 
                      00034 ;*******************************************************************************
                      00035 ; variable and constants
                      00036 ;*******************************************************************************
                      00037     CODE
                      00038             
                      00039     cblock 0x00
  00000000            00040         key1
  00000001            00041         key2
  00000002            00042         key3
  00000003            00043         keyA
  00000004            00044         key4
  00000005            00045         key5
  00000006            00046         key6
  00000007            00047         keyB
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000008            00048         key7
  00000009            00049         key8
  0000000A            00050         key9
  0000000B            00051         keyC
  0000000C            00052         keyS
  0000000D            00053         key0
  0000000E            00054         keyH
  0000000F            00055         keyD
  00000010            00056         KEY
  00000011            00057         temp_KEY
  00000012            00058         KEY_ISR
  00000013            00059         temp_S  
  00000014            00060         temp_W
  00000015            00061         counter
  00000016            00062         counter2
  00000017            00063         temp
  00000018            00064         OP_sec
  00000019            00065         OP_INT
  0000001A            00066         temp_ISR
  0000001B            00067         delayR
  0000001C            00068         d5us
  0000001D            00069         d200us
  0000001E            00070         d50ms
  0000001F            00071         inExecution
  00000020            00072         clear_EE
  00000021            00073         H_EE    
  00000022            00074         L_EE    
  00000023            00075         REG_EE  
  00000024            00076         tempH_EE
  00000025            00077         tempL_EE
  00000026            00078         tempL_EEC
  00000027            00079         MAX_EE   
  00000028            00080         READ_EE
  00000029            00081         last_log
  0000002A            00082         startHt
  0000002B            00083         startHo
  0000002C            00084         startMt
  0000002D            00085         startMo
  0000002E            00086         endHt
  0000002F            00087         endHo
  00000030            00088         endMt
  00000031            00089         endMo
  00000032            00090         LED_Count
  00000033            00091         SkipCount
  00000034            00092         exe_sec
  00000035            00093         exe_int
  00000036            00094         timer_H
  00000037            00095         timer_L
  00000038            00096         convert_buffer
  00000039            00097         transferring
  0000003A            00098         PC_PCL
  0000003B            00099         PC_PCLATH
  0000003C            00100         PC_PCLATU
  0000003D            00101         TIMCNT
  0000003E            00102         CPCNT
  0000003F            00103         TDATA
  00000040            00104         DETECTION_VAL
  00000041            00105         ESKA
  00000042            00106         ESKA_CAP
  00000043            00107         YOP
  00000044            00108         YOP_CAP
  00000045            00109         CLEAR:2
  00000047            00110         RED:2
  00000049            00111         GREEN:2
  0000004B            00112         BLUE:2
  0000004D            00113         temp_colour:2
                      00114     endc
                      00115     
  0000                00116     extern tens_digit, ones_digit
                      00117     
                      00118 ;*******************************************************************************
                      00119 ; tables
                      00120 ;*******************************************************************************
Warning[207]: Found label after column 1. (Welcome)
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000000 6F62 4C74 0000 00121     Welcome     db          "botL", 0
Warning[207]: Found label after column 1. (Team)
000006 726D 6820 206C 00122     Team        db          "mr hl hg", 0
       6768 0000 
Warning[207]: Found label after column 1. (StandBy)
000010 7453 6E61 6264 00123     StandBy     db          "Standby", 0
       0079 
Warning[207]: Found label after column 1. (Log1)
000018 6954 656D 003A 00124     Log1        db          "Time:",0
Warning[207]: Found label after column 1. (Log2)
00001E 3231 303A 2030 00125     Log2        db          "12:00 2/3/14", 0
       2F32 2F33 3431 
       0000 
Warning[207]: Found label after column 1. (LogInfo1)
00002C 6153 6576 3A64 00126     LogInfo1    db          "Saved:", 0
       0000 
Warning[207]: Found label after column 1. (LogInfo2)
000034 6142 6B63 3C20 00127     LogInfo2    db          "Back <0>", 0
       3E30 0000 
Warning[207]: Found label after column 1. (PermLog1)
00003E 6550 6D72 6E61 00128     PermLog1    db          "Permanent Logs", 0
       6E65 2074 6F4C 
       7367 0000 
Warning[207]: Found label after column 1. (PermLog2)
00004E 313C 203E 2E2E 00129     PermLog2    db          "<1> ... <9>", 0    
       202E 393C 003E 
Warning[207]: Found label after column 1. (Exe1)
00005A 6F53 7472 6E69 00130     Exe1        db          "Sorting...", 0
       2E67 2E2E 0000 
Warning[207]: Found label after column 1. (Exe2)
000066 4E45 2044 2A3C 00131     Exe2        db          "END <*>", 0
       003E 
Warning[207]: Found label after column 1. (PC1)
00006E 4350 4920 746E 00132     PC1         db          "PC Interface", 0
       7265 6166 6563 
       0000 
Warning[207]: Found label after column 1. (PC2)
00007C 6542 6967 206E 00133     PC2         db          "Begin <#>", 0
       233C 003E 
Warning[207]: Found label after column 1. (PCTransfer)
000086 7254 6E61 6673 00134     PCTransfer  db          "Transferring...", 0
       7265 6972 676E 
       2E2E 002E 
Warning[207]: Found label after column 1. (PCComplete)
000096 6F43 706D 656C 00135     PCComplete  db          "Complete!", 0
       6574 0021 
Warning[207]: Found label after column 1. (Stopped)
0000A0 7453 706F 6570 00136     Stopped     db          "Stopped", 0
       0064 
Warning[207]: Found label after column 1. (Exe_Time)
0000A8 6954 656D 203A 00137     Exe_Time    db          "Time: ", 0
       0000 
Warning[207]: Found label after column 1. (SAVE)
0000B0 6153 6976 676E 00138     SAVE        db          "Saving...", 0
       2E2E 002E 
Warning[207]: Found label after column 1. (Safety)
0000BA 6153 6566 7974 00139     Safety      db          "Safety check...", 0
       6320 6568 6B63 
       2E2E 002E 
Warning[207]: Found label after column 1. (NoData)
0000CA 2F4E 0041      00140     NoData      db          "N/A", 0
Warning[207]: Found label after column 1. (PCLog1)
0000CE 6954 656D 6120 00141     PCLog1      db          "Time and Date:", 0
       646E 4420 7461 
       3A65 0000 
                      00142         
                      00143 ;*******************************************************************************
                      00144 ; macros
                      00145 ;*******************************************************************************
                      00146 
                      00147 TransferTable macro table
                      00148         local loop
                      00149         
                      00150         movlw   upper table
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00151         movwf   TBLPTRU
                      00152         movlw   high table
                      00153         movwf   TBLPTRH
                      00154         movlw   low table
                      00155         movwf   TBLPTRL
                      00156         tblrd*
                      00157         movff   TABLAT, WREG
                      00158 loop
                      00159         call    USART_WAIT
                      00160         tblrd+*
                      00161         movff   TABLAT, WREG
                      00162         bnz     loop
                      00163         endm
                      00164         
                      00165 ConfigLCD   macro
                      00166           movlw     b'00101000'    ; 4 bits, 2 lines,5X7 dots seems to work best instead of the above setting
                      00167           call      WR_INS
                      00168 
                      00169           movlw     b'00001100'    ; display on/off
                      00170           call      WR_INS
                      00171          ; movlw     B'00000110'    ; Entry mode
                      00172          ; call      WR_INS
                      00173           movlw     b'00000001'    ; Clear ram
                      00174           call      WR_INS
                      00175           endm
                      00176         
                      00177 movMSB  macro   port
                      00178         andlw   0xF0
                      00179         iorwf   port, f
                      00180         iorlw   0x0F
                      00181         andwf   port, f
                      00182         endm
                      00183 
                      00184 Delay50N macro count, N
                      00185         local   loop
                      00186         movlw   N
                      00187         movwf   count
                      00188 
                      00189 loop
                      00190         call    Delay50ms
                      00191         decfsz  count
                      00192         goto    loop
                      00193         endm
                      00194 
                      00195 Display macro   Message
                      00196         local   loop
                      00197         movlw   upper Message   ; Move Table<20:16>
                      00198         movwf   TBLPTRU
                      00199         movlw   high Message    ; Move Table<15:8>
                      00200         movwf   TBLPTRH
                      00201         movlw   low Message     ; Move Table<7:0>
                      00202         movwf   TBLPTRL
                      00203         tblrd*                  ; Read byte from TBLPTRL to TABLAT
                      00204         movf    TABLAT, W
                      00205 loop
                      00206         call    WR_DATA         ; write to LCD
                      00207         tblrd+*                 ; next row in table
                      00208         movf    TABLAT, W
                      00209         bnz     loop
                      00210         endm
                      00211 
                      00212 DisplayLog  macro   addrH, addrL
                      00213             local   Again, Finish
                      00214             
                      00215             clrf    SkipCount
                      00216             clrf    MAX_EE
                      00217 
                      00218             ; Check if there is No Data first
                      00219             READEE      REG_EE, addrH, addrL
                      00220             movlw       0xFF
                      00221             cpfseq      REG_EE
                      00222             goto        Again
                      00223             Display     NoData
                      00224             goto        Finish
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00225 Again
                      00226             ; Put a space every 3 Writes
                      00227             movlw       d'3'
                      00228             cpfslt      SkipCount
                      00229             cpfslt      MAX_EE
                      00230             goto        Finish
                      00231 
                      00232             ; read EEPROM
                      00233             READEE      REG_EE, addrH, addrL
                      00234             btfsc       REG_EE, 7       ; if bit 7 set then done
                      00235             goto        Finish
                      00236 Finish
                      00237             endm
                      00238             
                      00239 ;TransferLog macro   addrH, addrL
                      00240         
                      00241 
                      00242 incf_BCD    macro   BCD
                      00243         local ones, endBCD
                      00244         movff   BCD, temp
                      00245         
                      00246         ;process ones digit
                      00247         movlw   0x0f
                      00248         andwf   temp
                      00249         movlw   d'9'
                      00250         
                      00251         ;skip if ones digit is 9
                      00252         cpfseq  temp
                      00253         goto    ones
                      00254         
                      00255         movlw   b'00010000'
                      00256         addwf   BCD
                      00257         movlw   0xf0
                      00258         andwf   BCD
                      00259         movlw   0xa0
                      00260         cpfslt  BCD
                      00261         
                      00262         clrf    BCD
                      00263         goto    endBCD
                      00264         
                      00265 ones
                      00266         incf    BCD
                      00267         goto    endBCD
                      00268 endBCD
                      00269         nop
                      00270         endm
                      00271         
                      00272 SUB16   macro   x, y        ; does not modify x nor y
                      00273         local   RESULTS
                      00274         movff   y+1, WREG   ; move high y into working register
                      00275         subwf   x+1, 0      ; do subtraction xH - yH => w
                      00276         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
                      00277         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                      00278         
                      00279         movff   y+0, WREG
                      00280         subwf   x+0, 0  
                      00281 RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
                      00282         endm
                      00283 
                      00284 WriteRTC    macro
                      00285         movff   tens_digit, WREG
                      00286         call    WR_DATA
                      00287         movff   ones_digit, WREG
                      00288         call    WR_DATA
                      00289         endm
                      00290 
                      00291 WriteEE macro   word, addH, addL
                      00292         movff   addH, EEADRH        ; High address
                      00293         movff   addL, EEADR         ; Low address
                      00294         movff   word, EEDATA        ; set word
                      00295 
                      00296         btfsc   EECON1, WR          ; test if WR=0, skip if so
                      00297         bra     $-2
                      00298 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00299         bcf     EECON1, EEPGD       ; Point to data memory
                      00300         bcf     EECON1, CFGS        ; Access EEPROM
                      00301         bsf     EECON1, WREN        ; enable write
                      00302         bcf     INTCON, GIE         ; disable interrupts during write
                      00303         bcf     PIR2, EEIF
                      00304 
                      00305         movlw   0x55
                      00306         movwf   EECON2              ; write 55h
                      00307         movlw   0xaa
                      00308         movwf   EECON2              ; write 0xaa
                      00309         bsf     EECON1, WR          ; begin write
                      00310         btfsc   EECON1, WR
                      00311         bra     $-2
                      00312 
                      00313         bsf     INTCON, GIE         ; enable interrupts after write
                      00314         bcf     EECON1, WREN        ; disable writes
                      00315         endm
                      00316 
                      00317 READEE  macro   file, addH, addL
                      00318         movff   addH, EEADRH        ; read to high
                      00319         movff   addL, EEADR         ; read to low
                      00320         bcf     EECON1, EEPGD       ; point to data memory
                      00321         bcf     EECON1, CFGS        ; access to EEPROM
                      00322         bsf     EECON1, RD          ; read EEPROM
                      00323         movff   EEDATA, file        ; put data into file
                      00324         endm
                      00325 
                      00326 ChangeMode  macro   ModeId, NextMode
                      00327         local Next, Exit
                      00328 
                      00329         movlw   ModeId              ; poll for mode
                      00330         cpfseq  KEY                 ; check this against key press
                      00331         goto    Exit
                      00332 
                      00333 Next
                      00334         clrf    LATA                ; clear pins before proceeding
                      00335         clrf    LATB
                      00336         clrf    LATC
                      00337         clrf    LATD
                      00338         goto    NextMode
                      00339 
                      00340 Exit
                      00341         nop
                      00342         endm
                      00343 
                      00344 saveContext macro
                      00345     movff   STATUS, temp_S          ; save STATUS first
                      00346     movwf   temp_W                  ; save W
                      00347     endm
                      00348 
                      00349 restoreContext macro
                      00350     swapf   temp_W, W               ; restore W first
                      00351     movff   temp_S, STATUS          ; restore STATUS last without affecting W
                      00352     endm
                      00353 ;*******************************************************************************
                      00354 ; reset vector and isrs
                      00355 ;*******************************************************************************
                      00356         ORG     0x000               ; processor reset vector
000000 EF?? F???      00357         goto    INIT                ; go to beginning of program
                      00358 
                      00359         ORG     0x008
000008 EF?? F???      00360         goto    ISR_HIGH
                      00361 
                      00362         ORG     0x018
000018 EF?? F???      00363         goto    ISR_LOW
                      00364 
00001C                00365 ISR_HIGH
                      00366         saveContext
00001C CFD8 F013          M     movff   STATUS, temp_S          ; save STATUS first
000020 6E14               M     movwf   temp_W                  ; save W
                      00367         
                      00368         ; displaying the execution time in seconds
Warning[202]: Argument out of range.  Least significant bits used.
000022 3818           00369         swapf   OP_sec, WREG    ; 100's seconds
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000024 6E17           00370         movwf   temp
000026 0E0F           00371         movlw   0x0F
000028 1617           00372         andwf   temp
00002A C017 FFE8      00373         movff   temp, WREG
00002E 0F30           00374         addlw   0x30
000030 EC?? F???      00375         call    WR_DATA
                      00376 
000034 C018 F017      00377         movff   OP_sec, temp    ; 10's seconds
000038 0E0F           00378         movlw   0x0F
00003A 1617           00379         andwf   temp            ; Temp = lower nibble of Op_sec
00003C C017 FFE8      00380         movff   temp, WREG      ; W = Temp
000040 0F30           00381         addlw   0x30            ; Convert to ASCII
000042 EC?? F???      00382         call    WR_DATA
                      00383         
Warning[202]: Argument out of range.  Least significant bits used.
000046 3819           00384         swapf   OP_INT, WREG    ;1's seconds
000048 6E17           00385         movwf   temp
00004A 0E0F           00386         movlw   0x0f
00004C 1617           00387         andwf   temp
00004E C017 FFE8      00388         movff   temp, WREG
000052 0F30           00389         addlw   0x30
000054 EC?? F???      00390         call    WR_DATA
                      00391 
000058 0E73           00392         movlw   0x73            ; Write 's'
00005A EC?? F???      00393         call    WR_DATA
00005E EC?? F???      00394         call    LCD_L2
                      00395 
                      00396         ;reset timer 
000062 0EC6           00397         movlw   0xc6
000064 6ED7           00398         movwf   TMR0H
000066 0E3E           00399         movlw   0x3e
000068 6ED6           00400         movwf   TMR0L
                      00401                 
                      00402         ;timer interrupt
00006A A4F2           00403         btfss   INTCON, TMR0IF
00006C EF?? F???      00404         goto    END_ISR_HIGH
                      00405         
                      00406         incf_BCD    OP_INT
  0000                    M         local ones, endBCD
000070 C019 F017          M         movff   OP_INT, temp
                          M         
                          M         ;process ones digit
000074 0E0F               M         movlw   0x0f
000076 1617               M         andwf   temp
000078 0E09               M         movlw   d'9'
                          M         
                          M         ;skip if ones digit is 9
00007A 6217               M         cpfseq  temp
00007C EF?? F???          M         goto    ones
                          M         
000080 0E10               M         movlw   b'00010000'
000082 2619               M         addwf   OP_INT
000084 0EF0               M         movlw   0xf0
000086 1619               M         andwf   OP_INT
000088 0EA0               M         movlw   0xa0
00008A 6019               M         cpfslt  OP_INT
                          M         
00008C 6A19               M         clrf    OP_INT
00008E EF?? F???          M         goto    endBCD
                          M         
000092                    M ones
000092 2A19               M         incf    OP_INT
000094 EF?? F???          M         goto    endBCD
000098                    M endBCD
000098 0000               M         nop
00009A 0E00           00407         movlw   d'0'
00009C 6219           00408         cpfseq  OP_INT
00009E EF?? F???      00409         goto    END_ISR_HIGH
                      00410         incf_BCD    OP_sec
  0000                    M         local ones, endBCD
0000A2 C018 F017          M         movff   OP_sec, temp
                          M         
                          M         ;process ones digit
0000A6 0E0F               M         movlw   0x0f
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000A8 1617               M         andwf   temp
0000AA 0E09               M         movlw   d'9'
                          M         
                          M         ;skip if ones digit is 9
0000AC 6217               M         cpfseq  temp
0000AE EF?? F???          M         goto    ones
                          M         
0000B2 0E10               M         movlw   b'00010000'
0000B4 2618               M         addwf   OP_sec
0000B6 0EF0               M         movlw   0xf0
0000B8 1618               M         andwf   OP_sec
0000BA 0EA0               M         movlw   0xa0
0000BC 6018               M         cpfslt  OP_sec
                          M         
0000BE 6A18               M         clrf    OP_sec
0000C0 EF?? F???          M         goto    endBCD
                          M         
0000C4                    M ones
0000C4 2A18               M         incf    OP_sec
0000C6 EF?? F???          M         goto    endBCD
0000CA                    M endBCD
0000CA 0000               M         nop
                      00411 
0000CC                00412 END_ISR_HIGH
0000CC 94F2           00413         bcf     INTCON, TMR0IF
                      00414         restoreContext
0000CE 3814               M     swapf   temp_W, W               ; restore W first
0000D0 C013 FFD8          M     movff   temp_S, STATUS          ; restore STATUS last without affecting W
0000D4 0010           00415         retfie
                      00416 
0000D6                00417 ISR_LOW
                      00418         saveContext
0000D6 CFD8 F013          M     movff   STATUS, temp_S          ; save STATUS first
0000DA 6E14               M     movwf   temp_W                  ; save W
                      00419         ; KEYPAD INTERRUPT
0000DC A0F0           00420         btfss           INTCON3, INT1IF                 ; If KEYPAD interrupt, skip return
0000DE EF?? F???      00421         goto            END_ISR_LOW
                      00422 
                      00423         ;Check operation status
                      00424 ;       movlw           0xff                                    ; If in operation, skip return
                      00425 ;       cpfseq          InExecution
                      00426 ;       goto            END_ISR_LOW
                      00427 
                      00428         ; Process KEY
0000E2 3881           00429         swapf           PORTB, W                                ; Read PORTB<7:4> into W<3:0>
0000E4 0B0F           00430         andlw           0x0f
0000E6 6E12           00431         movwf           KEY_ISR                                 ; Put W into KEY_ISR
                      00432 ;       movlw           keyS                                    ; Put keyStar into W to compare to KEY_ISR
                      00433 ;       cpfseq          KEY_ISR                                 ; If key was '*', skip return
0000E8 EF?? F???      00434         goto            END_ISR_LOW
                      00435 
                      00436         ; Reset program counter
0000EC 6AFF           00437         clrf            TOSU
0000EE 6AFE           00438         clrf            TOSH
0000F0 6AFD           00439         clrf            TOSL
                      00440 
0000F2                00441 END_ISR_LOW
0000F2 90F0           00442         bcf                     INTCON3, INT1IF         ; Clear flag for next interrupt
                      00443         restoreContext
0000F4 3814               M     swapf   temp_W, W               ; restore W first
0000F6 C013 FFD8          M     movff   temp_S, STATUS          ; restore STATUS last without affecting W
0000FA 0010           00444         retfie
                      00445 
                      00446 ;*******************************************************************************
                      00447 ; main
                      00448 ;*******************************************************************************
0000FC                00449 INIT
                      00450         ; i/o
0000FC 0EFF           00451         movlw   b'11111111'
0000FE 6E92           00452         movwf   TRISA
000100 0EFF           00453         movlw   b'11111111'
000102 6E93           00454         movwf   TRISB               ; keypad
000104 0E00           00455         movlw   b'00000000'
000106 6E94           00456         movwf   TRISC
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000108 0E00           00457         movlw   b'00000000'
00010A 6E95           00458         movwf   TRISD
00010C 0E07           00459         movlw   b'00000111'
00010E 6E96           00460         movwf   TRISE
                      00461 
                      00462         ; analog/digital pins
000110 0E0F           00463         movlw   b'00001111'     ; Set all AN pins to Digital
000112 6EC1           00464         movwf   ADCON1
                      00465 
                      00466         ; clear ports
000114 6A89           00467         clrf    LATA
000116 6A8A           00468         clrf    LATB
000118 6A8B           00469         clrf    LATC
00011A 6A8C           00470         clrf    LATD
00011C 6A8D           00471         clrf    LATE
                      00472         
00011E 0E00           00473         movlw   b'00000000'
000120 6EC2           00474         movwf   ADCON0
                      00475 ;       movlw   b'11111111'
                      00476 ;       movwf   ADCON1
                      00477         
                      00478         ; initializations
000122 EC?? F???      00479         call    InitLCD
                      00480         ConfigLCD
000126 0E28               M           movlw     b'00101000'    ; 4 bits, 2 lines,5X7 dots seems to work best instead of the above setting
000128 EC?? F???          M           call      WR_INS
                          M 
00012C 0E0C               M           movlw     b'00001100'    ; display on/off
00012E EC?? F???          M           call      WR_INS
                          M          ; movlw     B'00000110'    ; Entry mode
                          M          ; call      WR_INS
000132 0E01               M           movlw     b'00000001'    ; Clear ram
000134 EC?? F???          M           call      WR_INS
000138 EC?? F???      00481         call    RTC_INIT
00013C EC?? F???      00482         call    Delay50ms
                      00483         COLOUR_INIT
                          M         COLOUR_WRITE    0x00, 0x01 ; Enable Register (0x00), Power ON (0x01)
000140 0E00               M         movlw   0x00
000142 6E??               M         movwf   regaddress
000144 0E01               M         movlw   0x01
000146 6E??               M         movwf   databyte
000148 EC?? F???          M         call    WRITE_COLOUR_I2C
00014C EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x00, 0x02 ; Enable Register (0x00), RGBC enable (0x02)
000150 0E00               M         movlw   0x00
000152 6E??               M         movwf   regaddress
000154 0E02               M         movlw   0x02
000156 6E??               M         movwf   databyte
000158 EC?? F???          M         call    WRITE_COLOUR_I2C
00015C EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x01, 0xff ; Timing Register (0x01), 2.4ms (0xff) cycle
000160 0E01               M         movlw   0x01
000162 6E??               M         movwf   regaddress
000164 0EFF               M         movlw   0xff
000166 6E??               M         movwf   databyte
000168 EC?? F???          M         call    WRITE_COLOUR_I2C
00016C EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x0f, 0x03 ; Control Register (0x0f), 60x gain (0x03)
000170 0E0F               M         movlw   0x0f
000172 6E??               M         movwf   regaddress
000174 0E03               M         movlw   0x03
000176 6E??               M         movwf   databyte
000178 EC?? F???          M         call    WRITE_COLOUR_I2C
00017C EC?? F???          M         call    delay5ms
                      00484         ;call   INIT_USART
                      00485 
                      00486         ; interrupts
000180 6AD0           00487         clrf    RCON
000182 6AF2           00488         clrf    INTCON
000184 6AF1           00489         clrf    INTCON2
000186 6AF0           00490         clrf    INTCON3
000188 8ED0           00491         bsf     RCON, IPEN          ; priority mode
00018A 8EF2           00492         bsf     INTCON, GIEH        ; permit global interrupts
00018C 8CF2           00493         bsf     INTCON, GIEL
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00018E 8AF1           00494         bsf     INTCON2, INTEDG1    ; INTEDG1 on rising edge
000190 8AF2           00495         bsf     INTCON, TMR0IE      ; clear timer0 overflow interrupt flag
000192 84F2           00496         bsf     INTCON, TMR0IF      ; clear timer0 overflow interrupt flag
000194 84F1           00497         bsf     INTCON2, TMR0IP     ; set to high priority
000196 86F0           00498         bsf     INTCON3, INT1IE
000198 9CF0           00499         bcf     INTCON3, INT1IP
                      00500         
                      00501         ; setting up timer to sychronize with 1 second clock intervals
00019A 9ED5           00502         bcf     T0CON, TMR0ON
00019C 9CD5           00503         bcf     T0CON, T08BIT
00019E 9AD5           00504         bcf     T0CON, T0CS
0001A0 98D5           00505         bcf     T0CON, T0SE
0001A2 96D5           00506         bcf     T0CON, PSA
0001A4 94D5           00507         bcf     T0CON, T0PS2        ; set prescaling to 1:16. this allows for 
0001A6 82D5           00508         bsf     T0CON, T0PS1        ; a preloading of ~50750 or 0xc63e. very
0001A8 80D5           00509         bsf     T0CON, T0PS0        ; good approximation within 3 minutes.
                      00510 
0001AA 6A21           00511         clrf    H_EE
0001AC 6A22           00512         clrf    L_EE
0001AE 6A??           00513         clrf    tens_digit
0001B0 6A??           00514         clrf    ones_digit
0001B2 6A40           00515         clrf    DETECTION_VAL
0001B4 6A41           00516         clrf    ESKA
0001B6 6A42           00517         clrf    ESKA_CAP
0001B8 6A43           00518         clrf    YOP
0001BA 6A44           00519         clrf    YOP_CAP
0001BC 6A45           00520         clrf    CLEAR+0
0001BE 6A46           00521         clrf    CLEAR+1 
0001C0 6A47           00522         clrf    RED+0
0001C2 6A48           00523         clrf    RED+1
0001C4 6A49           00524         clrf    GREEN+0
0001C6 6A4A           00525         clrf    GREEN+1
0001C8 6A4B           00526         clrf    BLUE+0
0001CA 6A4C           00527         clrf    BLUE+1
                      00528         
0001CC 0EF2           00529         movlw     b'11110010'    ; Set required keypad inputs
0001CE 6E93           00530         movwf     TRISB
                      00531         
0001D0 EC?? F???      00532         call    ClrLCD
                      00533         Display Welcome
  0000                    M         local   loop
0001D4 0E??               M         movlw   upper Welcome   ; Move Table<20:16>
0001D6 6EF8               M         movwf   TBLPTRU
0001D8 0E??               M         movlw   high Welcome    ; Move Table<15:8>
0001DA 6EF7               M         movwf   TBLPTRH
0001DC 0E??               M         movlw   low Welcome     ; Move Table<7:0>
0001DE 6EF6               M         movwf   TBLPTRL
0001E0 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0001E2 50F5               M         movf    TABLAT, W
0001E4                    M loop
0001E4 EC?? F???          M         call    WR_DATA         ; write to LCD
0001E8 000B               M         tblrd+*                 ; next row in table
0001EA 50F5               M         movf    TABLAT, W
0001EC E1??               M         bnz     loop
0001EE EC?? F???      00534         call LCD_L2
                      00535         Display Team
  0000                    M         local   loop
0001F2 0E??               M         movlw   upper Team      ; Move Table<20:16>
0001F4 6EF8               M         movwf   TBLPTRU
0001F6 0E??               M         movlw   high Team       ; Move Table<15:8>
0001F8 6EF7               M         movwf   TBLPTRH
0001FA 0E??               M         movlw   low Team        ; Move Table<7:0>
0001FC 6EF6               M         movwf   TBLPTRL
0001FE 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000200 50F5               M         movf    TABLAT, W
000202                    M loop
000202 EC?? F???          M         call    WR_DATA         ; write to LCD
000206 000B               M         tblrd+*                 ; next row in table
000208 50F5               M         movf    TABLAT, W
00020A E1??               M         bnz     loop
                      00536         
                      00537         Delay50N delayR, 0x28
  0000                    M         local   loop
00020C 0E28               M         movlw   0x28
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00020E 6E1B               M         movwf   delayR
                          M 
000210                    M loop
000210 EC?? F???          M         call    Delay50ms
000214 2E1B               M         decfsz  delayR
000216 EF?? F???          M         goto    loop
                      00538 
                      00539 ;*******************************************************************************
                      00540 ; standby mode
                      00541 ;*******************************************************************************
00021A                00542 STANDBY
00021A EC?? F???      00543         call    ClrLCD
                      00544         Display StandBy
  0000                    M         local   loop
00021E 0E??               M         movlw   upper StandBy   ; Move Table<20:16>
000220 6EF8               M         movwf   TBLPTRU
000222 0E??               M         movlw   high StandBy    ; Move Table<15:8>
000224 6EF7               M         movwf   TBLPTRH
000226 0E??               M         movlw   low StandBy     ; Move Table<7:0>
000228 6EF6               M         movwf   TBLPTRL
00022A 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
00022C 50F5               M         movf    TABLAT, W
00022E                    M loop
00022E EC?? F???          M         call    WR_DATA         ; write to LCD
000232 000B               M         tblrd+*                 ; next row in table
000234 50F5               M         movf    TABLAT, W
000236 E1??               M         bnz     loop
                      00545 
000238                00546 HOLD_STANDBY
000238 EC?? F???      00547         call    READ_KEY_TIME
                      00548         ChangeMode  key5, COLOUR_TEST
  0000                    M         local Next, Exit
                          M 
00023C 0E05               M         movlw   key5                ; poll for mode
00023E 6210               M         cpfseq  KEY                 ; check this against key press
000240 EF?? F???          M         goto    Exit
                          M 
000244                    M Next
000244 6A89               M         clrf    LATA                ; clear pins before proceeding
000246 6A8A               M         clrf    LATB
000248 6A8B               M         clrf    LATC
00024A 6A8C               M         clrf    LATD
00024C EF?? F???          M         goto    COLOUR_TEST
                          M 
000250                    M Exit
000250 0000               M         nop
                      00549         ChangeMode  key8, STEP_TEST
  0000                    M         local Next, Exit
                          M 
000252 0E09               M         movlw   key8                ; poll for mode
000254 6210               M         cpfseq  KEY                 ; check this against key press
000256 EF?? F???          M         goto    Exit
                          M 
00025A                    M Next
00025A 6A89               M         clrf    LATA                ; clear pins before proceeding
00025C 6A8A               M         clrf    LATB
00025E 6A8B               M         clrf    LATC
000260 6A8C               M         clrf    LATD
000262 EF?? F???          M         goto    STEP_TEST
                          M 
000266                    M Exit
000266 0000               M         nop
                      00550         ChangeMode  keyA, EXECUTION
  0000                    M         local Next, Exit
                          M 
000268 0E03               M         movlw   keyA                ; poll for mode
00026A 6210               M         cpfseq  KEY                 ; check this against key press
00026C EF?? F???          M         goto    Exit
                          M 
000270                    M Next
000270 6A89               M         clrf    LATA                ; clear pins before proceeding
000272 6A8A               M         clrf    LATB
000274 6A8B               M         clrf    LATC
000276 6A8C               M         clrf    LATD
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000278 EF?? F???          M         goto    EXECUTION
                          M 
00027C                    M Exit
00027C 0000               M         nop
                      00551         ChangeMode  keyB, LOG
  0000                    M         local Next, Exit
                          M 
00027E 0E07               M         movlw   keyB                ; poll for mode
000280 6210               M         cpfseq  KEY                 ; check this against key press
000282 EF?? F???          M         goto    Exit
                          M 
000286                    M Next
000286 6A89               M         clrf    LATA                ; clear pins before proceeding
000288 6A8A               M         clrf    LATB
00028A 6A8B               M         clrf    LATC
00028C 6A8C               M         clrf    LATD
00028E EF?? F???          M         goto    LOG
                          M 
000292                    M Exit
000292 0000               M         nop
                      00552         ChangeMode  keyC, PERM_LOG
  0000                    M         local Next, Exit
                          M 
000294 0E0B               M         movlw   keyC                ; poll for mode
000296 6210               M         cpfseq  KEY                 ; check this against key press
000298 EF?? F???          M         goto    Exit
                          M 
00029C                    M Next
00029C 6A89               M         clrf    LATA                ; clear pins before proceeding
00029E 6A8A               M         clrf    LATB
0002A0 6A8B               M         clrf    LATC
0002A2 6A8C               M         clrf    LATD
0002A4 EF?? F???          M         goto    PERM_LOG
                          M 
0002A8                    M Exit
0002A8 0000               M         nop
                      00553         ChangeMode  keyD, PC_MODE
  0000                    M         local Next, Exit
                          M 
0002AA 0E0F               M         movlw   keyD                ; poll for mode
0002AC 6210               M         cpfseq  KEY                 ; check this against key press
0002AE EF?? F???          M         goto    Exit
                          M 
0002B2                    M Next
0002B2 6A89               M         clrf    LATA                ; clear pins before proceeding
0002B4 6A8A               M         clrf    LATB
0002B6 6A8B               M         clrf    LATC
0002B8 6A8C               M         clrf    LATD
0002BA EF?? F???          M         goto    PC_MODE
                          M 
0002BE                    M Exit
0002BE 0000               M         nop
0002C0 D???           00554         bra     HOLD_STANDBY
                      00555 
                      00556 ;*******************************************************************************
                      00557 ; execution mode
                      00558 ;*******************************************************************************
                      00559         
0002C2                00560 STEP_TEST
0002C2 0E03           00561         movlw   b'00000011'
0002C4 6E83           00562         movwf   PORTD
0002C6 EC?? F???      00563         call    delay5ms
                      00564         
0002CA 0E06           00565         movlw   b'00000110'
0002CC 6E83           00566         movwf   PORTD
0002CE EC?? F???      00567         call    delay5ms
                      00568         
0002D2 0E0C           00569         movlw   b'00001100'
0002D4 6E83           00570         movwf   PORTD
0002D6 EC?? F???      00571         call    delay5ms
                      00572 
0002DA 0E09           00573         movlw   b'00001001'
0002DC 6E83           00574         movwf   PORTD
0002DE EC?? F???      00575         call    delay5ms
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00576 
0002E2 D???           00577         bra STEP_TEST
                      00578         
0002E4                00579 CHECK_CLEAR
                      00580         SUB16   CLEAR, RED                  ; check first against red
  0000                    M         local   RESULTS
0002E4 C048 FFE8          M         movff   RED+1, WREG ; move high y into working register
0002E8 5C46               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
0002EA A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0002EC EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0002F0 C047 FFE8          M         movff   RED+0, WREG
0002F4 5C45               M         subwf   CLEAR+0, 0 
0002F6                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0002F6 A0D8           00581         btfss   STATUS, C
0002F8 0012           00582         return                              ; RED > CLEAR
                      00583         
                      00584         SUB16   CLEAR, GREEN                ; check against green
  0000                    M         local   RESULTS
0002FA C04A FFE8          M         movff   GREEN+1, WREG ; move high y into working register
0002FE 5C46               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
000300 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000302 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000306 C049 FFE8          M         movff   GREEN+0, WREG
00030A 5C45               M         subwf   CLEAR+0, 0 
00030C                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
00030C A0D8           00585         btfss   STATUS, C
00030E 0012           00586         return                              ; GREEN > CLEAR
                      00587         
                      00588         SUB16   CLEAR, BLUE                 ; check against blue
  0000                    M         local   RESULTS
000310 C04C FFE8          M         movff   BLUE+1, WREG ; move high y into working register
000314 5C46               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
000316 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000318 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00031C C04B FFE8          M         movff   BLUE+0, WREG
000320 5C45               M         subwf   CLEAR+0, 0 
000322                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000322 A0D8           00589         btfss   STATUS, C
000324 0012           00590         return                              ; BLUE > CLEAR
                      00591         
000326 0E63           00592         movlw   'c'                         ; CLEAR > everything else
000328 EC?? F???      00593         call    WR_DATA
00032C D???           00594         bra     LOOPING
00032E                00595 CHECK_RED
                      00596         SUB16   RED, CLEAR                  ; check first against clear
  0000                    M         local   RESULTS
00032E C046 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
000332 5C48               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
000334 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000336 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00033A C045 FFE8          M         movff   CLEAR+0, WREG
00033E 5C47               M         subwf   RED+0, 0 
000340                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000340 A0D8           00597         btfss   STATUS, C
000342 0012           00598         return                              ; CLEAR > RED
                      00599         
                      00600         SUB16   RED, GREEN                  ; check against green
  0000                    M         local   RESULTS
000344 C04A FFE8          M         movff   GREEN+1, WREG ; move high y into working register
000348 5C48               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
00034A A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00034C EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000350 C049 FFE8          M         movff   GREEN+0, WREG
000354 5C47               M         subwf   RED+0, 0 
000356                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000356 A0D8           00601         btfss   STATUS, C
000358 0012           00602         return                              ; GREEN > RED
                      00603         
                      00604         SUB16   RED, BLUE                   ; check against blue
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M         local   RESULTS
00035A C04C FFE8          M         movff   BLUE+1, WREG ; move high y into working register
00035E 5C48               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
000360 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000362 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000366 C04B FFE8          M         movff   BLUE+0, WREG
00036A 5C47               M         subwf   RED+0, 0 
00036C                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
00036C A0D8           00605         btfss   STATUS, C
00036E 0012           00606         return                              ; BLUE > RED
                      00607         
000370 0E72           00608         movlw   'r'                         ; RED > everything else
000372 EC?? F???      00609         call    WR_DATA
000376 D???           00610         bra     LOOPING
000378                00611 CHECK_GREEN
                      00612         SUB16   GREEN, CLEAR                ; check first against clear
  0000                    M         local   RESULTS
000378 C046 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
00037C 5C4A               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
00037E A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000380 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000384 C045 FFE8          M         movff   CLEAR+0, WREG
000388 5C49               M         subwf   GREEN+0, 0 
00038A                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
00038A A0D8           00613         btfss   STATUS, C
00038C 0012           00614         return                              ; CLEAR > GREEN
                      00615         
                      00616         SUB16   GREEN, RED                  ; check against red
  0000                    M         local   RESULTS
00038E C048 FFE8          M         movff   RED+1, WREG ; move high y into working register
000392 5C4A               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
000394 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000396 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00039A C047 FFE8          M         movff   RED+0, WREG
00039E 5C49               M         subwf   GREEN+0, 0 
0003A0                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003A0 A0D8           00617         btfss   STATUS, C
0003A2 0012           00618         return                              ; RED > GREEN
                      00619         
                      00620         SUB16   GREEN, BLUE                 ; check against blue
  0000                    M         local   RESULTS
0003A4 C04C FFE8          M         movff   BLUE+1, WREG ; move high y into working register
0003A8 5C4A               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
0003AA A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003AC EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003B0 C04B FFE8          M         movff   BLUE+0, WREG
0003B4 5C49               M         subwf   GREEN+0, 0 
0003B6                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003B6 A0D8           00621         btfss   STATUS, C
0003B8 0012           00622         return                              ; BLUE > GREEN
                      00623         
0003BA 0E67           00624         movlw   'g'                         ; GREEN > everything else
0003BC EC?? F???      00625         call    WR_DATA
0003C0 D???           00626         bra     LOOPING
0003C2                00627 CHECK_BLUE
                      00628         SUB16   BLUE, CLEAR                 ; check first against clear
  0000                    M         local   RESULTS
0003C2 C046 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
0003C6 5C4C               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
0003C8 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003CA EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003CE C045 FFE8          M         movff   CLEAR+0, WREG
0003D2 5C4B               M         subwf   BLUE+0, 0 
0003D4                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003D4 A0D8           00629         btfss   STATUS, C
0003D6 0012           00630         return                              ; CLEAR > BLUE
                      00631         
                      00632         SUB16   BLUE, RED                   ; check against red
  0000                    M         local   RESULTS
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003D8 C048 FFE8          M         movff   RED+1, WREG ; move high y into working register
0003DC 5C4C               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
0003DE A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003E0 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003E4 C047 FFE8          M         movff   RED+0, WREG
0003E8 5C4B               M         subwf   BLUE+0, 0 
0003EA                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003EA A0D8           00633         btfss   STATUS, C
0003EC 0012           00634         return                              ; RED > BLUE
                      00635 
                      00636         SUB16   BLUE, GREEN                 ; check against green
  0000                    M         local   RESULTS
0003EE C04A FFE8          M         movff   GREEN+1, WREG ; move high y into working register
0003F2 5C4C               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
0003F4 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003F6 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003FA C049 FFE8          M         movff   GREEN+0, WREG
0003FE 5C4B               M         subwf   BLUE+0, 0 
000400                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000400 A0D8           00637         btfss   STATUS, C
000402 0012           00638         return                              ; GREEN > CLEAR
                      00639         
000404 0E62           00640         movlw   'b'                         ; BLUE > everything else
000406 EC?? F???      00641         call    WR_DATA
00040A 0012           00642         return
                      00643         
00040C                00644 COLOUR_TEST
                      00645 
00040C                00646 LOOPING
                      00647         Delay50N delayR, 0x28
  0000                    M         local   loop
00040C 0E28               M         movlw   0x28
00040E 6E1B               M         movwf   delayR
                          M 
000410                    M loop
000410 EC?? F???          M         call    Delay50ms
000414 2E1B               M         decfsz  delayR
000416 EF?? F???          M         goto    loop
00041A EC?? F???      00648         call    ClrLCD
                      00649         ARDUINO_READ    DETECTION_VAL
00041E EC?? F???          M         call    READ_ARDUINO
000422 CFE8 F040          M         movff   WREG, DETECTION_VAL
                      00650         
000426 0E01           00651         movlw   d'1'
000428 6240           00652         cpfseq  DETECTION_VAL
00042A 0E31           00653         movlw   '1'
00042C EC?? F???      00654         call    WR_DATA
                      00655         
                      00656 ;       COLOUR_GET_DATA CLEAR, RED, GREEN, BLUE
                      00657 ;       Delay50N delayR, 0x02
                      00658         
                      00659 ;       movlw   0x01            ;testing
                      00660 ;       movwf   CLEAR+1
                      00661 ;       movlw   0x06
                      00662 ;       movwf   GREEN+0
                      00663 ;       movlw   0x03
                      00664 ;       movwf   RED+0
                      00665 ;       movlw   0x01
                      00666 ;       movwf   BLUE+0
                      00667         
                      00668 ;       movlw   d'0'
                      00669 ;       cpfseq  RED+0
                      00670 ;       movlw   'w'
                      00671 ;       call    WR_DATA
                      00672 
                      00673         ;call   CHECK_CLEAR
                      00674 ;       call    CHECK_RED
                      00675 ;       call    CHECK_GREEN
                      00676 ;       call    CHECK_BLUE
000430 D???           00677         bra LOOPING
                      00678         
000432                00679 EXECUTION
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000432 EC?? F???      00680         call        ClearEEPROM_21
                      00681         ; save the starting time
000436 EC?? F???      00682         call        SAVE_TIME
                      00683                 
                      00684         ; display
00043A 681F           00685         setf        inExecution
00043C EC?? F???      00686         call        ClrLCD
                      00687         Display     Exe1
  0000                    M         local   loop
000440 0E??               M         movlw   upper Exe1      ; Move Table<20:16>
000442 6EF8               M         movwf   TBLPTRU
000444 0E??               M         movlw   high Exe1       ; Move Table<15:8>
000446 6EF7               M         movwf   TBLPTRH
000448 0E??               M         movlw   low Exe1        ; Move Table<7:0>
00044A 6EF6               M         movwf   TBLPTRL
00044C 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
00044E 50F5               M         movf    TABLAT, W
000450                    M loop
000450 EC?? F???          M         call    WR_DATA         ; write to LCD
000454 000B               M         tblrd+*                 ; next row in table
000456 50F5               M         movf    TABLAT, W
000458 E1??               M         bnz     loop
00045A EC?? F???      00688         call        LCD_L2
00045E 0EC5           00689         movlw       0xc5                    ; setting up timer
000460 6ED7           00690         movwf       TMR0H
000462 0E44           00691         movlw       0x44    
000464 6ED6           00692         movwf       TMR0L
                      00693         
000466 8ED5           00694         bsf         T0CON, TMR0ON           ; turning on timer
                      00695         ; initialize variables
000468 6A18           00696         clrf        OP_sec
00046A 6A19           00697         clrf        OP_INT
                      00698         
00046C 6A41           00699         clrf        ESKA
00046E 6A42           00700         clrf        ESKA_CAP
000470 6A43           00701         clrf        YOP
000472 6A44           00702         clrf        YOP_CAP
                      00703         
000474 6A45           00704         clrf        CLEAR
000476 6A46           00705         clrf        CLEAR+1     
000478 6A47           00706         clrf        RED
00047A 6A48           00707         clrf        RED+1
00047C 6A49           00708         clrf        GREEN
00047E 6A4A           00709         clrf        GREEN+1
000480 6A4B           00710         clrf        BLUE
000482 6A4C           00711         clrf        BLUE+1
                      00712         
                      00713 ;COLLECTIONS_STEP
                      00714 ;       
                      00715 ;TERM_CHECK
                      00716 ;       
                      00717 ;BOTTLE_CHECK
                      00718 ;
                      00719 ;COLOUR_ONE
                      00720 ;
                      00721 ;COLOUR_TWO
                      00722 ;       
                      00723 ;BRAINS
                      00724 ;       
                      00725 ;TRAY_STEP
                      00726 ;       
                      00727 
000484                00728 HOLD_EXE
000484 EC?? F???      00729         call        READ_KEY
                      00730         ChangeMode  keyS, EXIT_EXE
  0000                    M         local Next, Exit
                          M 
000488 0E0C               M         movlw   keyS                ; poll for mode
00048A 6210               M         cpfseq  KEY                 ; check this against key press
00048C EF?? F???          M         goto    Exit
                          M 
000490                    M Next
000490 6A89               M         clrf    LATA                ; clear pins before proceeding
000492 6A8A               M         clrf    LATB
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000494 6A8B               M         clrf    LATC
000496 6A8C               M         clrf    LATD
000498 EF?? F???          M         goto    EXIT_EXE
                          M 
00049C                    M Exit
00049C 0000               M         nop
00049E D???           00731         bra         HOLD_EXE
                      00732         
0004A0                00733 EXIT_EXE
                      00734         ; stop timer and save the execution time to eeprom
0004A0 9ED5           00735         bcf         T0CON, TMR0ON
0004A2 EC?? F???      00736         call        SAVE_EXE_TIME
                      00737                 
                      00738         ; Clear inExecution flag to stop '*' interrupts
0004A6 6A1F           00739         clrf        inExecution
                      00740         
0004A8 C041 FFE8      00741         movff       ESKA, WREG
0004AC 0F30           00742         addlw       0x30
                      00743         WriteEE     WREG, H_EE, L_EE
0004AE C021 FFAA          M         movff   H_EE, EEADRH        ; High address
0004B2 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
0004B6 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
0004BA B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
0004BC D???               M         bra     $-2
                          M 
0004BE 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
0004C0 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
0004C2 84A6               M         bsf     EECON1, WREN        ; enable write
0004C4 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
0004C6 98A1               M         bcf     PIR2, EEIF
                          M 
0004C8 0E55               M         movlw   0x55
0004CA 6EA7               M         movwf   EECON2              ; write 55h
0004CC 0EAA               M         movlw   0xaa
0004CE 6EA7               M         movwf   EECON2              ; write 0xaa
0004D0 82A6               M         bsf     EECON1, WR          ; begin write
0004D2 B2A6               M         btfsc   EECON1, WR
0004D4 D???               M         bra     $-2
                          M 
0004D6 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
0004D8 94A6               M         bcf     EECON1, WREN        ; disable writes
0004DA 2A22           00744         incf        L_EE
                      00745         
0004DC C042 FFE8      00746         movff       ESKA_CAP, WREG
0004E0 0F30           00747         addlw       0x30
                      00748         WriteEE     WREG, H_EE, L_EE
0004E2 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
0004E6 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
0004EA CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
0004EE B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
0004F0 D???               M         bra     $-2
                          M 
0004F2 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
0004F4 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
0004F6 84A6               M         bsf     EECON1, WREN        ; enable write
0004F8 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
0004FA 98A1               M         bcf     PIR2, EEIF
                          M 
0004FC 0E55               M         movlw   0x55
0004FE 6EA7               M         movwf   EECON2              ; write 55h
000500 0EAA               M         movlw   0xaa
000502 6EA7               M         movwf   EECON2              ; write 0xaa
000504 82A6               M         bsf     EECON1, WR          ; begin write
000506 B2A6               M         btfsc   EECON1, WR
000508 D???               M         bra     $-2
                          M 
00050A 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
00050C 94A6               M         bcf     EECON1, WREN        ; disable writes
00050E 2A22           00749         incf        L_EE
                      00750         
000510 C043 FFE8      00751         movff       YOP, WREG
000514 0F30           00752         addlw       0x30
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00753         WriteEE     WREG, H_EE, L_EE
000516 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
00051A C022 FFA9          M         movff   L_EE, EEADR         ; Low address
00051E CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000522 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000524 D???               M         bra     $-2
                          M 
000526 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000528 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
00052A 84A6               M         bsf     EECON1, WREN        ; enable write
00052C 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
00052E 98A1               M         bcf     PIR2, EEIF
                          M 
000530 0E55               M         movlw   0x55
000532 6EA7               M         movwf   EECON2              ; write 55h
000534 0EAA               M         movlw   0xaa
000536 6EA7               M         movwf   EECON2              ; write 0xaa
000538 82A6               M         bsf     EECON1, WR          ; begin write
00053A B2A6               M         btfsc   EECON1, WR
00053C D???               M         bra     $-2
                          M 
00053E 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000540 94A6               M         bcf     EECON1, WREN        ; disable writes
000542 2A22           00754         incf        L_EE
                      00755         
000544 C044 FFE8      00756         movff       YOP_CAP, WREG
000548 0F30           00757         addlw       0x30
                      00758         WriteEE     WREG, H_EE, L_EE
00054A C021 FFAA          M         movff   H_EE, EEADRH        ; High address
00054E C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000552 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000556 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000558 D???               M         bra     $-2
                          M 
00055A 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
00055C 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
00055E 84A6               M         bsf     EECON1, WREN        ; enable write
000560 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000562 98A1               M         bcf     PIR2, EEIF
                          M 
000564 0E55               M         movlw   0x55
000566 6EA7               M         movwf   EECON2              ; write 55h
000568 0EAA               M         movlw   0xaa
00056A 6EA7               M         movwf   EECON2              ; write 0xaa
00056C 82A6               M         bsf     EECON1, WR          ; begin write
00056E B2A6               M         btfsc   EECON1, WR
000570 D???               M         bra     $-2
                          M 
000572 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000574 94A6               M         bcf     EECON1, WREN        ; disable writes
000576 2A22           00759         incf        L_EE
                      00760         
000578 EF?? F???      00761         goto        SaveData
                      00762 
00057C                00763 SaveData
00057C EC?? F???      00764         call        ClrLCD
                      00765         Display     SAVE
  0000                    M         local   loop
000580 0E??               M         movlw   upper SAVE      ; Move Table<20:16>
000582 6EF8               M         movwf   TBLPTRU
000584 0E??               M         movlw   high SAVE       ; Move Table<15:8>
000586 6EF7               M         movwf   TBLPTRH
000588 0E??               M         movlw   low SAVE        ; Move Table<7:0>
00058A 6EF6               M         movwf   TBLPTRL
00058C 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
00058E 50F5               M         movf    TABLAT, W
000590                    M loop
000590 EC?? F???          M         call    WR_DATA         ; write to LCD
000594 000B               M         tblrd+*                 ; next row in table
000596 50F5               M         movf    TABLAT, W
000598 E1??               M         bnz     loop
                      00766 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00059A 0E00           00767         movlw       d'0'
00059C 6E21           00768         movwf       H_EE
00059E 0EA8           00769         movlw       d'168'              ; take d'168' as last
0005A0 6E22           00770         movwf       L_EE
0005A2 0E00           00771         movlw       d'0'
0005A4 6E24           00772         movwf       tempH_EE
0005A6 0EDC           00773         movlw       d'220'              ; temp for low constant
0005A8 6E25           00774         movwf       tempL_EE
                      00775         
0005AA 6A16           00776         clrf        counter2
0005AC 6A15           00777         clrf        counter
                      00778         
0005AE                00779 ShiftLoop
0005AE 2A15           00780         incf            counter
                      00781         READEE          REG_EE, H_EE, L_EE
0005B0 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
0005B4 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
0005B8 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
0005BA 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
0005BC 80A6               M         bsf     EECON1, RD          ; read EEPROM
0005BE CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
0005C2 0E15           00782         movlw           d'21'
0005C4 2622           00783         addwf           L_EE
                      00784         WriteEE         REG_EE, H_EE, L_EE
0005C6 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
0005CA C022 FFA9          M         movff   L_EE, EEADR         ; Low address
0005CE C023 FFA8          M         movff   REG_EE, EEDATA      ; set word
                          M 
0005D2 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
0005D4 D???               M         bra     $-2
                          M 
0005D6 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
0005D8 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
0005DA 84A6               M         bsf     EECON1, WREN        ; enable write
0005DC 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
0005DE 98A1               M         bcf     PIR2, EEIF
                          M 
0005E0 0E55               M         movlw   0x55
0005E2 6EA7               M         movwf   EECON2              ; write 55h
0005E4 0EAA               M         movlw   0xaa
0005E6 6EA7               M         movwf   EECON2              ; write 0xaa
0005E8 82A6               M         bsf     EECON1, WR          ; begin write
0005EA B2A6               M         btfsc   EECON1, WR
0005EC D???               M         bra     $-2
                          M 
0005EE 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
0005F0 94A6               M         bcf     EECON1, WREN        ; disable writes
0005F2 0E14           00785         movlw           d'20'
0005F4 5E22           00786         subwf           L_EE
0005F6 0E15           00787         movlw           d'21'
0005F8 6215           00788         cpfseq          counter
0005FA EF?? F???      00789         goto            ShiftLoop
                      00790         
                      00791         ; Set EEPROM address to the previous 21 byte block, and reset temp address
0005FE 0E2A           00792         movlw           d'42'
000600 5E22           00793         subwf           L_EE
000602 0EDC           00794         movlw           d'220'
000604 6E25           00795         movwf           tempL_EE
000606 6A15           00796         clrf            counter
000608 2A16           00797         incf            counter2
00060A 0E09           00798         movlw           d'9'
00060C 6216           00799         cpfseq          counter2        ; Skip if 9 shifts were made
00060E EF?? F???      00800         goto            ShiftLoop
                      00801 
000612 EF?? F???      00802         goto            LOG
                      00803 
                      00804 ;*******************************************************************************
                      00805 ; sorting statistics log mode
                      00806 ;*******************************************************************************
                      00807         
000616                00808 LOG
000616 EC?? F???      00809         call    ClrLCD
                      00810         Display Log1
  0000                    M         local   loop
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00061A 0E??               M         movlw   upper Log1      ; Move Table<20:16>
00061C 6EF8               M         movwf   TBLPTRU
00061E 0E??               M         movlw   high Log1       ; Move Table<15:8>
000620 6EF7               M         movwf   TBLPTRH
000622 0E??               M         movlw   low Log1        ; Move Table<7:0>
000624 6EF6               M         movwf   TBLPTRL
000626 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000628 50F5               M         movf    TABLAT, W
00062A                    M loop
00062A EC?? F???          M         call    WR_DATA         ; write to LCD
00062E 000B               M         tblrd+*                 ; next row in table
000630 50F5               M         movf    TABLAT, W
000632 E1??               M         bnz     loop
                      00811 
                      00812         ; display most recent run data
000634 0E0A           00813         movlw   d'10'
000636 6E22           00814         movwf   L_EE
                      00815 ;       READEE  OP_sec, H_EE, L_EE
                      00816 ;       incf    L_EE
                      00817 ;       READEE  OP_INT, H_EE, L_EE
                      00818 ;       incf    L_EE
000638 EC?? F???      00819         call    DisplayExeTime
                      00820 
00063C EC?? F???      00821         call    LCD_L2
000640 6A22           00822         clrf    L_EE
000642 EC?? F???      00823         call    DispOpRTC
                      00824 
000646                00825 HOLD_LOG
000646 EC?? F???      00826         call    READ_KEY
                      00827         ChangeMode  keyB, LOG_INFO
  0000                    M         local Next, Exit
                          M 
00064A 0E07               M         movlw   keyB                ; poll for mode
00064C 6210               M         cpfseq  KEY                 ; check this against key press
00064E EF?? F???          M         goto    Exit
                          M 
000652                    M Next
000652 6A89               M         clrf    LATA                ; clear pins before proceeding
000654 6A8A               M         clrf    LATB
000656 6A8B               M         clrf    LATC
000658 6A8C               M         clrf    LATD
00065A EF?? F???          M         goto    LOG_INFO
                          M 
00065E                    M Exit
00065E 0000               M         nop
                      00828         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
000660 0E0D               M         movlw   key0                ; poll for mode
000662 6210               M         cpfseq  KEY                 ; check this against key press
000664 EF?? F???          M         goto    Exit
                          M 
000668                    M Next
000668 6A89               M         clrf    LATA                ; clear pins before proceeding
00066A 6A8A               M         clrf    LATB
00066C 6A8B               M         clrf    LATC
00066E 6A8C               M         clrf    LATD
000670 EF?? F???          M         goto    STANDBY
                          M 
000674                    M Exit
000674 0000               M         nop
000676 D???           00829         bra     HOLD_LOG
                      00830 
000678                00831 LOG_INFO
000678 EC?? F???      00832         call    ClrLCD
                      00833         Display LogInfo1
  0000                    M         local   loop
00067C 0E??               M         movlw   upper LogInfo1  ; Move Table<20:16>
00067E 6EF8               M         movwf   TBLPTRU
000680 0E??               M         movlw   high LogInfo1   ; Move Table<15:8>
000682 6EF7               M         movwf   TBLPTRH
000684 0E??               M         movlw   low LogInfo1    ; Move Table<7:0>
000686 6EF6               M         movwf   TBLPTRL
000688 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00068A 50F5               M         movf    TABLAT, W
00068C                    M loop
00068C EC?? F???          M         call    WR_DATA         ; write to LCD
000690 000B               M         tblrd+*                 ; next row in table
000692 50F5               M         movf    TABLAT, W
000694 E1??               M         bnz     loop
000696 EC?? F???      00834         call    LCD_L2
                      00835         Display LogInfo2
  0000                    M         local   loop
00069A 0E??               M         movlw   upper LogInfo2  ; Move Table<20:16>
00069C 6EF8               M         movwf   TBLPTRU
00069E 0E??               M         movlw   high LogInfo2   ; Move Table<15:8>
0006A0 6EF7               M         movwf   TBLPTRH
0006A2 0E??               M         movlw   low LogInfo2    ; Move Table<7:0>
0006A4 6EF6               M         movwf   TBLPTRL
0006A6 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0006A8 50F5               M         movf    TABLAT, W
0006AA                    M loop
0006AA EC?? F???          M         call    WR_DATA         ; write to LCD
0006AE 000B               M         tblrd+*                 ; next row in table
0006B0 50F5               M         movf    TABLAT, W
0006B2 E1??               M         bnz     loop
0006B4 6A21           00836         clrf    H_EE
0006B6 6A22           00837         clrf    L_EE
                      00838         ;DisplayLog  H_EE, L_EE
0006B8                00839 HOLD_LOG_INFO
0006B8 EC?? F???      00840         call    READ_KEY
                      00841         ChangeMode key0, LOG
  0000                    M         local Next, Exit
                          M 
0006BC 0E0D               M         movlw   key0                ; poll for mode
0006BE 6210               M         cpfseq  KEY                 ; check this against key press
0006C0 EF?? F???          M         goto    Exit
                          M 
0006C4                    M Next
0006C4 6A89               M         clrf    LATA                ; clear pins before proceeding
0006C6 6A8A               M         clrf    LATB
0006C8 6A8B               M         clrf    LATC
0006CA 6A8C               M         clrf    LATD
0006CC EF?? F???          M         goto    LOG
                          M 
0006D0                    M Exit
0006D0 0000               M         nop
0006D2 D???           00842         bra     HOLD_LOG
                      00843         
                      00844 ;*******************************************************************************
                      00845 ; permanent logs
                      00846 ;*******************************************************************************
                      00847 
0006D4                00848 PERM_LOG
0006D4 EC?? F???      00849         call    ClrLCD
                      00850         Display PermLog1
  0000                    M         local   loop
0006D8 0E??               M         movlw   upper PermLog1  ; Move Table<20:16>
0006DA 6EF8               M         movwf   TBLPTRU
0006DC 0E??               M         movlw   high PermLog1   ; Move Table<15:8>
0006DE 6EF7               M         movwf   TBLPTRH
0006E0 0E??               M         movlw   low PermLog1    ; Move Table<7:0>
0006E2 6EF6               M         movwf   TBLPTRL
0006E4 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0006E6 50F5               M         movf    TABLAT, W
0006E8                    M loop
0006E8 EC?? F???          M         call    WR_DATA         ; write to LCD
0006EC 000B               M         tblrd+*                 ; next row in table
0006EE 50F5               M         movf    TABLAT, W
0006F0 E1??               M         bnz     loop
0006F2 EC?? F???      00851         call    LCD_L2
                      00852         Display PermLog2
  0000                    M         local   loop
0006F6 0E??               M         movlw   upper PermLog2  ; Move Table<20:16>
0006F8 6EF8               M         movwf   TBLPTRU
0006FA 0E??               M         movlw   high PermLog2   ; Move Table<15:8>
0006FC 6EF7               M         movwf   TBLPTRH
0006FE 0E??               M         movlw   low PermLog2    ; Move Table<7:0>
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000700 6EF6               M         movwf   TBLPTRL
000702 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000704 50F5               M         movf    TABLAT, W
000706                    M loop
000706 EC?? F???          M         call    WR_DATA         ; write to LCD
00070A 000B               M         tblrd+*                 ; next row in table
00070C 50F5               M         movf    TABLAT, W
00070E E1??               M         bnz     loop
                      00853         
000710                00854 HOLD_PERM_LOG
000710 EC?? F???      00855         call    READ_KEY
                      00856         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
000714 0E0D               M         movlw   key0                ; poll for mode
000716 6210               M         cpfseq  KEY                 ; check this against key press
000718 EF?? F???          M         goto    Exit
                          M 
00071C                    M Next
00071C 6A89               M         clrf    LATA                ; clear pins before proceeding
00071E 6A8A               M         clrf    LATB
000720 6A8B               M         clrf    LATC
000722 6A8C               M         clrf    LATD
000724 EF?? F???          M         goto    STANDBY
                          M 
000728                    M Exit
000728 0000               M         nop
                      00857         ChangeMode  key1, PLOG
  0000                    M         local Next, Exit
                          M 
00072A 0E00               M         movlw   key1                ; poll for mode
00072C 6210               M         cpfseq  KEY                 ; check this against key press
00072E EF?? F???          M         goto    Exit
                          M 
000732                    M Next
000732 6A89               M         clrf    LATA                ; clear pins before proceeding
000734 6A8A               M         clrf    LATB
000736 6A8B               M         clrf    LATC
000738 6A8C               M         clrf    LATD
00073A EF?? F???          M         goto    PLOG
                          M 
00073E                    M Exit
00073E 0000               M         nop
                      00858         ChangeMode  key2, PLOG
  0000                    M         local Next, Exit
                          M 
000740 0E01               M         movlw   key2                ; poll for mode
000742 6210               M         cpfseq  KEY                 ; check this against key press
000744 EF?? F???          M         goto    Exit
                          M 
000748                    M Next
000748 6A89               M         clrf    LATA                ; clear pins before proceeding
00074A 6A8A               M         clrf    LATB
00074C 6A8B               M         clrf    LATC
00074E 6A8C               M         clrf    LATD
000750 EF?? F???          M         goto    PLOG
                          M 
000754                    M Exit
000754 0000               M         nop
                      00859         ChangeMode  key3, PLOG
  0000                    M         local Next, Exit
                          M 
000756 0E02               M         movlw   key3                ; poll for mode
000758 6210               M         cpfseq  KEY                 ; check this against key press
00075A EF?? F???          M         goto    Exit
                          M 
00075E                    M Next
00075E 6A89               M         clrf    LATA                ; clear pins before proceeding
000760 6A8A               M         clrf    LATB
000762 6A8B               M         clrf    LATC
000764 6A8C               M         clrf    LATD
000766 EF?? F???          M         goto    PLOG
                          M 
00076A                    M Exit
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00076A 0000               M         nop
                      00860         ChangeMode  key4, PLOG
  0000                    M         local Next, Exit
                          M 
00076C 0E04               M         movlw   key4                ; poll for mode
00076E 6210               M         cpfseq  KEY                 ; check this against key press
000770 EF?? F???          M         goto    Exit
                          M 
000774                    M Next
000774 6A89               M         clrf    LATA                ; clear pins before proceeding
000776 6A8A               M         clrf    LATB
000778 6A8B               M         clrf    LATC
00077A 6A8C               M         clrf    LATD
00077C EF?? F???          M         goto    PLOG
                          M 
000780                    M Exit
000780 0000               M         nop
                      00861         ChangeMode  key5, PLOG
  0000                    M         local Next, Exit
                          M 
000782 0E05               M         movlw   key5                ; poll for mode
000784 6210               M         cpfseq  KEY                 ; check this against key press
000786 EF?? F???          M         goto    Exit
                          M 
00078A                    M Next
00078A 6A89               M         clrf    LATA                ; clear pins before proceeding
00078C 6A8A               M         clrf    LATB
00078E 6A8B               M         clrf    LATC
000790 6A8C               M         clrf    LATD
000792 EF?? F???          M         goto    PLOG
                          M 
000796                    M Exit
000796 0000               M         nop
                      00862         ChangeMode  key6, PLOG
  0000                    M         local Next, Exit
                          M 
000798 0E06               M         movlw   key6                ; poll for mode
00079A 6210               M         cpfseq  KEY                 ; check this against key press
00079C EF?? F???          M         goto    Exit
                          M 
0007A0                    M Next
0007A0 6A89               M         clrf    LATA                ; clear pins before proceeding
0007A2 6A8A               M         clrf    LATB
0007A4 6A8B               M         clrf    LATC
0007A6 6A8C               M         clrf    LATD
0007A8 EF?? F???          M         goto    PLOG
                          M 
0007AC                    M Exit
0007AC 0000               M         nop
                      00863         ChangeMode  key7, PLOG
  0000                    M         local Next, Exit
                          M 
0007AE 0E08               M         movlw   key7                ; poll for mode
0007B0 6210               M         cpfseq  KEY                 ; check this against key press
0007B2 EF?? F???          M         goto    Exit
                          M 
0007B6                    M Next
0007B6 6A89               M         clrf    LATA                ; clear pins before proceeding
0007B8 6A8A               M         clrf    LATB
0007BA 6A8B               M         clrf    LATC
0007BC 6A8C               M         clrf    LATD
0007BE EF?? F???          M         goto    PLOG
                          M 
0007C2                    M Exit
0007C2 0000               M         nop
                      00864         ChangeMode  key8, PLOG
  0000                    M         local Next, Exit
                          M 
0007C4 0E09               M         movlw   key8                ; poll for mode
0007C6 6210               M         cpfseq  KEY                 ; check this against key press
0007C8 EF?? F???          M         goto    Exit
                          M 
0007CC                    M Next
0007CC 6A89               M         clrf    LATA                ; clear pins before proceeding
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0007CE 6A8A               M         clrf    LATB
0007D0 6A8B               M         clrf    LATC
0007D2 6A8C               M         clrf    LATD
0007D4 EF?? F???          M         goto    PLOG
                          M 
0007D8                    M Exit
0007D8 0000               M         nop
                      00865         ChangeMode  key9, PLOG
  0000                    M         local Next, Exit
                          M 
0007DA 0E0A               M         movlw   key9                ; poll for mode
0007DC 6210               M         cpfseq  KEY                 ; check this against key press
0007DE EF?? F???          M         goto    Exit
                          M 
0007E2                    M Next
0007E2 6A89               M         clrf    LATA                ; clear pins before proceeding
0007E4 6A8A               M         clrf    LATB
0007E6 6A8B               M         clrf    LATC
0007E8 6A8C               M         clrf    LATD
0007EA EF?? F???          M         goto    PLOG
                          M 
0007EE                    M Exit
0007EE 0000               M         nop
0007F0 D???           00866         bra HOLD_PERM_LOG
                      00867         
0007F2                00868 PLOG
0007F2 EC?? F???      00869         call    ClrLCD
                      00870         Display PermLog1
  0000                    M         local   loop
0007F6 0E??               M         movlw   upper PermLog1  ; Move Table<20:16>
0007F8 6EF8               M         movwf   TBLPTRU
0007FA 0E??               M         movlw   high PermLog1   ; Move Table<15:8>
0007FC 6EF7               M         movwf   TBLPTRH
0007FE 0E??               M         movlw   low PermLog1    ; Move Table<7:0>
000800 6EF6               M         movwf   TBLPTRL
000802 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000804 50F5               M         movf    TABLAT, W
000806                    M loop
000806 EC?? F???          M         call    WR_DATA         ; write to LCD
00080A 000B               M         tblrd+*                 ; next row in table
00080C 50F5               M         movf    TABLAT, W
00080E E1??               M         bnz     loop
                      00871         
                      00872         ; find the key press value
000810 C010 FFE8      00873         movff   KEY, WREG
000814 2AE8           00874         incf    WREG        ; W = KEY+1
000816 6E17           00875         movwf   temp
                      00876         
000818 42E8           00877         rrncf   WREG        ; division by 4
00081A 9EE8           00878         bcf     WREG, 7     ; clear last bit, overflow from rotate
00081C 42E8           00879         rrncf   WREG        
00081E 9EE8           00880         bcf     WREG, 7
000820 5E17           00881         subwf   temp        ; temp = (KEY+1) - (KEY+1)/4
000822 C017 FFE8      00882         movff   temp, WREG
000826 C017 F011      00883         movff   temp, temp_KEY
00082A 0D15           00884         mullw   d'21'       ; indexed as mutliples of 21
                      00885 
00082C                00886 displayNum
00082C C011 FFE8      00887         movff   temp_KEY, WREG
000830 0F30           00888         addlw   0x30
000832 EC?? F???      00889         call    WR_DATA
000836 0E3A           00890         movlw   ":"
000838 EC?? F???      00891         call    WR_DATA
00083C 0E20           00892         movlw   " "
00083E EC?? F???      00893         call    WR_DATA
                      00894         
000842 CFF3 F022      00895         movff   PRODL, L_EE
000846 0E00           00896         movlw   d'0'
000848 2622           00897         addwf   L_EE
                      00898         READEE  OP_sec, H_EE, L_EE
00084A C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
00084E C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000852 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000854 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000856 80A6               M         bsf     EECON1, RD          ; read EEPROM
000858 CFA8 F018          M         movff   EEDATA, OP_sec      ; put data into file
00085C 2A22           00899         incf    L_EE
                      00900         READEE  OP_INT, H_EE, L_EE
00085E C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000862 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000866 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000868 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
00086A 80A6               M         bsf     EECON1, RD          ; read EEPROM
00086C CFA8 F019          M         movff   EEDATA, OP_INT      ; put data into file
000870 2A22           00901         incf    L_EE
000872 EC?? F???      00902         call    DisplayExeTime
000876 CFF3 F022      00903         movff   PRODL, L_EE
                      00904         
                      00905         ; reset eeprom to beginning
00087A EC?? F???      00906         call    LCD_L2
00087E CFF3 F022      00907         movff   PRODL, L_EE
000882 EC?? F???      00908         call    DispOpRTC
                      00909         
000886                00910 HOLD_PLOG
000886 EC?? F???      00911         call    READ_KEY
                      00912         ChangeMode  key0, PERM_LOG      ; back to perm log menu
  0000                    M         local Next, Exit
                          M 
00088A 0E0D               M         movlw   key0                ; poll for mode
00088C 6210               M         cpfseq  KEY                 ; check this against key press
00088E EF?? F???          M         goto    Exit
                          M 
000892                    M Next
000892 6A89               M         clrf    LATA                ; clear pins before proceeding
000894 6A8A               M         clrf    LATB
000896 6A8B               M         clrf    LATC
000898 6A8C               M         clrf    LATD
00089A EF?? F???          M         goto    PERM_LOG
                          M 
00089E                    M Exit
00089E 0000               M         nop
0008A0 D???           00913         bra HOLD_PLOG
                      00914         
                      00915 ;*******************************************************************************
                      00916 ; pc interface
                      00917 ;*******************************************************************************
                      00918 
0008A2                00919 PC_MODE
0008A2 EC?? F???      00920         call    ClrLCD
                      00921         Display PC1
  0000                    M         local   loop
0008A6 0E??               M         movlw   upper PC1       ; Move Table<20:16>
0008A8 6EF8               M         movwf   TBLPTRU
0008AA 0E??               M         movlw   high PC1        ; Move Table<15:8>
0008AC 6EF7               M         movwf   TBLPTRH
0008AE 0E??               M         movlw   low PC1         ; Move Table<7:0>
0008B0 6EF6               M         movwf   TBLPTRL
0008B2 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0008B4 50F5               M         movf    TABLAT, W
0008B6                    M loop
0008B6 EC?? F???          M         call    WR_DATA         ; write to LCD
0008BA 000B               M         tblrd+*                 ; next row in table
0008BC 50F5               M         movf    TABLAT, W
0008BE E1??               M         bnz     loop
0008C0 EC?? F???      00922         call    LCD_L2
                      00923         Display PC2
  0000                    M         local   loop
0008C4 0E??               M         movlw   upper PC2       ; Move Table<20:16>
0008C6 6EF8               M         movwf   TBLPTRU
0008C8 0E??               M         movlw   high PC2        ; Move Table<15:8>
0008CA 6EF7               M         movwf   TBLPTRH
0008CC 0E??               M         movlw   low PC2         ; Move Table<7:0>
0008CE 6EF6               M         movwf   TBLPTRL
0008D0 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0008D2 50F5               M         movf    TABLAT, W
0008D4                    M loop
0008D4 EC?? F???          M         call    WR_DATA         ; write to LCD
0008D8 000B               M         tblrd+*                 ; next row in table
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0008DA 50F5               M         movf    TABLAT, W
0008DC E1??               M         bnz     loop
0008DE CFF9 F03A      00924         movff   PCL, PC_PCL
0008E2 CFFA F03B      00925         movff   PCLATH, PC_PCLATH
0008E6 CFFB F03C      00926         movff   PCLATU, PC_PCLATU
                      00927         
0008EA                00928 HOLD_PC
0008EA EC?? F???      00929         call    READ_KEY
                      00930         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
0008EE 0E0D               M         movlw   key0                ; poll for mode
0008F0 6210               M         cpfseq  KEY                 ; check this against key press
0008F2 EF?? F???          M         goto    Exit
                          M 
0008F6                    M Next
0008F6 6A89               M         clrf    LATA                ; clear pins before proceeding
0008F8 6A8A               M         clrf    LATB
0008FA 6A8B               M         clrf    LATC
0008FC 6A8C               M         clrf    LATD
0008FE EF?? F???          M         goto    STANDBY
                          M 
000902                    M Exit
000902 0000               M         nop
                      00931         ChangeMode  keyH, PC_TRANSFER
  0000                    M         local Next, Exit
                          M 
000904 0E0E               M         movlw   keyH                ; poll for mode
000906 6210               M         cpfseq  KEY                 ; check this against key press
000908 EF?? F???          M         goto    Exit
                          M 
00090C                    M Next
00090C 6A89               M         clrf    LATA                ; clear pins before proceeding
00090E 6A8A               M         clrf    LATB
000910 6A8B               M         clrf    LATC
000912 6A8C               M         clrf    LATD
000914 EF?? F???          M         goto    PC_TRANSFER
                          M 
000918                    M Exit
000918 0000               M         nop
00091A D???           00932         bra     HOLD_PC
                      00933 
00091C                00934 PC_TRANSFER
00091C 6839           00935         setf    transferring
00091E EC?? F???      00936         call    ClrLCD
                      00937         Display PCTransfer
  0000                    M         local   loop
000922 0E??               M         movlw   upper PCTransfer ; Move Table<20:16>
000924 6EF8               M         movwf   TBLPTRU
000926 0E??               M         movlw   high PCTransfer ; Move Table<15:8>
000928 6EF7               M         movwf   TBLPTRH
00092A 0E??               M         movlw   low PCTransfer  ; Move Table<7:0>
00092C 6EF6               M         movwf   TBLPTRL
00092E 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000930 50F5               M         movf    TABLAT, W
000932                    M loop
000932 EC?? F???          M         call    WR_DATA         ; write to LCD
000936 000B               M         tblrd+*                 ; next row in table
000938 50F5               M         movf    TABLAT, W
00093A E1??               M         bnz     loop
00093C EC?? F???      00938         call    DataUSART
000940 6A39           00939         clrf    transferring
000942 D???           00940         bra     STANDBY
                      00941         
                      00942 ;*******************************************************************************
                      00943 ; subroutines
                      00944 ;*******************************************************************************
                      00945 
000944                00946 RTC_INIT
                      00947         ; set sda and scl to high
000944 9882           00948         bcf     PORTC, 4
000946 9682           00949         bcf     PORTC, 3
000948 8894           00950         bsf     TRISC, 4
00094A 8694           00951         bsf     TRISC, 3
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00952         
00094C EC?? F???      00953         call    i2c_common_setup
                      00954         ;call   SET_TIME
Warning[203]: Found opcode in column 1. (return)
000950 0012           00955 return
                      00956         
000952                00957 SAVE_TIME   
                      00958         rtc_read    0x02        ; hours
000952 0E02               M     movlw   0x02
000954 6E??               M     movwf   regaddress
000956 EC?? F???          M     call    read_rtc
00095A C??? FFE8          M     movff   datachar, WREG
00095E EC?? F???          M     call    rtc_convert
000962 EC?? F???      00959         call    WriteEE_RTC
                      00960         rtc_read    0x01        ; minutes
000966 0E01               M     movlw   0x01
000968 6E??               M     movwf   regaddress
00096A EC?? F???          M     call    read_rtc
00096E C??? FFE8          M     movff   datachar, WREG
000972 EC?? F???          M     call    rtc_convert
000976 EC?? F???      00961         call    WriteEE_RTC
                      00962         rtc_read    0x06        ; years
00097A 0E06               M     movlw   0x06
00097C 6E??               M     movwf   regaddress
00097E EC?? F???          M     call    read_rtc
000982 C??? FFE8          M     movff   datachar, WREG
000986 EC?? F???          M     call    rtc_convert
00098A EC?? F???      00963         call    WriteEE_RTC
                      00964         rtc_read    0x05        ; months
00098E 0E05               M     movlw   0x05
000990 6E??               M     movwf   regaddress
000992 EC?? F???          M     call    read_rtc
000996 C??? FFE8          M     movff   datachar, WREG
00099A EC?? F???          M     call    rtc_convert
00099E EC?? F???      00965         call    WriteEE_RTC
                      00966         rtc_read    0x04        ; days
0009A2 0E04               M     movlw   0x04
0009A4 6E??               M     movwf   regaddress
0009A6 EC?? F???          M     call    read_rtc
0009AA C??? FFE8          M     movff   datachar, WREG
0009AE EC?? F???          M     call    rtc_convert
0009B2 EC?? F???      00967         call    WriteEE_RTC
Warning[203]: Found opcode in column 1. (return)
0009B6 0012           00968 return
                      00969         
0009B8                00970 SAVE_EXE_TIME
                      00971         
Warning[202]: Argument out of range.  Least significant bits used.
0009B8 3818           00972         swapf   OP_sec, WREG    ; 100's seconds
0009BA 6E17           00973         movwf   temp
0009BC 0E0F           00974         movlw   0x0F
0009BE 1617           00975         andwf   temp
0009C0 C017 FFE8      00976         movff   temp, WREG
0009C4 0F30           00977         addlw   0x30    
                      00978         WriteEE WREG, H_EE, L_EE
0009C6 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
0009CA C022 FFA9          M         movff   L_EE, EEADR         ; Low address
0009CE CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
0009D2 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
0009D4 D???               M         bra     $-2
                          M 
0009D6 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
0009D8 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
0009DA 84A6               M         bsf     EECON1, WREN        ; enable write
0009DC 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
0009DE 98A1               M         bcf     PIR2, EEIF
                          M 
0009E0 0E55               M         movlw   0x55
0009E2 6EA7               M         movwf   EECON2              ; write 55h
0009E4 0EAA               M         movlw   0xaa
0009E6 6EA7               M         movwf   EECON2              ; write 0xaa
0009E8 82A6               M         bsf     EECON1, WR          ; begin write
0009EA B2A6               M         btfsc   EECON1, WR
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0009EC D???               M         bra     $-2
                          M 
0009EE 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
0009F0 94A6               M         bcf     EECON1, WREN        ; disable writes
0009F2 2A22           00979         incf    L_EE
                      00980         
0009F4 C018 F017      00981         movff   OP_sec, temp    ; 10's seconds
0009F8 0E0F           00982         movlw   0x0F
0009FA 1617           00983         andwf   temp            ; Temp = lower nibble of Op_sec
0009FC C017 FFE8      00984         movff   temp, WREG      ; W = Temp
000A00 0F30           00985         addlw   0x30            ; Convert to ASCII
                      00986         WriteEE WREG, H_EE, L_EE
000A02 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000A06 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000A0A CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000A0E B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000A10 D???               M         bra     $-2
                          M 
000A12 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000A14 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000A16 84A6               M         bsf     EECON1, WREN        ; enable write
000A18 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000A1A 98A1               M         bcf     PIR2, EEIF
                          M 
000A1C 0E55               M         movlw   0x55
000A1E 6EA7               M         movwf   EECON2              ; write 55h
000A20 0EAA               M         movlw   0xaa
000A22 6EA7               M         movwf   EECON2              ; write 0xaa
000A24 82A6               M         bsf     EECON1, WR          ; begin write
000A26 B2A6               M         btfsc   EECON1, WR
000A28 D???               M         bra     $-2
                          M 
000A2A 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000A2C 94A6               M         bcf     EECON1, WREN        ; disable writes
000A2E 2A22           00987         incf    L_EE
                      00988         
Warning[202]: Argument out of range.  Least significant bits used.
000A30 3819           00989         swapf   OP_INT, WREG    ;1's seconds
000A32 6E17           00990         movwf   temp
000A34 0E0F           00991         movlw   0x0f
000A36 1617           00992         andwf   temp
000A38 C017 FFE8      00993         movff   temp, WREG
000A3C 0F30           00994         addlw   0x30
                      00995         WriteEE WREG, H_EE, L_EE
000A3E C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000A42 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000A46 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000A4A B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000A4C D???               M         bra     $-2
                          M 
000A4E 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000A50 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000A52 84A6               M         bsf     EECON1, WREN        ; enable write
000A54 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000A56 98A1               M         bcf     PIR2, EEIF
                          M 
000A58 0E55               M         movlw   0x55
000A5A 6EA7               M         movwf   EECON2              ; write 55h
000A5C 0EAA               M         movlw   0xaa
000A5E 6EA7               M         movwf   EECON2              ; write 0xaa
000A60 82A6               M         bsf     EECON1, WR          ; begin write
000A62 B2A6               M         btfsc   EECON1, WR
000A64 D???               M         bra     $-2
                          M 
000A66 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000A68 94A6               M         bcf     EECON1, WREN        ; disable writes
000A6A 2A22           00996         incf    L_EE
Warning[203]: Found opcode in column 1. (return)
000A6C 0012           00997 return
                      00998         
                      00999                 
000A6E                01000 DISPLAY_RTC     
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01001         ; display data in this format hh/minmin/yy yy/mm/dd
                      01002         rtc_read    0x02            ; 0x02 from DS1307 - hours
000A6E 0E02               M     movlw   0x02
000A70 6E??               M     movwf   regaddress
000A72 EC?? F???          M     call    read_rtc
000A76 C??? FFE8          M     movff   datachar, WREG
000A7A EC?? F???          M     call    rtc_convert
000A7E C??? FFE8      01003         movff   tens_digit,WREG
000A82 EC?? F???      01004         call    WR_DATA
000A86 C??? FFE8      01005         movff   ones_digit,WREG
000A8A EC?? F???      01006         call    WR_DATA
000A8E 0E68           01007         movlw   "h"
000A90 EC?? F???      01008         call    WR_DATA
                      01009         
                      01010         rtc_read    0x01            ; 0x01 from DS1307 - minutes
000A94 0E01               M     movlw   0x01
000A96 6E??               M     movwf   regaddress
000A98 EC?? F???          M     call    read_rtc
000A9C C??? FFE8          M     movff   datachar, WREG
000AA0 EC?? F???          M     call    rtc_convert
000AA4 C??? FFE8      01011         movff   tens_digit,WREG
000AA8 EC?? F???      01012         call    WR_DATA
000AAC C??? FFE8      01013         movff   ones_digit,WREG
000AB0 EC?? F???      01014         call    WR_DATA
                      01015         
                      01016         rtc_read    0x00            ; 0x00 from DS1307 - seconds
000AB4 0E00               M     movlw   0x00
000AB6 6E??               M     movwf   regaddress
000AB8 EC?? F???          M     call    read_rtc
000ABC C??? FFE8          M     movff   datachar, WREG
000AC0 EC?? F???          M     call    rtc_convert
000AC4 C??? FFE8      01017         movff   tens_digit,WREG
000AC8 EC?? F???      01018         call    WR_DATA
000ACC C??? FFE8      01019         movff   ones_digit,WREG
000AD0 EC?? F???      01020         call    WR_DATA
000AD4 0E20           01021         movlw   " "
000AD6 EC?? F???      01022         call    WR_DATA
                      01023         
                      01024         rtc_read    0x06            ; 0x06 from DS1307 - years
000ADA 0E06               M     movlw   0x06
000ADC 6E??               M     movwf   regaddress
000ADE EC?? F???          M     call    read_rtc
000AE2 C??? FFE8          M     movff   datachar, WREG
000AE6 EC?? F???          M     call    rtc_convert
000AEA C??? FFE8      01025         movff   tens_digit,WREG
000AEE EC?? F???      01026         call    WR_DATA
000AF2 C??? FFE8      01027         movff   ones_digit,WREG
000AF6 EC?? F???      01028         call    WR_DATA
000AFA 0E2F           01029         movlw   "/"
000AFC EC?? F???      01030         call    WR_DATA
                      01031         
                      01032         rtc_read    0x05            ; 0x05 from DS1307 - months
000B00 0E05               M     movlw   0x05
000B02 6E??               M     movwf   regaddress
000B04 EC?? F???          M     call    read_rtc
000B08 C??? FFE8          M     movff   datachar, WREG
000B0C EC?? F???          M     call    rtc_convert
000B10 C??? FFE8      01033         movff   tens_digit,WREG
000B14 EC?? F???      01034         call    WR_DATA
000B18 C??? FFE8      01035         movff   ones_digit,WREG
000B1C EC?? F???      01036         call    WR_DATA
000B20 0E2F           01037         movlw   "/"
000B22 EC?? F???      01038         call    WR_DATA
                      01039         
                      01040         rtc_read    0x04            ; 0x04 from DS1307 - days
000B26 0E04               M     movlw   0x04
000B28 6E??               M     movwf   regaddress
000B2A EC?? F???          M     call    read_rtc
000B2E C??? FFE8          M     movff   datachar, WREG
000B32 EC?? F???          M     call    rtc_convert
000B36 C??? FFE8      01041         movff   tens_digit,WREG
000B3A EC?? F???      01042         call    WR_DATA
000B3E C??? FFE8      01043         movff   ones_digit,WREG
000B42 EC?? F???      01044         call    WR_DATA
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[203]: Found opcode in column 1. (return)
000B46 0012           01045 return
                      01046         
000B48                01047 SET_TIME
                      01048         rtc_resetAll
                          M 
000B48 6A??               M     clrf    databyte
000B4A 0E06               M     movlw   6
000B4C 6E??               M     movwf   regaddress ;start at 6 and go down, and set all to 0
                          M 
Warning[207]: Found label after column 1. (del_loop0)
000B4E                    M     del_loop0
000B4E EC?? F???          M     call    write_rtc
000B52 2E??               M     decfsz  regaddress
000B54 D???               M     bra     del_loop0
000B56 EC?? F???          M     call    write_rtc ;sets registers 0-6 to zero
Warning[207]: Found label after column 1. (_loopknt)
  00000001                M     _loopknt set _loopknt+1
                      01049         
                      01050         rtc_set 0x00,   b'10000000'
000B5A 0E00               M     movlw   0x00
000B5C 6E??               M     movwf   regaddress
000B5E 0E80               M     movlw   b'10000000'
000B60 6E??               M     movwf   databyte
000B62 EC?? F???          M     call    write_rtc
                      01051 
                      01052         rtc_set 0x06,   b'00010111'             ; Year 17
000B66 0E06               M     movlw   0x06
000B68 6E??               M     movwf   regaddress
000B6A 0E17               M     movlw   b'00010111'
000B6C 6E??               M     movwf   databyte
000B6E EC?? F???          M     call    write_rtc
                      01053         rtc_set 0x05,   b'00000010'             ; Month 2
000B72 0E05               M     movlw   0x05
000B74 6E??               M     movwf   regaddress
000B76 0E02               M     movlw   b'00000010'
000B78 6E??               M     movwf   databyte
000B7A EC?? F???          M     call    write_rtc
                      01054         rtc_set 0x04,   b'00011001'             ; Date 19
000B7E 0E04               M     movlw   0x04
000B80 6E??               M     movwf   regaddress
000B82 0E19               M     movlw   b'00011001'
000B84 6E??               M     movwf   databyte
000B86 EC?? F???          M     call    write_rtc
                      01055         rtc_set 0x02,   b'00010001'             ; Hours 11
000B8A 0E02               M     movlw   0x02
000B8C 6E??               M     movwf   regaddress
000B8E 0E11               M     movlw   b'00010001'
000B90 6E??               M     movwf   databyte
000B92 EC?? F???          M     call    write_rtc
                      01056         rtc_set 0x01,   b'00111000'             ; Minutes 38
000B96 0E01               M     movlw   0x01
000B98 6E??               M     movwf   regaddress
000B9A 0E38               M     movlw   b'00111000'
000B9C 6E??               M     movwf   databyte
000B9E EC?? F???          M     call    write_rtc
                      01057         rtc_set 0x00,   b'00000000'             ; Seconds 0
000BA2 0E00               M     movlw   0x00
000BA4 6E??               M     movwf   regaddress
000BA6 0E00               M     movlw   b'00000000'
000BA8 6E??               M     movwf   databyte
000BAA EC?? F???          M     call    write_rtc
Warning[203]: Found opcode in column 1. (return)
000BAE 0012           01058 return
                      01059         
000BB0                01060 INIT_USART
                      01061         
000BB0 8E94           01062         bsf     TRISC, 7        ; set RC7=USART RC
000BB2 9C94           01063         bcf     TRISC, 6        ; clear RC6=USART TX
                      01064 
000BB4 0E0F           01065         movlw   15              ; baud rate 9600
000BB6 6EAF           01066         movwf   SPBRG
000BB8 6AAC           01067         clrf    TXSTA
                      01068         
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000BBA 6AAB           01069         clrf    RCSTA
000BBC 8EAB           01070         bsf     RCSTA,SPEN      ; asynchronous serial port enable
000BBE 88AB           01071         bsf     RCSTA,CREN      ; continous receive
                      01072         
000BC0 8AAC           01073         bsf     TXSTA, TXEN     ; transmit enabled
000BC2 0012           01074         return
                      01075 
000BC4                01076 DataUSART
000BC4 0E02           01077         movlw   0x02
000BC6 EC?? F???      01078         call    USART_WAIT
000BCA 0E0D           01079         movlw   0x0D
000BCC EC?? F???      01080         call    USART_WAIT
                      01081         
000BD0 6A15           01082         clrf    counter         ; used to cycle through past 9 eeprom logs
000BD2 6A16           01083         clrf    counter2        ; used to transmit all 18 bits of saved data
                      01084         
000BD4                01085 TRANSFER_LOGS
000BD4 0E15           01086         movlw   d'21'           ; logs are 21 bits apart
000BD6 0215           01087         mulwf   counter         ; log number one starts at eeprom address 0
000BD8 CFF3 F022      01088         movff   PRODL, L_EE     ; low address now points to count X 21
000BDC 6A16           01089         clrf    counter2
                      01090         
000BDE                01091 TRANSFER_DATA   
                      01092         READEE  WREG, H_EE, L_EE
000BDE C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000BE2 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000BE6 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000BE8 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000BEA 80A6               M         bsf     EECON1, RD          ; read EEPROM
000BEC CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000BF0 EC?? F???      01093         call    USART_WAIT      ; transfer bit
000BF4 2A22           01094         incf    L_EE
                      01095         
000BF6 2A16           01096         incf    counter2
000BF8 0E12           01097         movlw   d'18'           ; each perm log has 18 bits of saved data, so 
000BFA 6216           01098         cpfseq  counter2        ; see if we're at 18. if so, we're done reading
000BFC D???           01099         bra TRANSFER_DATA       ; this permanent log and onto next.
                      01100         
000BFE EC?? F???      01101         call    USART_LINE      ; new line because a e s t h e t i c
                      01102         
000C02 2A15           01103         incf    counter
000C04 0E08           01104         movlw   d'8'            ; we save up to the last 9 permanent logs
000C06 6215           01105         cpfseq  counter
000C08 D???           01106         bra     TRANSFER_LOGS
                      01107         
000C0A EC?? F???      01108         call    LCD_L2
                      01109         Display PCComplete
  0000                    M         local   loop
000C0E 0E??               M         movlw   upper PCComplete ; Move Table<20:16>
000C10 6EF8               M         movwf   TBLPTRU
000C12 0E??               M         movlw   high PCComplete ; Move Table<15:8>
000C14 6EF7               M         movwf   TBLPTRH
000C16 0E??               M         movlw   low PCComplete  ; Move Table<7:0>
000C18 6EF6               M         movwf   TBLPTRL
000C1A 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000C1C 50F5               M         movf    TABLAT, W
000C1E                    M loop
000C1E EC?? F???          M         call    WR_DATA         ; write to LCD
000C22 000B               M         tblrd+*                 ; next row in table
000C24 50F5               M         movf    TABLAT, W
000C26 E1??               M         bnz     loop
                      01110         Delay50N delayR, 0x28   
  0000                    M         local   loop
000C28 0E28               M         movlw   0x28
000C2A 6E1B               M         movwf   delayR
                          M 
000C2C                    M loop
000C2C EC?? F???          M         call    Delay50ms
000C30 2E1B               M         decfsz  delayR
000C32 EF?? F???          M         goto    loop
000C36 0012           01111         return                  ; done transmitting data
                      01112         
000C38                01113 USART_WAIT
000C38 6EAD           01114         movwf   TXREG
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C3A A2AC           01115         btfss   TXSTA,1
000C3C EF?? F???      01116         goto    $-2
000C40 0012           01117         return
                      01118 
000C42                01119 USART_LINE
000C42 0E0A           01120         movlw   0x0A
000C44 EC?? F???      01121         call    USART_WAIT
000C48 0E0D           01122         movlw   0x0D
000C4A EC?? F???      01123         call    USART_WAIT
000C4E 0012           01124         return
                      01125         
000C50                01126 Delay5us
000C50 0E78           01127         movlw   d'120'
000C52 6E1C           01128         movwf   d5us
                      01129 
000C54                01130 loop5us
000C54 2E1C           01131         decfsz  d5us
000C56 EF?? F???      01132         goto    loop5us
000C5A 0000           01133         nop
000C5C 0012           01134         return
                      01135 
000C5E                01136 Delay200us
000C5E 0EA4           01137         movlw   0xA4
000C60 6E1D           01138         movwf   d200us
                      01139 
000C62                01140 loop200us
000C62 2E1D           01141         decfsz  d200us
000C64 EF?? F???      01142         goto    loop200us
000C68 0000           01143         nop
000C6A 0012           01144         return
                      01145 
000C6C                01146 Delay50ms
000C6C 0EF9           01147         movlw   0xF9
000C6E 6E1E           01148         movwf   d50ms
                      01149 
000C70                01150 loop50ms
000C70 EC?? F???      01151         call    Delay200us
000C74 2E1E           01152         decfsz  d50ms
                      01153 
000C76                01154 Cycles
000C76 EF?? F???      01155         goto    loop50ms
000C7A EC?? F???      01156         call    Delay200us
000C7E 0012           01157         return
                      01158 
000C80                01159 WriteEE_RTC
                      01160         WriteEE tens_digit, H_EE, L_EE
000C80 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000C84 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000C88 C??? FFA8          M         movff   tens_digit, EEDATA  ; set word
                          M 
000C8C B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000C8E D???               M         bra     $-2
                          M 
000C90 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000C92 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000C94 84A6               M         bsf     EECON1, WREN        ; enable write
000C96 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000C98 98A1               M         bcf     PIR2, EEIF
                          M 
000C9A 0E55               M         movlw   0x55
000C9C 6EA7               M         movwf   EECON2              ; write 55h
000C9E 0EAA               M         movlw   0xaa
000CA0 6EA7               M         movwf   EECON2              ; write 0xaa
000CA2 82A6               M         bsf     EECON1, WR          ; begin write
000CA4 B2A6               M         btfsc   EECON1, WR
000CA6 D???               M         bra     $-2
                          M 
000CA8 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000CAA 94A6               M         bcf     EECON1, WREN        ; disable writes
000CAC 2A22           01161         incf    L_EE
                      01162         WriteEE ones_digit, H_EE, L_EE
000CAE C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000CB2 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000CB6 C??? FFA8          M         movff   ones_digit, EEDATA  ; set word
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
000CBA B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000CBC D???               M         bra     $-2
                          M 
000CBE 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000CC0 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000CC2 84A6               M         bsf     EECON1, WREN        ; enable write
000CC4 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000CC6 98A1               M         bcf     PIR2, EEIF
                          M 
000CC8 0E55               M         movlw   0x55
000CCA 6EA7               M         movwf   EECON2              ; write 55h
000CCC 0EAA               M         movlw   0xaa
000CCE 6EA7               M         movwf   EECON2              ; write 0xaa
000CD0 82A6               M         bsf     EECON1, WR          ; begin write
000CD2 B2A6               M         btfsc   EECON1, WR
000CD4 D???               M         bra     $-2
                          M 
000CD6 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000CD8 94A6               M         bcf     EECON1, WREN        ; disable writes
000CDA 2A22           01163         incf    L_EE
000CDC 0012           01164         return
                      01165 
000CDE                01166 ClearEEPROM_21
000CDE 6A21           01167         clrf    H_EE
000CE0 6A22           01168         clrf    L_EE
000CE2 6820           01169         setf    clear_EE
000CE4 6A15           01170         clrf    counter
000CE6                01171 ClearNext
                      01172         WriteEE         clear_EE, H_EE, L_EE
000CE6 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000CEA C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000CEE C020 FFA8          M         movff   clear_EE, EEDATA    ; set word
                          M 
000CF2 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000CF4 D???               M         bra     $-2
                          M 
000CF6 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000CF8 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000CFA 84A6               M         bsf     EECON1, WREN        ; enable write
000CFC 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000CFE 98A1               M         bcf     PIR2, EEIF
                          M 
000D00 0E55               M         movlw   0x55
000D02 6EA7               M         movwf   EECON2              ; write 55h
000D04 0EAA               M         movlw   0xaa
000D06 6EA7               M         movwf   EECON2              ; write 0xaa
000D08 82A6               M         bsf     EECON1, WR          ; begin write
000D0A B2A6               M         btfsc   EECON1, WR
000D0C D???               M         bra     $-2
                          M 
000D0E 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000D10 94A6               M         bcf     EECON1, WREN        ; disable writes
000D12 2A15           01173         incf            counter
000D14 2A22           01174         incf            L_EE
000D16 0E15           01175         movlw           d'21'
000D18 6215           01176         cpfseq          counter
000D1A EF?? F???      01177         goto            ClearNext
000D1E 6A21           01178         clrf            H_EE
000D20 6A22           01179         clrf            L_EE
000D22 0012           01180         return
                      01181         
000D24                01182 READ_KEY
000D24 A281           01183         btfss   PORTB, 1        ; check for keypad interrupt
000D26 EF?? F???      01184         goto    READ_KEY
000D2A 3881           01185         swapf   PORTB, W
000D2C 0B0F           01186         andlw   0x0F
000D2E 6E10           01187         movwf   KEY
000D30 B281           01188         btfsc   PORTB, 1
000D32 EF?? F???      01189         goto    $-2
000D36 0012           01190         return
                      01191 
000D38                01192 READ_KEY_TIME
000D38 EC?? F???      01193         call        LCD_L2          ; go to second line to print RTC
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01194 
                      01195         ; display the time
000D3C EC?? F???      01196         call    DISPLAY_RTC
                      01197 
000D40 A281           01198         btfss       PORTB, 1    ; keypad interrupt
000D42 EF?? F???      01199         goto        READ_KEY_TIME
000D46 3881           01200         swapf       PORTB, W    ; copy PORTB7:4 to W3:0
000D48 0B0F           01201         andlw       0x0F        ; only want W3:0
000D4A 6E10           01202         movwf       KEY         ; write this value to the KEY
000D4C B281           01203         btfsc       PORTB, 1    ; wait for release
000D4E EF?? F???      01204         goto        $-2         ; go back one instruction
000D52 0012           01205         return
                      01206 
000D54                01207 DisplayExeTime
                      01208         READEE  REG_EE, H_EE, L_EE
000D54 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D58 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D5C 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D5E 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D60 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D62 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000D66 0EFF           01209         movlw   0xFF
000D68 6223           01210         cpfseq  REG_EE
000D6A EF?? F???      01211         goto    NoSkipDispExeTime
                      01212         Display NoData
  0000                    M         local   loop
000D6E 0E??               M         movlw   upper NoData    ; Move Table<20:16>
000D70 6EF8               M         movwf   TBLPTRU
000D72 0E??               M         movlw   high NoData     ; Move Table<15:8>
000D74 6EF7               M         movwf   TBLPTRH
000D76 0E??               M         movlw   low NoData      ; Move Table<7:0>
000D78 6EF6               M         movwf   TBLPTRL
000D7A 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000D7C 50F5               M         movf    TABLAT, W
000D7E                    M loop
000D7E EC?? F???          M         call    WR_DATA         ; write to LCD
000D82 000B               M         tblrd+*                 ; next row in table
000D84 50F5               M         movf    TABLAT, W
000D86 E1??               M         bnz     loop
000D88 0EFF           01213         movlw   0xFF
000D8A 6023           01214         cpfslt  REG_EE
000D8C EF?? F???      01215         goto    SkipDispExeTime
000D90 0012           01216         return
                      01217 
000D92                01218 NoSkipDispExeTime
                      01219         READEE  WREG, H_EE, L_EE
000D92 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D96 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D9A 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D9C 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D9E 80A6               M         bsf     EECON1, RD          ; read EEPROM
000DA0 CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000DA4 EC?? F???      01220         call    WR_DATA
000DA8 2A22           01221         incf    L_EE
                      01222         
                      01223         READEE  WREG, H_EE, L_EE
000DAA C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000DAE C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000DB2 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000DB4 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000DB6 80A6               M         bsf     EECON1, RD          ; read EEPROM
000DB8 CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000DBC EC?? F???      01224         call    WR_DATA
000DC0 2A22           01225         incf    L_EE
                      01226         
                      01227         READEE  WREG, H_EE, L_EE
000DC2 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000DC6 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000DCA 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000DCC 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000DCE 80A6               M         bsf     EECON1, RD          ; read EEPROM
000DD0 CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000DD4 EC?? F???      01228         call    WR_DATA
000DD8 2A22           01229         incf    L_EE
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01230 
000DDA 0E73           01231         movlw   0x73            ; Write 's'
000DDC EC?? F???      01232         call    WR_DATA
000DE0 EC?? F???      01233         call    LCD_L2
000DE4                01234 SkipDispExeTime
000DE4 0012           01235         return
                      01236 
000DE6                01237 DispOpRTC
                      01238         READEE  REG_EE, H_EE, L_EE
000DE6 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000DEA C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000DEE 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000DF0 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000DF2 80A6               M         bsf     EECON1, RD          ; read EEPROM
000DF4 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000DF8 0EFF           01239         movlw   0xff
000DFA 6223           01240         cpfseq  REG_EE
000DFC EF?? F???      01241         goto    NoSkipDispOpRTC
                      01242         Display NoData
  0000                    M         local   loop
000E00 0E??               M         movlw   upper NoData    ; Move Table<20:16>
000E02 6EF8               M         movwf   TBLPTRU
000E04 0E??               M         movlw   high NoData     ; Move Table<15:8>
000E06 6EF7               M         movwf   TBLPTRH
000E08 0E??               M         movlw   low NoData      ; Move Table<7:0>
000E0A 6EF6               M         movwf   TBLPTRL
000E0C 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000E0E 50F5               M         movf    TABLAT, W
000E10                    M loop
000E10 EC?? F???          M         call    WR_DATA         ; write to LCD
000E14 000B               M         tblrd+*                 ; next row in table
000E16 50F5               M         movf    TABLAT, W
000E18 E1??               M         bnz     loop
000E1A 0EFF           01243         movlw   0xff
000E1C 6023           01244         cpfslt  REG_EE
000E1E EF?? F???      01245         goto    SkipDispOpRTC
                      01246 
000E22                01247 NoSkipDispOpRTC
                      01248         READEE  REG_EE, H_EE, L_EE
000E22 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E26 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E2A 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E2C 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E2E 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E30 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000E34 C023 FFE8      01249         movff   REG_EE, WREG
000E38 EC?? F???      01250         call    WR_DATA
000E3C 2A22           01251         incf    L_EE
                      01252         
                      01253         READEE  REG_EE, H_EE, L_EE
000E3E C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E42 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E46 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E48 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E4A 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E4C CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000E50 C023 FFE8      01254         movff   REG_EE, WREG
000E54 EC?? F???      01255         call    WR_DATA
000E58 2A22           01256         incf    L_EE
                      01257 
000E5A 0E68           01258         movlw   "h"
000E5C EC?? F???      01259         call    WR_DATA
                      01260         
000E60 EC?? F???      01261         call    DispOpRTC_Helper
                      01262         
000E64 0E20           01263         movlw   " "
000E66 EC?? F???      01264         call    WR_DATA
                      01265         
000E6A EC?? F???      01266         call    DispOpRTC_Helper
000E6E 0E2F           01267         movlw   "/"
000E70 EC?? F???      01268         call    WR_DATA
                      01269 
000E74 EC?? F???      01270         call    DispOpRTC_Helper
000E78 0E2F           01271         movlw   "/"
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:15:56         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000E7A EC?? F???      01272         call    WR_DATA
000E7E EC?? F???      01273         call    DispOpRTC_Helper
000E82                01274 SkipDispOpRTC
000E82 0012           01275                 return
000E84                01276 DispOpRTC_Helper
                      01277         READEE          REG_EE, H_EE, L_EE
000E84 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E88 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E8C 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E8E 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E90 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E92 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000E96 C023 FFE8      01278         movff           REG_EE, WREG
000E9A EC?? F???      01279         call            WR_DATA
000E9E 2A22           01280         incf            L_EE
                      01281         READEE          REG_EE, H_EE, L_EE
000EA0 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000EA4 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000EA8 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000EAA 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000EAC 80A6               M         bsf     EECON1, RD          ; read EEPROM
000EAE CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000EB2 C023 FFE8      01282         movff           REG_EE, WREG
000EB6 EC?? F???      01283         call            WR_DATA
000EBA 2A22           01284         incf            L_EE
000EBC 0012           01285         return
Warning[205]: Found directive in column 1. (end)
                      01286 end

Errors   :     0
Warnings :    44 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

