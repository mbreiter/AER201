MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*******************************************************************************
                      00002 ;
                      00003 ;    Filename: main.asm
                      00004 ;    Date: 2 Feb 2017
                      00005 ;    File Version: 1.0
                      00006 ;    Author: Matthew Reiter
                      00007 ;    Course: AER201
                      00008 ;    Description: botL - a pastic bottle sorting machine
                      00009  
                      00010 ;*******************************************************************************
                      00011 ; configuration settings
                      00012 ;*******************************************************************************
                      00013 
Warning[205]: Found directive in column 1. (list)
                      00014 list    P=18F4620, F=INHX32, C=160, N=80, ST=OFF, MM=OFF, R=DEC
                      00015 #include <p18f4620.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Nov 17 2016
                      00005 ;  MPASM PIC18F4620 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      01440         LIST
                      00016 #include <lcd.inc>
  0000                00001     extern      InitLCD,WrtLCD,ClrLCD,ClkLCD,WR_INS,WR_DATA,LCD_L1,LCD_L2,delay5ms
                      00002 
                      00003 
                      00004 
                      00005 
                      00006 
                      00007 
                      00017 #include <rtc.inc>
Warning[205]: Found directive in column 1. (extern)
  0000                00001 extern write_rtc,read_rtc,rtc_convert,i2c_common_setup, regaddress, databyte, datachar,tens_digit,ones_digit
                      00002 
Warning[205]: Found directive in column 1. (variable)
  0000                00003 variable _loopknt=0
                      00004 
                      00005 rtc_resetAll macro
                      00006 
                      00007     clrf    databyte
                      00008     movlw   6
                      00009     movwf   regaddress ;start at 6 and go down, and set all to 0
                      00010 
                      00011     del_loop#v(_loopknt)
                      00012     call    write_rtc
                      00013     decfsz  regaddress
                      00014     bra     del_loop#v(_loopknt)
                      00015     call    write_rtc ;sets registers 0-6 to zero
                      00016     _loopknt set _loopknt+1
Warning[205]: Found directive in column 1. (endm)
                      00017 endm
                      00018 
                      00019 rtc_set macro addliteral,datliteral
                      00020     movlw   addliteral
                      00021     movwf   regaddress
                      00022     movlw   datliteral
                      00023     movwf   databyte
                      00024     call    write_rtc
Warning[205]: Found directive in column 1. (endm)
                      00025 endm
                      00026 
                      00027 rtc_read macro addliteral
                      00028     movlw   addliteral
                      00029     movwf   regaddress
                      00030     call    read_rtc
                      00031     movff   datachar, WREG
                      00032     call    rtc_convert
Warning[205]: Found directive in column 1. (endm)
                      00033 endm
                      00018 #include <colour.inc>
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                00001     extern      i2c_common_setup, regaddress, databyte, datachar, READ_COLOUR_I2C, WRITE_COLOUR_I2C, WR_DATA, data_colourL, data_col
                            ourH, delay5ms
                      00002 
                      00003 ;    #define TCS34725_ADDRESS          (0x29)
                      00004 ;
                      00005 ;    #define TCS34725_COMMAND_BIT      (0x80)
                      00006 ;
                      00007 ;    #define TCS34725_ENABLE           (0x00)
                      00008 ;    #define TCS34725_ENABLE_AIEN      (0x10)    /* RGBC Interrupt Enable */
                      00009 ;    #define TCS34725_ENABLE_WEN       (0x08)    /* Wait enable - Writing 1 activates the wait timer */
                      00010 ;    #define TCS34725_ENABLE_AEN       (0x02)    /* RGBC Enable - Writing 1 actives the ADC, 0 disables it */
                      00011 ;    #define TCS34725_ENABLE_PON       (0x01)    /* Power on - Writing 1 activates the internal oscillator, 0 disables it */
                      00012 ;    #define TCS34725_ATIME            (0x01)    /* Integration time */
                      00013 ;    #define TCS34725_WTIME            (0x03)    /* Wait time (if TCS34725_ENABLE_WEN is asserted) */
                      00014 ;    #define TCS34725_WTIME_2_4MS      (0xFF)    /* WLONG0 = 2.4ms   WLONG1 = 0.029s */
                      00015 ;    #define TCS34725_WTIME_204MS      (0xAB)    /* WLONG0 = 204ms   WLONG1 = 2.45s  */
                      00016 ;    #define TCS34725_WTIME_614MS      (0x00)    /* WLONG0 = 614ms   WLONG1 = 7.4s   */
                      00017 ;    #define TCS34725_AILTL            (0x04)    /* Clear channel lower interrupt threshold */
                      00018 ;    #define TCS34725_AILTH            (0x05)
                      00019 ;    #define TCS34725_AIHTL            (0x06)    /* Clear channel upper interrupt threshold */
                      00020 ;    #define TCS34725_AIHTH            (0x07)
                      00021 ;    #define TCS34725_PERS             (0x0C)    /* Persistence register - basic SW filtering mechanism for interrupts */
                      00022 ;    #define TCS34725_PERS_NONE        (0b0000)  /* Every RGBC cycle generates an interrupt                                */
                      00023 ;    #define TCS34725_PERS_1_CYCLE     (0b0001)  /* 1 clean channel value outside threshold range generates an interrupt   */
                      00024 ;    #define TCS34725_PERS_2_CYCLE     (0b0010)  /* 2 clean channel values outside threshold range generates an interrupt  */
                      00025 ;    #define TCS34725_PERS_3_CYCLE     (0b0011)  /* 3 clean channel values outside threshold range generates an interrupt  */
                      00026 ;    #define TCS34725_PERS_5_CYCLE     (0b0100)  /* 5 clean channel values outside threshold range generates an interrupt  */
                      00027 ;    #define TCS34725_PERS_10_CYCLE    (0b0101)  /* 10 clean channel values outside threshold range generates an interrupt */
                      00028 ;    #define TCS34725_PERS_15_CYCLE    (0b0110)  /* 15 clean channel values outside threshold range generates an interrupt */
                      00029 ;    #define TCS34725_PERS_20_CYCLE    (0b0111)  /* 20 clean channel values outside threshold range generates an interrupt */
                      00030 ;    #define TCS34725_PERS_25_CYCLE    (0b1000)  /* 25 clean channel values outside threshold range generates an interrupt */
                      00031 ;    #define TCS34725_PERS_30_CYCLE    (0b1001)  /* 30 clean channel values outside threshold range generates an interrupt */
                      00032 ;    #define TCS34725_PERS_35_CYCLE    (0b1010)  /* 35 clean channel values outside threshold range generates an interrupt */
                      00033 ;    #define TCS34725_PERS_40_CYCLE    (0b1011)  /* 40 clean channel values outside threshold range generates an interrupt */
                      00034 ;    #define TCS34725_PERS_45_CYCLE    (0b1100)  /* 45 clean channel values outside threshold range generates an interrupt */
                      00035 ;    #define TCS34725_PERS_50_CYCLE    (0b1101)  /* 50 clean channel values outside threshold range generates an interrupt */
                      00036 ;    #define TCS34725_PERS_55_CYCLE    (0b1110)  /* 55 clean channel values outside threshold range generates an interrupt */
                      00037 ;    #define TCS34725_PERS_60_CYCLE    (0b1111)  /* 60 clean channel values outside threshold range generates an interrupt */
                      00038 ;    #define TCS34725_CONFIG           (0x0D)
                      00039 ;    #define TCS34725_CONFIG_WLONG     (0x02)    /* Choose between short and long (12x) wait times via TCS34725_WTIME */
                      00040 ;    #define TCS34725_CONTROL          (0x0F)    /* Set the gain level for the sensor */
                      00041 ;    #define TCS34725_ID               (0x12)    /* 0x44 = TCS34721/TCS34725, 0x4D = TCS34723/TCS34727 */
                      00042 ;    #define TCS34725_STATUS           (0x13)
                      00043 ;    #define TCS34725_STATUS_AINT      (0x10)    /* RGBC Clean channel interrupt */
                      00044 ;    #define TCS34725_STATUS_AVALID    (0x01)    /* Indicates that the RGBC channels have completed an integration cycle */
                      00045 ;    #define TCS34725_CDATAL           (0x14)    /* Clear channel data */
                      00046 ;    #define TCS34725_CDATAH           (0x15)
                      00047 ;    #define TCS34725_RDATAL           (0x16)    /* Red channel data */
                      00048 ;    #define TCS34725_RDATAH           (0x17)
                      00049 ;    #define TCS34725_GDATAL           (0x18)    /* Green channel data */
                      00050 ;    #define TCS34725_GDATAH           (0x19)
                      00051 ;    #define TCS34725_BDATAL           (0x1A)    /* Blue channel data */
                      00052 ;    #define TCS34725_BDATAH           (0x1B)
                      00053 
                      00054 
Warning[207]: Found label after column 1. (COLOUR_INIT)
                      00055     COLOUR_INIT macro
                      00056         COLOUR_WRITE    0x00, 0x01 ; Enable Register (0x00), Power ON (0x01)
                      00057         call    delay5ms
                      00058         COLOUR_WRITE    0x00, 0x02 ; Enable Register (0x00), RGBC enable (0x02)
                      00059         call    delay5ms
                      00060         COLOUR_WRITE    0x01, 0xff ; Timing Register (0x01), 2.4ms (0xff) cycle
                      00061         call    delay5ms
                      00062         COLOUR_WRITE    0x0f, 0x03 ; Control Register (0x0f), 60x gain (0x03)
                      00063         call    delay5ms
                      00064     endm
                      00065     
Warning[207]: Found label after column 1. (COLOUR_READ)
                      00066     COLOUR_READ  macro  address
                      00067         movlw   address
                      00068         movwf   regaddress
                      00069         call    READ_COLOUR_I2C
                      00070     endm
                      00071     
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[207]: Found label after column 1. (COLOUR_WRITE)
                      00072     COLOUR_WRITE macro address, datliteral
                      00073         movlw   address
                      00074         movwf   regaddress
                      00075         movlw   datliteral
                      00076         movwf   databyte
                      00077         call    WRITE_COLOUR_I2C
                      00078     endm
                      00079     
Warning[207]: Found label after column 1. (COLOUR_GET_DATA)
                      00080     COLOUR_GET_DATA macro clear, red, green, blue
                      00081         call    delay5ms
                      00082         
                      00083         COLOUR_READ 0x14    ; read clear colour address low, command bits set later
                      00084         movff   databyte, clear+0
                      00085         COLOUR_READ 0x15    ; read clear colour address high, command bits set later
                      00086         movff   databyte, clear+1
                      00087                 
                      00088         COLOUR_READ 0x16    ; read red colour address low, command bits set later
                      00089         movff   databyte, red+0
                      00090         COLOUR_READ 0x17    ; read red colour address high, command bits set later
                      00091         movff   databyte, red+0
                      00092         
                      00093         COLOUR_READ 0x18    ; read green colour address low, command bits set later
                      00094         movff   databyte, green+0
                      00095         COLOUR_READ 0x19    ; read green colour address high, command bits set later
                      00096         movff   databyte, green+1
                      00097         
                      00098         COLOUR_READ 0x1a    ; read blue colour address low, command bits set later
                      00099         movff   databyte, blue+0
                      00100         COLOUR_READ 0x1b    ; read blue colour address high, command bits set later
                      00101         movff   databyte, blue+1
                      00102     endm
                      00103     
                      00019 
                      00020     CONFIG OSC=HS, FCMEN=OFF, IESO=OFF
                      00021     CONFIG PWRT = OFF, BOREN = SBORDIS, BORV = 3
                      00022     CONFIG WDT = OFF, WDTPS = 32768
                      00023     CONFIG MCLRE = ON, LPT1OSC = OFF, PBADEN = OFF
                      00024     CONFIG STVREN = ON, LVP = OFF, XINST = OFF
                      00025     CONFIG DEBUG = OFF
                      00026     CONFIG CP0 = OFF, CP1 = OFF, CP2 = OFF, CP3 = OFF
                      00027     CONFIG CPB = OFF, CPD = OFF
                      00028     CONFIG WRT0 = OFF, WRT1 = OFF, WRT2 = OFF, WRT3 = OFF
                      00029     CONFIG WRTB = OFF, WRTC = OFF, WRTD = OFF
                      00030     CONFIG EBTR0 = OFF, EBTR1 = OFF, EBTR2 = OFF, EBTR3 = OFF
                      00031     CONFIG EBTRB = OFF
                      00032 
                      00033 ;*******************************************************************************
                      00034 ; variable and constants
                      00035 ;*******************************************************************************
                      00036     CODE
                      00037             
                      00038     cblock 0x00
  00000000            00039         key1
  00000001            00040         key2
  00000002            00041         key3
  00000003            00042         keyA
  00000004            00043         key4
  00000005            00044         key5
  00000006            00045         key6
  00000007            00046         keyB
  00000008            00047         key7
  00000009            00048         key8
  0000000A            00049         key9
  0000000B            00050         keyC
  0000000C            00051         keyS
  0000000D            00052         key0
  0000000E            00053         keyH
  0000000F            00054         keyD
  00000010            00055         KEY
  00000011            00056         temp_KEY
  00000012            00057         KEY_ISR
  00000013            00058         temp_S  
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000014            00059         temp_W
  00000015            00060         counter
  00000016            00061         counter2
  00000017            00062         temp
  00000018            00063         OP_sec
  00000019            00064         OP_INT
  0000001A            00065         temp_ISR
  0000001B            00066         delayR
  0000001C            00067         d5us
  0000001D            00068         d200us
  0000001E            00069         d50ms
  0000001F            00070         inExecution
  00000020            00071         clear_EE
  00000021            00072         H_EE    
  00000022            00073         L_EE    
  00000023            00074         REG_EE  
  00000024            00075         tempH_EE
  00000025            00076         tempL_EE
  00000026            00077         tempL_EEC
  00000027            00078         MAX_EE   
  00000028            00079         READ_EE
  00000029            00080         last_log
  0000002A            00081         startHt
  0000002B            00082         startHo
  0000002C            00083         startMt
  0000002D            00084         startMo
  0000002E            00085         endHt
  0000002F            00086         endHo
  00000030            00087         endMt
  00000031            00088         endMo
  00000032            00089         LED_Count
  00000033            00090         SkipCount
  00000034            00091         exe_sec
  00000035            00092         exe_int
  00000036            00093         timer_H
  00000037            00094         timer_L
  00000038            00095         convert_buffer
  00000039            00096         transferring
  0000003A            00097         PC_PCL
  0000003B            00098         PC_PCLATH
  0000003C            00099         PC_PCLATU
  0000003D            00100         TIMCNT
  0000003E            00101         CPCNT
  0000003F            00102         TDATA
  00000040            00103         ESKA
  00000041            00104         ESKA_CAP
  00000042            00105         YOP
  00000043            00106         YOP_CAP
  00000044            00107         CLEAR:2
  00000046            00108         RED:2
  00000048            00109         GREEN:2
  0000004A            00110         BLUE:2
  0000004C            00111         temp_colour:2
                      00112     endc
                      00113     
  0000                00114     extern tens_digit, ones_digit
                      00115     
                      00116 ;*******************************************************************************
                      00117 ; tables
                      00118 ;*******************************************************************************
Warning[207]: Found label after column 1. (Welcome)
000000 6F62 4C74 0000 00119     Welcome     db          "botL", 0
Warning[207]: Found label after column 1. (Team)
000006 726D 6820 206C 00120     Team        db          "mr hl hg", 0
       6768 0000 
Warning[207]: Found label after column 1. (StandBy)
000010 7453 6E61 6264 00121     StandBy     db          "Standby", 0
       0079 
Warning[207]: Found label after column 1. (Log1)
000018 6954 656D 003A 00122     Log1        db          "Time:",0
Warning[207]: Found label after column 1. (Log2)
00001E 3231 303A 2030 00123     Log2        db          "12:00 2/3/14", 0
       2F32 2F33 3431 
       0000 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[207]: Found label after column 1. (LogInfo1)
00002C 6153 6576 3A64 00124     LogInfo1    db          "Saved:", 0
       0000 
Warning[207]: Found label after column 1. (LogInfo2)
000034 6142 6B63 3C20 00125     LogInfo2    db          "Back <0>", 0
       3E30 0000 
Warning[207]: Found label after column 1. (PermLog1)
00003E 6550 6D72 6E61 00126     PermLog1    db          "Permanent Logs", 0
       6E65 2074 6F4C 
       7367 0000 
Warning[207]: Found label after column 1. (PermLog2)
00004E 313C 203E 2E2E 00127     PermLog2    db          "<1> ... <9>", 0    
       202E 393C 003E 
Warning[207]: Found label after column 1. (Exe1)
00005A 6F53 7472 6E69 00128     Exe1        db          "Sorting...", 0
       2E67 2E2E 0000 
Warning[207]: Found label after column 1. (Exe2)
000066 4E45 2044 2A3C 00129     Exe2        db          "END <*>", 0
       003E 
Warning[207]: Found label after column 1. (PC1)
00006E 4350 4920 746E 00130     PC1         db          "PC Interface", 0
       7265 6166 6563 
       0000 
Warning[207]: Found label after column 1. (PC2)
00007C 6542 6967 206E 00131     PC2         db          "Begin <#>", 0
       233C 003E 
Warning[207]: Found label after column 1. (PCTransfer)
000086 7254 6E61 6673 00132     PCTransfer  db          "Transferring...", 0
       7265 6972 676E 
       2E2E 002E 
Warning[207]: Found label after column 1. (Stopped)
000096 7453 706F 6570 00133     Stopped     db          "Stopped", 0
       0064 
Warning[207]: Found label after column 1. (Exe_Time)
00009E 6954 656D 203A 00134     Exe_Time    db          "Time: ", 0
       0000 
Warning[207]: Found label after column 1. (SAVE)
0000A6 6153 6976 676E 00135     SAVE        db          "Saving...", 0
       2E2E 002E 
Warning[207]: Found label after column 1. (Safety)
0000B0 6153 6566 7974 00136     Safety      db          "Safety check...", 0
       6320 6568 6B63 
       2E2E 002E 
Warning[207]: Found label after column 1. (NoData)
0000C0 2F4E 0041      00137     NoData      db          "N/A", 0
Warning[207]: Found label after column 1. (PCLog1)
0000C4 6954 656D 6120 00138     PCLog1      db          "Time and Date:", 0
       646E 4420 7461 
       3A65 0000 
                      00139         
                      00140 ;*******************************************************************************
                      00141 ; macros
                      00142 ;*******************************************************************************
                      00143 
                      00144 TransferTable macro table
                      00145         local loop
                      00146         
                      00147         movlw   upper table
                      00148         movwf   TBLPTRU
                      00149         movlw   high table
                      00150         movwf   TBLPTRH
                      00151         movlw   low table
                      00152         movwf   TBLPTRL
                      00153         tblrd*
                      00154         movff   TABLAT, WREG
                      00155 loop
                      00156         call    USART_WAIT
                      00157         tblrd+*
                      00158         movff   TABLAT, WREG
                      00159         bnz     loop
                      00160         endm
                      00161         
                      00162 ConfigLCD   macro
                      00163           movlw     b'00101000'    ; 4 bits, 2 lines,5X7 dots seems to work best instead of the above setting
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00164           call      WR_INS
                      00165 
                      00166           movlw     b'00001100'    ; display on/off
                      00167           call      WR_INS
                      00168          ; movlw     B'00000110'    ; Entry mode
                      00169          ; call      WR_INS
                      00170           movlw     b'00000001'    ; Clear ram
                      00171           call      WR_INS
                      00172           endm
                      00173         
                      00174 movMSB  macro   port
                      00175         andlw   0xF0
                      00176         iorwf   port, f
                      00177         iorlw   0x0F
                      00178         andwf   port, f
                      00179         endm
                      00180 
                      00181 Delay50N macro count, N
                      00182         local   loop
                      00183         movlw   N
                      00184         movwf   count
                      00185 
                      00186 loop
                      00187         call    Delay50ms
                      00188         decfsz  count
                      00189         goto    loop
                      00190         endm
                      00191 
                      00192 Display macro   Message
                      00193         local   loop
                      00194         movlw   upper Message   ; Move Table<20:16>
                      00195         movwf   TBLPTRU
                      00196         movlw   high Message    ; Move Table<15:8>
                      00197         movwf   TBLPTRH
                      00198         movlw   low Message     ; Move Table<7:0>
                      00199         movwf   TBLPTRL
                      00200         tblrd*                  ; Read byte from TBLPTRL to TABLAT
                      00201         movf    TABLAT, W
                      00202 loop
                      00203         call    WR_DATA         ; write to LCD
                      00204         tblrd+*                 ; next row in table
                      00205         movf    TABLAT, W
                      00206         bnz     loop
                      00207         endm
                      00208 
                      00209 DisplayLog  macro   addrH, addrL
                      00210             local   Again, Finish
                      00211             
                      00212             clrf    SkipCount
                      00213             clrf    MAX_EE
                      00214 
                      00215             ; Check if there is No Data first
                      00216             READEE      REG_EE, addrH, addrL
                      00217             movlw       0xFF
                      00218             cpfseq      REG_EE
                      00219             goto        Again
                      00220             Display     NoData
                      00221             goto        Finish
                      00222 Again
                      00223             ; Put a space every 3 Writes
                      00224             movlw       d'3'
                      00225             cpfslt      SkipCount
                      00226             cpfslt      MAX_EE
                      00227             goto        Finish
                      00228 
                      00229             ; read EEPROM
                      00230             READEE      REG_EE, addrH, addrL
                      00231             btfsc       REG_EE, 7       ; if bit 7 set then done
                      00232             goto        Finish
                      00233 Finish
                      00234             endm
                      00235             
                      00236 ;TransferLog macro   addrH, addrL
                      00237         
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00238 
                      00239 incf_BCD    macro   BCD
                      00240         local ones, endBCD
                      00241         movff   BCD, temp
                      00242         
                      00243         ;process ones digit
                      00244         movlw   0x0f
                      00245         andwf   temp
                      00246         movlw   d'9'
                      00247         
                      00248         ;skip if ones digit is 9
                      00249         cpfseq  temp
                      00250         goto    ones
                      00251         
                      00252         movlw   b'00010000'
                      00253         addwf   BCD
                      00254         movlw   0xf0
                      00255         andwf   BCD
                      00256         movlw   0xa0
                      00257         cpfslt  BCD
                      00258         
                      00259         clrf    BCD
                      00260         goto    endBCD
                      00261         
                      00262 ones
                      00263         incf    BCD
                      00264         goto    endBCD
                      00265 endBCD
                      00266         nop
                      00267         endm
                      00268         
                      00269 SUB16   macro   x, y        ; does not modify x nor y
                      00270         local   RESULTS
                      00271         movff   y+1, WREG   ; move high y into working register
                      00272         subwf   x+1, 0      ; do subtraction xH - yH => w
                      00273         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
                      00274         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                      00275         
                      00276         movff   y+0, WREG
                      00277         subwf   x+0, 0  
                      00278 RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
                      00279         endm
                      00280 
                      00281 WriteRTC    macro
                      00282         movff   tens_digit, WREG
                      00283         call    WR_DATA
                      00284         movff   ones_digit, WREG
                      00285         call    WR_DATA
                      00286         endm
                      00287 
                      00288 WriteEE macro   word, addH, addL
                      00289         movff   addH, EEADRH        ; High address
                      00290         movff   addL, EEADR         ; Low address
                      00291         movff   word, EEDATA        ; set word
                      00292 
                      00293         btfsc   EECON1, WR          ; test if WR=0, skip if so
                      00294         bra     $-2
                      00295 
                      00296         bcf     EECON1, EEPGD       ; Point to data memory
                      00297         bcf     EECON1, CFGS        ; Access EEPROM
                      00298         bsf     EECON1, WREN        ; enable write
                      00299         bcf     INTCON, GIE         ; disable interrupts during write
                      00300         bcf     PIR2, EEIF
                      00301 
                      00302         movlw   0x55
                      00303         movwf   EECON2              ; write 55h
                      00304         movlw   0xaa
                      00305         movwf   EECON2              ; write 0xaa
                      00306         bsf     EECON1, WR          ; begin write
                      00307         btfsc   EECON1, WR
                      00308         bra     $-2
                      00309 
                      00310         bsf     INTCON, GIE         ; enable interrupts after write
                      00311         bcf     EECON1, WREN        ; disable writes
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00312         endm
                      00313 
                      00314 READEE  macro   file, addH, addL
                      00315         movff   addH, EEADRH        ; read to high
                      00316         movff   addL, EEADR         ; read to low
                      00317         bcf     EECON1, EEPGD       ; point to data memory
                      00318         bcf     EECON1, CFGS        ; access to EEPROM
                      00319         bsf     EECON1, RD          ; read EEPROM
                      00320         movff   EEDATA, file        ; put data into file
                      00321         endm
                      00322 
                      00323 ChangeMode  macro   ModeId, NextMode
                      00324         local Next, Exit
                      00325 
                      00326         movlw   ModeId              ; poll for mode
                      00327         cpfseq  KEY                 ; check this against key press
                      00328         goto    Exit
                      00329 
                      00330 Next
                      00331         clrf    LATA                ; clear pins before proceeding
                      00332         clrf    LATB
                      00333         clrf    LATC
                      00334         clrf    LATD
                      00335         goto    NextMode
                      00336 
                      00337 Exit
                      00338         nop
                      00339         endm
                      00340 
                      00341 saveContext macro
                      00342     movff   STATUS, temp_S          ; save STATUS first
                      00343     movwf   temp_W                  ; save W
                      00344     endm
                      00345 
                      00346 restoreContext macro
                      00347     swapf   temp_W, W               ; restore W first
                      00348     movff   temp_S, STATUS          ; restore STATUS last without affecting W
                      00349     endm
                      00350 ;*******************************************************************************
                      00351 ; reset vector and isrs
                      00352 ;*******************************************************************************
                      00353         ORG     0x000               ; processor reset vector
000000 EF?? F???      00354         goto    INIT                ; go to beginning of program
                      00355 
                      00356         ORG     0x008
000008 EF?? F???      00357         goto    ISR_HIGH
                      00358 
                      00359         ORG     0x018
000018 EF?? F???      00360         goto    ISR_LOW
                      00361 
00001C                00362 ISR_HIGH
                      00363         saveContext
00001C CFD8 F013          M     movff   STATUS, temp_S          ; save STATUS first
000020 6E14               M     movwf   temp_W                  ; save W
                      00364         
                      00365         ; displaying the execution time in seconds
Warning[202]: Argument out of range.  Least significant bits used.
000022 3818           00366         swapf   OP_sec, WREG    ; 100's seconds
000024 6E17           00367         movwf   temp
000026 0E0F           00368         movlw   0x0F
000028 1617           00369         andwf   temp
00002A C017 FFE8      00370         movff   temp, WREG
00002E 0F30           00371         addlw   0x30
000030 EC?? F???      00372         call    WR_DATA
                      00373 
000034 C018 F017      00374         movff   OP_sec, temp    ; 10's seconds
000038 0E0F           00375         movlw   0x0F
00003A 1617           00376         andwf   temp            ; Temp = lower nibble of Op_sec
00003C C017 FFE8      00377         movff   temp, WREG      ; W = Temp
000040 0F30           00378         addlw   0x30            ; Convert to ASCII
000042 EC?? F???      00379         call    WR_DATA
                      00380         
Warning[202]: Argument out of range.  Least significant bits used.
000046 3819           00381         swapf   OP_INT, WREG    ;1's seconds
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000048 6E17           00382         movwf   temp
00004A 0E0F           00383         movlw   0x0f
00004C 1617           00384         andwf   temp
00004E C017 FFE8      00385         movff   temp, WREG
000052 0F30           00386         addlw   0x30
000054 EC?? F???      00387         call    WR_DATA
                      00388 
000058 0E73           00389         movlw   0x73            ; Write 's'
00005A EC?? F???      00390         call    WR_DATA
00005E EC?? F???      00391         call    LCD_L2
                      00392 
                      00393         ;reset timer 
000062 0EC6           00394         movlw   0xc6
000064 6ED7           00395         movwf   TMR0H
000066 0E3E           00396         movlw   0x3e
000068 6ED6           00397         movwf   TMR0L
                      00398                 
                      00399         ;timer interrupt
00006A A4F2           00400         btfss   INTCON, TMR0IF
00006C EF?? F???      00401         goto    END_ISR_HIGH
                      00402         
                      00403         incf_BCD    OP_INT
  0000                    M         local ones, endBCD
000070 C019 F017          M         movff   OP_INT, temp
                          M         
                          M         ;process ones digit
000074 0E0F               M         movlw   0x0f
000076 1617               M         andwf   temp
000078 0E09               M         movlw   d'9'
                          M         
                          M         ;skip if ones digit is 9
00007A 6217               M         cpfseq  temp
00007C EF?? F???          M         goto    ones
                          M         
000080 0E10               M         movlw   b'00010000'
000082 2619               M         addwf   OP_INT
000084 0EF0               M         movlw   0xf0
000086 1619               M         andwf   OP_INT
000088 0EA0               M         movlw   0xa0
00008A 6019               M         cpfslt  OP_INT
                          M         
00008C 6A19               M         clrf    OP_INT
00008E EF?? F???          M         goto    endBCD
                          M         
000092                    M ones
000092 2A19               M         incf    OP_INT
000094 EF?? F???          M         goto    endBCD
000098                    M endBCD
000098 0000               M         nop
00009A 0E00           00404         movlw   d'0'
00009C 6219           00405         cpfseq  OP_INT
00009E EF?? F???      00406         goto    END_ISR_HIGH
                      00407         incf_BCD    OP_sec
  0000                    M         local ones, endBCD
0000A2 C018 F017          M         movff   OP_sec, temp
                          M         
                          M         ;process ones digit
0000A6 0E0F               M         movlw   0x0f
0000A8 1617               M         andwf   temp
0000AA 0E09               M         movlw   d'9'
                          M         
                          M         ;skip if ones digit is 9
0000AC 6217               M         cpfseq  temp
0000AE EF?? F???          M         goto    ones
                          M         
0000B2 0E10               M         movlw   b'00010000'
0000B4 2618               M         addwf   OP_sec
0000B6 0EF0               M         movlw   0xf0
0000B8 1618               M         andwf   OP_sec
0000BA 0EA0               M         movlw   0xa0
0000BC 6018               M         cpfslt  OP_sec
                          M         
0000BE 6A18               M         clrf    OP_sec
0000C0 EF?? F???          M         goto    endBCD
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         
0000C4                    M ones
0000C4 2A18               M         incf    OP_sec
0000C6 EF?? F???          M         goto    endBCD
0000CA                    M endBCD
0000CA 0000               M         nop
                      00408 
0000CC                00409 END_ISR_HIGH
0000CC 94F2           00410         bcf     INTCON, TMR0IF
                      00411         restoreContext
0000CE 3814               M     swapf   temp_W, W               ; restore W first
0000D0 C013 FFD8          M     movff   temp_S, STATUS          ; restore STATUS last without affecting W
0000D4 0010           00412         retfie
                      00413 
0000D6                00414 ISR_LOW
                      00415         saveContext
0000D6 CFD8 F013          M     movff   STATUS, temp_S          ; save STATUS first
0000DA 6E14               M     movwf   temp_W                  ; save W
                      00416         ; KEYPAD INTERRUPT
0000DC A0F0           00417         btfss           INTCON3, INT1IF                 ; If KEYPAD interrupt, skip return
0000DE EF?? F???      00418         goto            END_ISR_LOW
                      00419 
                      00420         ;Check operation status
                      00421 ;       movlw           0xff                                    ; If in operation, skip return
                      00422 ;       cpfseq          InExecution
                      00423 ;       goto            END_ISR_LOW
                      00424 
                      00425         ; Process KEY
0000E2 3881           00426         swapf           PORTB, W                                ; Read PORTB<7:4> into W<3:0>
0000E4 0B0F           00427         andlw           0x0f
0000E6 6E12           00428         movwf           KEY_ISR                                 ; Put W into KEY_ISR
                      00429 ;       movlw           keyS                                    ; Put keyStar into W to compare to KEY_ISR
                      00430 ;       cpfseq          KEY_ISR                                 ; If key was '*', skip return
0000E8 EF?? F???      00431         goto            END_ISR_LOW
                      00432 
                      00433         ; Reset program counter
0000EC 6AFF           00434         clrf            TOSU
0000EE 6AFE           00435         clrf            TOSH
0000F0 6AFD           00436         clrf            TOSL
                      00437 
0000F2                00438 END_ISR_LOW
0000F2 90F0           00439         bcf                     INTCON3, INT1IF         ; Clear flag for next interrupt
                      00440         restoreContext
0000F4 3814               M     swapf   temp_W, W               ; restore W first
0000F6 C013 FFD8          M     movff   temp_S, STATUS          ; restore STATUS last without affecting W
0000FA 0010           00441         retfie
                      00442 
                      00443 ;*******************************************************************************
                      00444 ; main
                      00445 ;*******************************************************************************
0000FC                00446 INIT
                      00447         ; i/o
0000FC 0EFF           00448         movlw   b'11111111'
0000FE 6E92           00449         movwf   TRISA
000100 0EFF           00450         movlw   b'11111111'
000102 6E93           00451         movwf   TRISB               ; keypad
000104 0E00           00452         movlw   b'00000000'
000106 6E94           00453         movwf   TRISC
000108 0E00           00454         movlw   b'00000000'
00010A 6E95           00455         movwf   TRISD
00010C 0E07           00456         movlw   b'00000111'
00010E 6E96           00457         movwf   TRISE
                      00458 
                      00459         ; analog/digital pins
000110 0E0F           00460         movlw   b'00001111'     ; Set all AN pins to Digital
000112 6EC1           00461         movwf   ADCON1
                      00462 
                      00463         ; clear ports
000114 6A89           00464         clrf    LATA
000116 6A8A           00465         clrf    LATB
                      00466 ;       bcf     TRISC, SCL
                      00467 ;       bcf     TRISC, SDA
000118 6A8B           00468         clrf    LATC
00011A 6A8C           00469         clrf    LATD
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00011C 6A8D           00470         clrf    LATE
                      00471         
00011E 0E00           00472         movlw   b'00000000'
000120 6EC2           00473         movwf   ADCON0
000122 0EFF           00474         movlw   b'11111111'
000124 6EC1           00475         movwf   ADCON1
                      00476         
                      00477         ; initializations
000126 EC?? F???      00478         call    InitLCD
                      00479         ConfigLCD
00012A 0E28               M           movlw     b'00101000'    ; 4 bits, 2 lines,5X7 dots seems to work best instead of the above setting
00012C EC?? F???          M           call      WR_INS
                          M 
000130 0E0C               M           movlw     b'00001100'    ; display on/off
000132 EC?? F???          M           call      WR_INS
                          M          ; movlw     B'00000110'    ; Entry mode
                          M          ; call      WR_INS
000136 0E01               M           movlw     b'00000001'    ; Clear ram
000138 EC?? F???          M           call      WR_INS
00013C EC?? F???      00480         call    RTC_INIT
000140 EC?? F???      00481         call    Delay50ms
                      00482         COLOUR_INIT
                          M         COLOUR_WRITE    0x00, 0x01 ; Enable Register (0x00), Power ON (0x01)
000144 0E00               M         movlw   0x00
000146 6E??               M         movwf   regaddress
000148 0E01               M         movlw   0x01
00014A 6E??               M         movwf   databyte
00014C EC?? F???          M         call    WRITE_COLOUR_I2C
000150 EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x00, 0x02 ; Enable Register (0x00), RGBC enable (0x02)
000154 0E00               M         movlw   0x00
000156 6E??               M         movwf   regaddress
000158 0E02               M         movlw   0x02
00015A 6E??               M         movwf   databyte
00015C EC?? F???          M         call    WRITE_COLOUR_I2C
000160 EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x01, 0xff ; Timing Register (0x01), 2.4ms (0xff) cycle
000164 0E01               M         movlw   0x01
000166 6E??               M         movwf   regaddress
000168 0EFF               M         movlw   0xff
00016A 6E??               M         movwf   databyte
00016C EC?? F???          M         call    WRITE_COLOUR_I2C
000170 EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x0f, 0x03 ; Control Register (0x0f), 60x gain (0x03)
000174 0E0F               M         movlw   0x0f
000176 6E??               M         movwf   regaddress
000178 0E03               M         movlw   0x03
00017A 6E??               M         movwf   databyte
00017C EC?? F???          M         call    WRITE_COLOUR_I2C
000180 EC?? F???          M         call    delay5ms
000184 EC?? F???      00483         call    INIT_USART
                      00484 
                      00485         ; interrupts
000188 6AD0           00486         clrf    RCON
00018A 6AF2           00487         clrf    INTCON
00018C 6AF1           00488         clrf    INTCON2
00018E 6AF0           00489         clrf    INTCON3
000190 8ED0           00490         bsf     RCON, IPEN          ; priority mode
000192 8EF2           00491         bsf     INTCON, GIEH        ; permit global interrupts
000194 8CF2           00492         bsf     INTCON, GIEL
000196 8AF1           00493         bsf     INTCON2, INTEDG1    ; INTEDG1 on rising edge
000198 8AF2           00494         bsf     INTCON, TMR0IE      ; clear timer0 overflow interrupt flag
00019A 84F2           00495         bsf     INTCON, TMR0IF      ; clear timer0 overflow interrupt flag
00019C 84F1           00496         bsf     INTCON2, TMR0IP     ; set to high priority
00019E 86F0           00497         bsf     INTCON3, INT1IE
0001A0 9CF0           00498         bcf     INTCON3, INT1IP
                      00499         
                      00500         ; setting up timer to sychronize with 1 second clock intervals
0001A2 9ED5           00501         bcf     T0CON, TMR0ON
0001A4 9CD5           00502         bcf     T0CON, T08BIT
0001A6 9AD5           00503         bcf     T0CON, T0CS
0001A8 98D5           00504         bcf     T0CON, T0SE
0001AA 96D5           00505         bcf     T0CON, PSA
0001AC 94D5           00506         bcf     T0CON, T0PS2        ; set prescaling to 1:16. this allows for 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001AE 82D5           00507         bsf     T0CON, T0PS1        ; a preloading of ~50750 or 0xc63e. very
0001B0 80D5           00508         bsf     T0CON, T0PS0        ; good approximation within 3 minutes.
                      00509 
0001B2 6A21           00510         clrf    H_EE
0001B4 6A22           00511         clrf    L_EE
0001B6 6A??           00512         clrf    tens_digit
0001B8 6A??           00513         clrf    ones_digit
0001BA 6A40           00514         clrf    ESKA
0001BC 6A41           00515         clrf    ESKA_CAP
0001BE 6A42           00516         clrf    YOP
0001C0 6A43           00517         clrf    YOP_CAP
0001C2 6A44           00518         clrf    CLEAR+0
0001C4 6A45           00519         clrf    CLEAR+1 
0001C6 6A46           00520         clrf    RED+0
0001C8 6A47           00521         clrf    RED+1
0001CA 6A48           00522         clrf    GREEN+0
0001CC 6A49           00523         clrf    GREEN+1
0001CE 6A4A           00524         clrf    BLUE+0
0001D0 6A4B           00525         clrf    BLUE+1
                      00526         
0001D2 0EF2           00527         movlw     b'11110010'    ; Set required keypad inputs
0001D4 6E93           00528         movwf     TRISB
                      00529         
0001D6 EC?? F???      00530         call    ClrLCD
                      00531         Display Welcome
  0000                    M         local   loop
0001DA 0E??               M         movlw   upper Welcome   ; Move Table<20:16>
0001DC 6EF8               M         movwf   TBLPTRU
0001DE 0E??               M         movlw   high Welcome    ; Move Table<15:8>
0001E0 6EF7               M         movwf   TBLPTRH
0001E2 0E??               M         movlw   low Welcome     ; Move Table<7:0>
0001E4 6EF6               M         movwf   TBLPTRL
0001E6 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0001E8 50F5               M         movf    TABLAT, W
0001EA                    M loop
0001EA EC?? F???          M         call    WR_DATA         ; write to LCD
0001EE 000B               M         tblrd+*                 ; next row in table
0001F0 50F5               M         movf    TABLAT, W
0001F2 E1??               M         bnz     loop
0001F4 EC?? F???      00532         call LCD_L2
                      00533         Display Team
  0000                    M         local   loop
0001F8 0E??               M         movlw   upper Team      ; Move Table<20:16>
0001FA 6EF8               M         movwf   TBLPTRU
0001FC 0E??               M         movlw   high Team       ; Move Table<15:8>
0001FE 6EF7               M         movwf   TBLPTRH
000200 0E??               M         movlw   low Team        ; Move Table<7:0>
000202 6EF6               M         movwf   TBLPTRL
000204 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000206 50F5               M         movf    TABLAT, W
000208                    M loop
000208 EC?? F???          M         call    WR_DATA         ; write to LCD
00020C 000B               M         tblrd+*                 ; next row in table
00020E 50F5               M         movf    TABLAT, W
000210 E1??               M         bnz     loop
                      00534         
                      00535         Delay50N delayR, 0x28
  0000                    M         local   loop
000212 0E28               M         movlw   0x28
000214 6E1B               M         movwf   delayR
                          M 
000216                    M loop
000216 EC?? F???          M         call    Delay50ms
00021A 2E1B               M         decfsz  delayR
00021C EF?? F???          M         goto    loop
                      00536 
                      00537 ;*******************************************************************************
                      00538 ; standby mode
                      00539 ;*******************************************************************************
000220                00540 STANDBY
000220 EC?? F???      00541         call    ClrLCD
                      00542         Display StandBy
  0000                    M         local   loop
000224 0E??               M         movlw   upper StandBy   ; Move Table<20:16>
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000226 6EF8               M         movwf   TBLPTRU
000228 0E??               M         movlw   high StandBy    ; Move Table<15:8>
00022A 6EF7               M         movwf   TBLPTRH
00022C 0E??               M         movlw   low StandBy     ; Move Table<7:0>
00022E 6EF6               M         movwf   TBLPTRL
000230 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000232 50F5               M         movf    TABLAT, W
000234                    M loop
000234 EC?? F???          M         call    WR_DATA         ; write to LCD
000238 000B               M         tblrd+*                 ; next row in table
00023A 50F5               M         movf    TABLAT, W
00023C E1??               M         bnz     loop
                      00543 
00023E                00544 HOLD_STANDBY
00023E EC?? F???      00545         call    READ_KEY_TIME
                      00546         ChangeMode  key5, COLOUR_TEST
  0000                    M         local Next, Exit
                          M 
000242 0E05               M         movlw   key5                ; poll for mode
000244 6210               M         cpfseq  KEY                 ; check this against key press
000246 EF?? F???          M         goto    Exit
                          M 
00024A                    M Next
00024A 6A89               M         clrf    LATA                ; clear pins before proceeding
00024C 6A8A               M         clrf    LATB
00024E 6A8B               M         clrf    LATC
000250 6A8C               M         clrf    LATD
000252 EF?? F???          M         goto    COLOUR_TEST
                          M 
000256                    M Exit
000256 0000               M         nop
                      00547         ChangeMode  key8, STEP_TEST
  0000                    M         local Next, Exit
                          M 
000258 0E09               M         movlw   key8                ; poll for mode
00025A 6210               M         cpfseq  KEY                 ; check this against key press
00025C EF?? F???          M         goto    Exit
                          M 
000260                    M Next
000260 6A89               M         clrf    LATA                ; clear pins before proceeding
000262 6A8A               M         clrf    LATB
000264 6A8B               M         clrf    LATC
000266 6A8C               M         clrf    LATD
000268 EF?? F???          M         goto    STEP_TEST
                          M 
00026C                    M Exit
00026C 0000               M         nop
                      00548         ChangeMode  keyA, EXECUTION
  0000                    M         local Next, Exit
                          M 
00026E 0E03               M         movlw   keyA                ; poll for mode
000270 6210               M         cpfseq  KEY                 ; check this against key press
000272 EF?? F???          M         goto    Exit
                          M 
000276                    M Next
000276 6A89               M         clrf    LATA                ; clear pins before proceeding
000278 6A8A               M         clrf    LATB
00027A 6A8B               M         clrf    LATC
00027C 6A8C               M         clrf    LATD
00027E EF?? F???          M         goto    EXECUTION
                          M 
000282                    M Exit
000282 0000               M         nop
                      00549         ChangeMode  keyB, LOG
  0000                    M         local Next, Exit
                          M 
000284 0E07               M         movlw   keyB                ; poll for mode
000286 6210               M         cpfseq  KEY                 ; check this against key press
000288 EF?? F???          M         goto    Exit
                          M 
00028C                    M Next
00028C 6A89               M         clrf    LATA                ; clear pins before proceeding
00028E 6A8A               M         clrf    LATB
000290 6A8B               M         clrf    LATC
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000292 6A8C               M         clrf    LATD
000294 EF?? F???          M         goto    LOG
                          M 
000298                    M Exit
000298 0000               M         nop
                      00550         ChangeMode  keyC, PERM_LOG
  0000                    M         local Next, Exit
                          M 
00029A 0E0B               M         movlw   keyC                ; poll for mode
00029C 6210               M         cpfseq  KEY                 ; check this against key press
00029E EF?? F???          M         goto    Exit
                          M 
0002A2                    M Next
0002A2 6A89               M         clrf    LATA                ; clear pins before proceeding
0002A4 6A8A               M         clrf    LATB
0002A6 6A8B               M         clrf    LATC
0002A8 6A8C               M         clrf    LATD
0002AA EF?? F???          M         goto    PERM_LOG
                          M 
0002AE                    M Exit
0002AE 0000               M         nop
                      00551         ChangeMode  keyD, PC_MODE
  0000                    M         local Next, Exit
                          M 
0002B0 0E0F               M         movlw   keyD                ; poll for mode
0002B2 6210               M         cpfseq  KEY                 ; check this against key press
0002B4 EF?? F???          M         goto    Exit
                          M 
0002B8                    M Next
0002B8 6A89               M         clrf    LATA                ; clear pins before proceeding
0002BA 6A8A               M         clrf    LATB
0002BC 6A8B               M         clrf    LATC
0002BE 6A8C               M         clrf    LATD
0002C0 EF?? F???          M         goto    PC_MODE
                          M 
0002C4                    M Exit
0002C4 0000               M         nop
0002C6 D???           00552         bra     HOLD_STANDBY
                      00553 
                      00554 ;*******************************************************************************
                      00555 ; execution mode
                      00556 ;*******************************************************************************
                      00557         
0002C8                00558 STEP_TEST
0002C8 0E03           00559         movlw   b'00000011'
0002CA 6E83           00560         movwf   PORTD
0002CC EC?? F???      00561         call    delay5ms
                      00562         
0002D0 0E06           00563         movlw   b'00000110'
0002D2 6E83           00564         movwf   PORTD
0002D4 EC?? F???      00565         call    delay5ms
                      00566         
0002D8 0E0C           00567         movlw   b'00001100'
0002DA 6E83           00568         movwf   PORTD
0002DC EC?? F???      00569         call    delay5ms
                      00570 
0002E0 0E09           00571         movlw   b'00001001'
0002E2 6E83           00572         movwf   PORTD
0002E4 EC?? F???      00573         call    delay5ms
                      00574 
0002E8 D???           00575         bra STEP_TEST
                      00576         
0002EA                00577 CHECK_CLEAR
                      00578         SUB16   CLEAR, RED                  ; check first against red
  0000                    M         local   RESULTS
0002EA C047 FFE8          M         movff   RED+1, WREG ; move high y into working register
0002EE 5C45               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
0002F0 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0002F2 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0002F6 C046 FFE8          M         movff   RED+0, WREG
0002FA 5C44               M         subwf   CLEAR+0, 0 
0002FC                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0002FC A0D8           00579         btfss   STATUS, C
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002FE 0012           00580         return                              ; RED > CLEAR
                      00581         
                      00582         SUB16   CLEAR, GREEN                ; check against green
  0000                    M         local   RESULTS
000300 C049 FFE8          M         movff   GREEN+1, WREG ; move high y into working register
000304 5C45               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
000306 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000308 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00030C C048 FFE8          M         movff   GREEN+0, WREG
000310 5C44               M         subwf   CLEAR+0, 0 
000312                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000312 A0D8           00583         btfss   STATUS, C
000314 0012           00584         return                              ; GREEN > CLEAR
                      00585         
                      00586         SUB16   CLEAR, BLUE                 ; check against blue
  0000                    M         local   RESULTS
000316 C04B FFE8          M         movff   BLUE+1, WREG ; move high y into working register
00031A 5C45               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
00031C A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00031E EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000322 C04A FFE8          M         movff   BLUE+0, WREG
000326 5C44               M         subwf   CLEAR+0, 0 
000328                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000328 A0D8           00587         btfss   STATUS, C
00032A 0012           00588         return                              ; BLUE > CLEAR
                      00589         
00032C 0E63           00590         movlw   'c'                         ; CLEAR > everything else
00032E EC?? F???      00591         call    WR_DATA
000332 D???           00592         bra     LOOPING
000334                00593 CHECK_RED
                      00594         SUB16   RED, CLEAR                  ; check first against clear
  0000                    M         local   RESULTS
000334 C045 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
000338 5C47               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
00033A A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00033C EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000340 C044 FFE8          M         movff   CLEAR+0, WREG
000344 5C46               M         subwf   RED+0, 0 
000346                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000346 A0D8           00595         btfss   STATUS, C
000348 0012           00596         return                              ; CLEAR > RED
                      00597         
                      00598         SUB16   RED, GREEN                  ; check against green
  0000                    M         local   RESULTS
00034A C049 FFE8          M         movff   GREEN+1, WREG ; move high y into working register
00034E 5C47               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
000350 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000352 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000356 C048 FFE8          M         movff   GREEN+0, WREG
00035A 5C46               M         subwf   RED+0, 0 
00035C                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
00035C A0D8           00599         btfss   STATUS, C
00035E 0012           00600         return                              ; GREEN > RED
                      00601         
                      00602         SUB16   RED, BLUE                   ; check against blue
  0000                    M         local   RESULTS
000360 C04B FFE8          M         movff   BLUE+1, WREG ; move high y into working register
000364 5C47               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
000366 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000368 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00036C C04A FFE8          M         movff   BLUE+0, WREG
000370 5C46               M         subwf   RED+0, 0 
000372                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000372 A0D8           00603         btfss   STATUS, C
000374 0012           00604         return                              ; BLUE > RED
                      00605         
000376 0E72           00606         movlw   'r'                         ; RED > everything else
000378 EC?? F???      00607         call    WR_DATA
00037C D???           00608         bra     LOOPING
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00037E                00609 CHECK_GREEN
                      00610         SUB16   GREEN, CLEAR                ; check first against clear
  0000                    M         local   RESULTS
00037E C045 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
000382 5C49               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
000384 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000386 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00038A C044 FFE8          M         movff   CLEAR+0, WREG
00038E 5C48               M         subwf   GREEN+0, 0 
000390                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000390 A0D8           00611         btfss   STATUS, C
000392 0012           00612         return                              ; CLEAR > GREEN
                      00613         
                      00614         SUB16   GREEN, RED                  ; check against red
  0000                    M         local   RESULTS
000394 C047 FFE8          M         movff   RED+1, WREG ; move high y into working register
000398 5C49               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
00039A A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00039C EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003A0 C046 FFE8          M         movff   RED+0, WREG
0003A4 5C48               M         subwf   GREEN+0, 0 
0003A6                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003A6 A0D8           00615         btfss   STATUS, C
0003A8 0012           00616         return                              ; RED > GREEN
                      00617         
                      00618         SUB16   GREEN, BLUE                 ; check against blue
  0000                    M         local   RESULTS
0003AA C04B FFE8          M         movff   BLUE+1, WREG ; move high y into working register
0003AE 5C49               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
0003B0 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003B2 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003B6 C04A FFE8          M         movff   BLUE+0, WREG
0003BA 5C48               M         subwf   GREEN+0, 0 
0003BC                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003BC A0D8           00619         btfss   STATUS, C
0003BE 0012           00620         return                              ; BLUE > GREEN
                      00621         
0003C0 0E67           00622         movlw   'g'                         ; GREEN > everything else
0003C2 EC?? F???      00623         call    WR_DATA
0003C6 D???           00624         bra     LOOPING
0003C8                00625 CHECK_BLUE
                      00626         SUB16   BLUE, CLEAR                 ; check first against clear
  0000                    M         local   RESULTS
0003C8 C045 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
0003CC 5C4B               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
0003CE A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003D0 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003D4 C044 FFE8          M         movff   CLEAR+0, WREG
0003D8 5C4A               M         subwf   BLUE+0, 0 
0003DA                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003DA A0D8           00627         btfss   STATUS, C
0003DC 0012           00628         return                              ; CLEAR > BLUE
                      00629         
                      00630         SUB16   BLUE, RED                   ; check against red
  0000                    M         local   RESULTS
0003DE C047 FFE8          M         movff   RED+1, WREG ; move high y into working register
0003E2 5C4B               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
0003E4 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003E6 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003EA C046 FFE8          M         movff   RED+0, WREG
0003EE 5C4A               M         subwf   BLUE+0, 0 
0003F0                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003F0 A0D8           00631         btfss   STATUS, C
0003F2 0012           00632         return                              ; RED > BLUE
                      00633 
                      00634         SUB16   BLUE, GREEN                 ; check against green
  0000                    M         local   RESULTS
0003F4 C049 FFE8          M         movff   GREEN+1, WREG ; move high y into working register
0003F8 5C4B               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003FA A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003FC EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000400 C048 FFE8          M         movff   GREEN+0, WREG
000404 5C4A               M         subwf   BLUE+0, 0 
000406                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000406 A0D8           00635         btfss   STATUS, C
000408 0012           00636         return                              ; GREEN > CLEAR
                      00637         
00040A 0E62           00638         movlw   'b'                         ; BLUE > everything else
00040C EC?? F???      00639         call    WR_DATA
000410 0012           00640         return
                      00641         
000412                00642 COLOUR_TEST
                      00643 
000412                00644 LOOPING
                      00645         Delay50N delayR, 0x28
  0000                    M         local   loop
000412 0E28               M         movlw   0x28
000414 6E1B               M         movwf   delayR
                          M 
000416                    M loop
000416 EC?? F???          M         call    Delay50ms
00041A 2E1B               M         decfsz  delayR
00041C EF?? F???          M         goto    loop
000420 EC?? F???      00646         call    ClrLCD
                      00647         COLOUR_GET_DATA CLEAR, RED, GREEN, BLUE
000424 EC?? F???          M         call    delay5ms
                          M         
                          M         COLOUR_READ 0x14    ; read clear colour address low, command bits set later
000428 0E14               M         movlw   0x14
00042A 6E??               M         movwf   regaddress
00042C EC?? F???          M         call    READ_COLOUR_I2C
000430 C??? F044          M         movff   databyte, CLEAR+0
                          M         COLOUR_READ 0x15    ; read clear colour address high, command bits set later
000434 0E15               M         movlw   0x15
000436 6E??               M         movwf   regaddress
000438 EC?? F???          M         call    READ_COLOUR_I2C
00043C C??? F045          M         movff   databyte, CLEAR+1
                          M                 
                          M         COLOUR_READ 0x16    ; read red colour address low, command bits set later
000440 0E16               M         movlw   0x16
000442 6E??               M         movwf   regaddress
000444 EC?? F???          M         call    READ_COLOUR_I2C
000448 C??? F046          M         movff   databyte, RED+0
                          M         COLOUR_READ 0x17    ; read red colour address high, command bits set later
00044C 0E17               M         movlw   0x17
00044E 6E??               M         movwf   regaddress
000450 EC?? F???          M         call    READ_COLOUR_I2C
000454 C??? F046          M         movff   databyte, RED+0
                          M         
                          M         COLOUR_READ 0x18    ; read green colour address low, command bits set later
000458 0E18               M         movlw   0x18
00045A 6E??               M         movwf   regaddress
00045C EC?? F???          M         call    READ_COLOUR_I2C
000460 C??? F048          M         movff   databyte, GREEN+0
                          M         COLOUR_READ 0x19    ; read green colour address high, command bits set later
000464 0E19               M         movlw   0x19
000466 6E??               M         movwf   regaddress
000468 EC?? F???          M         call    READ_COLOUR_I2C
00046C C??? F049          M         movff   databyte, GREEN+1
                          M         
                          M         COLOUR_READ 0x1a    ; read blue colour address low, command bits set later
000470 0E1A               M         movlw   0x1a
000472 6E??               M         movwf   regaddress
000474 EC?? F???          M         call    READ_COLOUR_I2C
000478 C??? F04A          M         movff   databyte, BLUE+0
                          M         COLOUR_READ 0x1b    ; read blue colour address high, command bits set later
00047C 0E1B               M         movlw   0x1b
00047E 6E??               M         movwf   regaddress
000480 EC?? F???          M         call    READ_COLOUR_I2C
000484 C??? F04B          M         movff   databyte, BLUE+1
                      00648         Delay50N delayR, 0x02
  0000                    M         local   loop
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000488 0E02               M         movlw   0x02
00048A 6E1B               M         movwf   delayR
                          M 
00048C                    M loop
00048C EC?? F???          M         call    Delay50ms
000490 2E1B               M         decfsz  delayR
000492 EF?? F???          M         goto    loop
                      00649         
                      00650 ;       movlw   0x01            ;testing
                      00651 ;       movwf   CLEAR+1
                      00652 ;       movlw   0x06
                      00653 ;       movwf   GREEN+0
                      00654 ;       movlw   0x03
                      00655 ;       movwf   RED+0
                      00656 ;       movlw   0x01
                      00657 ;       movwf   BLUE+0
                      00658         
                      00659 ;       movlw   d'0'
                      00660 ;       cpfseq  RED+0
                      00661 ;       movlw   'w'
                      00662 ;       call    WR_DATA
                      00663 
                      00664         ;call   CHECK_CLEAR
000496 EC?? F???      00665         call    CHECK_RED
00049A EC?? F???      00666         call    CHECK_GREEN
00049E EC?? F???      00667         call    CHECK_BLUE
0004A2 D???           00668         bra LOOPING
                      00669         
0004A4                00670 EXECUTION
0004A4 EC?? F???      00671         call        ClearEEPROM_21
                      00672         ; save the starting time
0004A8 EC?? F???      00673         call        SAVE_TIME
                      00674                 
                      00675         ; display
0004AC 681F           00676         setf        inExecution
0004AE EC?? F???      00677         call        ClrLCD
                      00678         Display     Exe1
  0000                    M         local   loop
0004B2 0E??               M         movlw   upper Exe1      ; Move Table<20:16>
0004B4 6EF8               M         movwf   TBLPTRU
0004B6 0E??               M         movlw   high Exe1       ; Move Table<15:8>
0004B8 6EF7               M         movwf   TBLPTRH
0004BA 0E??               M         movlw   low Exe1        ; Move Table<7:0>
0004BC 6EF6               M         movwf   TBLPTRL
0004BE 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0004C0 50F5               M         movf    TABLAT, W
0004C2                    M loop
0004C2 EC?? F???          M         call    WR_DATA         ; write to LCD
0004C6 000B               M         tblrd+*                 ; next row in table
0004C8 50F5               M         movf    TABLAT, W
0004CA E1??               M         bnz     loop
0004CC EC?? F???      00679         call        LCD_L2
0004D0 0EC5           00680         movlw       0xc5                    ; setting up timer
0004D2 6ED7           00681         movwf       TMR0H
0004D4 0E44           00682         movlw       0x44    
0004D6 6ED6           00683         movwf       TMR0L
                      00684         
0004D8 8ED5           00685         bsf         T0CON, TMR0ON           ; turning on timer
                      00686         ; initialize variables
0004DA 6A18           00687         clrf        OP_sec
0004DC 6A19           00688         clrf        OP_INT
                      00689         
0004DE 6A40           00690         clrf        ESKA
0004E0 6A41           00691         clrf        ESKA_CAP
0004E2 6A42           00692         clrf        YOP
0004E4 6A43           00693         clrf        YOP_CAP
                      00694         
0004E6 6A44           00695         clrf        CLEAR
0004E8 6A45           00696         clrf        CLEAR+1     
0004EA 6A46           00697         clrf        RED
0004EC 6A47           00698         clrf        RED+1
0004EE 6A48           00699         clrf        GREEN
0004F0 6A49           00700         clrf        GREEN+1
0004F2 6A4A           00701         clrf        BLUE
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0004F4 6A4B           00702         clrf        BLUE+1
                      00703         
                      00704 ;COLLECTIONS_STEP
                      00705 ;       
                      00706 ;TERM_CHECK
                      00707 ;       
                      00708 ;BOTTLE_CHECK
                      00709 ;
                      00710 ;COLOUR_ONE
                      00711 ;
                      00712 ;COLOUR_TWO
                      00713 ;       
                      00714 ;BRAINS
                      00715 ;       
                      00716 ;TRAY_STEP
                      00717 ;       
                      00718 
0004F6                00719 HOLD_EXE
0004F6 EC?? F???      00720         call        READ_KEY
                      00721         ChangeMode  keyS, EXIT_EXE
  0000                    M         local Next, Exit
                          M 
0004FA 0E0C               M         movlw   keyS                ; poll for mode
0004FC 6210               M         cpfseq  KEY                 ; check this against key press
0004FE EF?? F???          M         goto    Exit
                          M 
000502                    M Next
000502 6A89               M         clrf    LATA                ; clear pins before proceeding
000504 6A8A               M         clrf    LATB
000506 6A8B               M         clrf    LATC
000508 6A8C               M         clrf    LATD
00050A EF?? F???          M         goto    EXIT_EXE
                          M 
00050E                    M Exit
00050E 0000               M         nop
000510 D???           00722         bra         HOLD_EXE
                      00723         
000512                00724 EXIT_EXE
                      00725         ; stop timer and save the execution time to eeprom
000512 9ED5           00726         bcf         T0CON, TMR0ON
000514 EC?? F???      00727         call        SAVE_EXE_TIME
                      00728                 
                      00729         ; Clear inExecution flag to stop '*' interrupts
000518 6A1F           00730         clrf        inExecution
                      00731         
00051A C040 FFE8      00732         movff       ESKA, WREG
00051E 0F30           00733         addlw       0x30
                      00734         WriteEE     WREG, H_EE, L_EE
000520 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000524 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000528 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
00052C B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
00052E D???               M         bra     $-2
                          M 
000530 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000532 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000534 84A6               M         bsf     EECON1, WREN        ; enable write
000536 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000538 98A1               M         bcf     PIR2, EEIF
                          M 
00053A 0E55               M         movlw   0x55
00053C 6EA7               M         movwf   EECON2              ; write 55h
00053E 0EAA               M         movlw   0xaa
000540 6EA7               M         movwf   EECON2              ; write 0xaa
000542 82A6               M         bsf     EECON1, WR          ; begin write
000544 B2A6               M         btfsc   EECON1, WR
000546 D???               M         bra     $-2
                          M 
000548 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
00054A 94A6               M         bcf     EECON1, WREN        ; disable writes
00054C 2A22           00735         incf        L_EE
                      00736         
00054E C041 FFE8      00737         movff       ESKA_CAP, WREG
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000552 0F30           00738         addlw       0x30
                      00739         WriteEE     WREG, H_EE, L_EE
000554 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000558 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
00055C CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000560 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000562 D???               M         bra     $-2
                          M 
000564 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000566 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000568 84A6               M         bsf     EECON1, WREN        ; enable write
00056A 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
00056C 98A1               M         bcf     PIR2, EEIF
                          M 
00056E 0E55               M         movlw   0x55
000570 6EA7               M         movwf   EECON2              ; write 55h
000572 0EAA               M         movlw   0xaa
000574 6EA7               M         movwf   EECON2              ; write 0xaa
000576 82A6               M         bsf     EECON1, WR          ; begin write
000578 B2A6               M         btfsc   EECON1, WR
00057A D???               M         bra     $-2
                          M 
00057C 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
00057E 94A6               M         bcf     EECON1, WREN        ; disable writes
000580 2A22           00740         incf        L_EE
                      00741         
000582 C042 FFE8      00742         movff       YOP, WREG
000586 0F30           00743         addlw       0x30
                      00744         WriteEE     WREG, H_EE, L_EE
000588 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
00058C C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000590 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000594 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000596 D???               M         bra     $-2
                          M 
000598 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
00059A 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
00059C 84A6               M         bsf     EECON1, WREN        ; enable write
00059E 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
0005A0 98A1               M         bcf     PIR2, EEIF
                          M 
0005A2 0E55               M         movlw   0x55
0005A4 6EA7               M         movwf   EECON2              ; write 55h
0005A6 0EAA               M         movlw   0xaa
0005A8 6EA7               M         movwf   EECON2              ; write 0xaa
0005AA 82A6               M         bsf     EECON1, WR          ; begin write
0005AC B2A6               M         btfsc   EECON1, WR
0005AE D???               M         bra     $-2
                          M 
0005B0 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
0005B2 94A6               M         bcf     EECON1, WREN        ; disable writes
0005B4 2A22           00745         incf        L_EE
                      00746         
0005B6 C043 FFE8      00747         movff       YOP_CAP, WREG
0005BA 0F30           00748         addlw       0x30
                      00749         WriteEE     WREG, H_EE, L_EE
0005BC C021 FFAA          M         movff   H_EE, EEADRH        ; High address
0005C0 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
0005C4 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
0005C8 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
0005CA D???               M         bra     $-2
                          M 
0005CC 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
0005CE 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
0005D0 84A6               M         bsf     EECON1, WREN        ; enable write
0005D2 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
0005D4 98A1               M         bcf     PIR2, EEIF
                          M 
0005D6 0E55               M         movlw   0x55
0005D8 6EA7               M         movwf   EECON2              ; write 55h
0005DA 0EAA               M         movlw   0xaa
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0005DC 6EA7               M         movwf   EECON2              ; write 0xaa
0005DE 82A6               M         bsf     EECON1, WR          ; begin write
0005E0 B2A6               M         btfsc   EECON1, WR
0005E2 D???               M         bra     $-2
                          M 
0005E4 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
0005E6 94A6               M         bcf     EECON1, WREN        ; disable writes
0005E8 2A22           00750         incf        L_EE
                      00751         
0005EA EF?? F???      00752         goto        SaveData
                      00753 
0005EE                00754 SaveData
0005EE EC?? F???      00755         call        ClrLCD
                      00756         Display     SAVE
  0000                    M         local   loop
0005F2 0E??               M         movlw   upper SAVE      ; Move Table<20:16>
0005F4 6EF8               M         movwf   TBLPTRU
0005F6 0E??               M         movlw   high SAVE       ; Move Table<15:8>
0005F8 6EF7               M         movwf   TBLPTRH
0005FA 0E??               M         movlw   low SAVE        ; Move Table<7:0>
0005FC 6EF6               M         movwf   TBLPTRL
0005FE 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000600 50F5               M         movf    TABLAT, W
000602                    M loop
000602 EC?? F???          M         call    WR_DATA         ; write to LCD
000606 000B               M         tblrd+*                 ; next row in table
000608 50F5               M         movf    TABLAT, W
00060A E1??               M         bnz     loop
                      00757 
00060C 0E00           00758         movlw       d'0'
00060E 6E21           00759         movwf       H_EE
000610 0EA8           00760         movlw       d'168'              ; take d'168' as last
000612 6E22           00761         movwf       L_EE
000614 0E00           00762         movlw       d'0'
000616 6E24           00763         movwf       tempH_EE
000618 0EDC           00764         movlw       d'220'              ; temp for low constant
00061A 6E25           00765         movwf       tempL_EE
                      00766         
00061C 6A16           00767         clrf        counter2
00061E 6A15           00768         clrf        counter
                      00769         
000620                00770 ShiftLoop
000620 2A15           00771         incf            counter
                      00772         READEE          REG_EE, H_EE, L_EE
000622 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000626 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
00062A 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
00062C 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
00062E 80A6               M         bsf     EECON1, RD          ; read EEPROM
000630 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000634 0E15           00773         movlw           d'21'
000636 2622           00774         addwf           L_EE
                      00775         WriteEE         REG_EE, H_EE, L_EE
000638 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
00063C C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000640 C023 FFA8          M         movff   REG_EE, EEDATA      ; set word
                          M 
000644 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000646 D???               M         bra     $-2
                          M 
000648 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
00064A 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
00064C 84A6               M         bsf     EECON1, WREN        ; enable write
00064E 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000650 98A1               M         bcf     PIR2, EEIF
                          M 
000652 0E55               M         movlw   0x55
000654 6EA7               M         movwf   EECON2              ; write 55h
000656 0EAA               M         movlw   0xaa
000658 6EA7               M         movwf   EECON2              ; write 0xaa
00065A 82A6               M         bsf     EECON1, WR          ; begin write
00065C B2A6               M         btfsc   EECON1, WR
00065E D???               M         bra     $-2
                          M 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000660 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000662 94A6               M         bcf     EECON1, WREN        ; disable writes
000664 0E14           00776         movlw           d'20'
000666 5E22           00777         subwf           L_EE
000668 0E15           00778         movlw           d'21'
00066A 6215           00779         cpfseq          counter
00066C EF?? F???      00780         goto            ShiftLoop
                      00781         
                      00782         ; Set EEPROM address to the previous 21 byte block, and reset temp address
000670 0E2A           00783         movlw           d'42'
000672 5E22           00784         subwf           L_EE
000674 0EDC           00785         movlw           d'220'
000676 6E25           00786         movwf           tempL_EE
000678 6A15           00787         clrf            counter
00067A 2A16           00788         incf            counter2
00067C 0E09           00789         movlw           d'9'
00067E 6216           00790         cpfseq          counter2        ; Skip if 9 shifts were made
000680 EF?? F???      00791         goto            ShiftLoop
                      00792 
000684 EF?? F???      00793         goto            LOG
                      00794 
                      00795 ;*******************************************************************************
                      00796 ; sorting statistics log mode
                      00797 ;*******************************************************************************
                      00798         
000688                00799 LOG
000688 EC?? F???      00800         call    ClrLCD
                      00801         Display Log1
  0000                    M         local   loop
00068C 0E??               M         movlw   upper Log1      ; Move Table<20:16>
00068E 6EF8               M         movwf   TBLPTRU
000690 0E??               M         movlw   high Log1       ; Move Table<15:8>
000692 6EF7               M         movwf   TBLPTRH
000694 0E??               M         movlw   low Log1        ; Move Table<7:0>
000696 6EF6               M         movwf   TBLPTRL
000698 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
00069A 50F5               M         movf    TABLAT, W
00069C                    M loop
00069C EC?? F???          M         call    WR_DATA         ; write to LCD
0006A0 000B               M         tblrd+*                 ; next row in table
0006A2 50F5               M         movf    TABLAT, W
0006A4 E1??               M         bnz     loop
                      00802 
                      00803         ; display most recent run data
0006A6 0E0A           00804         movlw   d'10'
0006A8 6E22           00805         movwf   L_EE
                      00806 ;       READEE  OP_sec, H_EE, L_EE
                      00807 ;       incf    L_EE
                      00808 ;       READEE  OP_INT, H_EE, L_EE
                      00809 ;       incf    L_EE
0006AA EC?? F???      00810         call    DisplayExeTime
                      00811 
0006AE EC?? F???      00812         call    LCD_L2
0006B2 6A22           00813         clrf    L_EE
0006B4 EC?? F???      00814         call    DispOpRTC
                      00815 
0006B8                00816 HOLD_LOG
0006B8 EC?? F???      00817         call    READ_KEY
                      00818         ChangeMode  keyB, LOG_INFO
  0000                    M         local Next, Exit
                          M 
0006BC 0E07               M         movlw   keyB                ; poll for mode
0006BE 6210               M         cpfseq  KEY                 ; check this against key press
0006C0 EF?? F???          M         goto    Exit
                          M 
0006C4                    M Next
0006C4 6A89               M         clrf    LATA                ; clear pins before proceeding
0006C6 6A8A               M         clrf    LATB
0006C8 6A8B               M         clrf    LATC
0006CA 6A8C               M         clrf    LATD
0006CC EF?? F???          M         goto    LOG_INFO
                          M 
0006D0                    M Exit
0006D0 0000               M         nop
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00819         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
0006D2 0E0D               M         movlw   key0                ; poll for mode
0006D4 6210               M         cpfseq  KEY                 ; check this against key press
0006D6 EF?? F???          M         goto    Exit
                          M 
0006DA                    M Next
0006DA 6A89               M         clrf    LATA                ; clear pins before proceeding
0006DC 6A8A               M         clrf    LATB
0006DE 6A8B               M         clrf    LATC
0006E0 6A8C               M         clrf    LATD
0006E2 EF?? F???          M         goto    STANDBY
                          M 
0006E6                    M Exit
0006E6 0000               M         nop
0006E8 D???           00820         bra     HOLD_LOG
                      00821 
0006EA                00822 LOG_INFO
0006EA EC?? F???      00823         call    ClrLCD
                      00824         Display LogInfo1
  0000                    M         local   loop
0006EE 0E??               M         movlw   upper LogInfo1  ; Move Table<20:16>
0006F0 6EF8               M         movwf   TBLPTRU
0006F2 0E??               M         movlw   high LogInfo1   ; Move Table<15:8>
0006F4 6EF7               M         movwf   TBLPTRH
0006F6 0E??               M         movlw   low LogInfo1    ; Move Table<7:0>
0006F8 6EF6               M         movwf   TBLPTRL
0006FA 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0006FC 50F5               M         movf    TABLAT, W
0006FE                    M loop
0006FE EC?? F???          M         call    WR_DATA         ; write to LCD
000702 000B               M         tblrd+*                 ; next row in table
000704 50F5               M         movf    TABLAT, W
000706 E1??               M         bnz     loop
000708 EC?? F???      00825         call    LCD_L2
                      00826         Display LogInfo2
  0000                    M         local   loop
00070C 0E??               M         movlw   upper LogInfo2  ; Move Table<20:16>
00070E 6EF8               M         movwf   TBLPTRU
000710 0E??               M         movlw   high LogInfo2   ; Move Table<15:8>
000712 6EF7               M         movwf   TBLPTRH
000714 0E??               M         movlw   low LogInfo2    ; Move Table<7:0>
000716 6EF6               M         movwf   TBLPTRL
000718 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
00071A 50F5               M         movf    TABLAT, W
00071C                    M loop
00071C EC?? F???          M         call    WR_DATA         ; write to LCD
000720 000B               M         tblrd+*                 ; next row in table
000722 50F5               M         movf    TABLAT, W
000724 E1??               M         bnz     loop
000726 6A21           00827         clrf    H_EE
000728 6A22           00828         clrf    L_EE
                      00829         ;DisplayLog  H_EE, L_EE
00072A                00830 HOLD_LOG_INFO
00072A EC?? F???      00831         call    READ_KEY
                      00832         ChangeMode key0, LOG
  0000                    M         local Next, Exit
                          M 
00072E 0E0D               M         movlw   key0                ; poll for mode
000730 6210               M         cpfseq  KEY                 ; check this against key press
000732 EF?? F???          M         goto    Exit
                          M 
000736                    M Next
000736 6A89               M         clrf    LATA                ; clear pins before proceeding
000738 6A8A               M         clrf    LATB
00073A 6A8B               M         clrf    LATC
00073C 6A8C               M         clrf    LATD
00073E EF?? F???          M         goto    LOG
                          M 
000742                    M Exit
000742 0000               M         nop
000744 D???           00833         bra     HOLD_LOG
                      00834         
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00835 ;*******************************************************************************
                      00836 ; permanent logs
                      00837 ;*******************************************************************************
                      00838 
000746                00839 PERM_LOG
000746 EC?? F???      00840         call    ClrLCD
                      00841         Display PermLog1
  0000                    M         local   loop
00074A 0E??               M         movlw   upper PermLog1  ; Move Table<20:16>
00074C 6EF8               M         movwf   TBLPTRU
00074E 0E??               M         movlw   high PermLog1   ; Move Table<15:8>
000750 6EF7               M         movwf   TBLPTRH
000752 0E??               M         movlw   low PermLog1    ; Move Table<7:0>
000754 6EF6               M         movwf   TBLPTRL
000756 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000758 50F5               M         movf    TABLAT, W
00075A                    M loop
00075A EC?? F???          M         call    WR_DATA         ; write to LCD
00075E 000B               M         tblrd+*                 ; next row in table
000760 50F5               M         movf    TABLAT, W
000762 E1??               M         bnz     loop
000764 EC?? F???      00842         call    LCD_L2
                      00843         Display PermLog2
  0000                    M         local   loop
000768 0E??               M         movlw   upper PermLog2  ; Move Table<20:16>
00076A 6EF8               M         movwf   TBLPTRU
00076C 0E??               M         movlw   high PermLog2   ; Move Table<15:8>
00076E 6EF7               M         movwf   TBLPTRH
000770 0E??               M         movlw   low PermLog2    ; Move Table<7:0>
000772 6EF6               M         movwf   TBLPTRL
000774 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000776 50F5               M         movf    TABLAT, W
000778                    M loop
000778 EC?? F???          M         call    WR_DATA         ; write to LCD
00077C 000B               M         tblrd+*                 ; next row in table
00077E 50F5               M         movf    TABLAT, W
000780 E1??               M         bnz     loop
                      00844         
000782                00845 HOLD_PERM_LOG
000782 EC?? F???      00846         call    READ_KEY
                      00847         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
000786 0E0D               M         movlw   key0                ; poll for mode
000788 6210               M         cpfseq  KEY                 ; check this against key press
00078A EF?? F???          M         goto    Exit
                          M 
00078E                    M Next
00078E 6A89               M         clrf    LATA                ; clear pins before proceeding
000790 6A8A               M         clrf    LATB
000792 6A8B               M         clrf    LATC
000794 6A8C               M         clrf    LATD
000796 EF?? F???          M         goto    STANDBY
                          M 
00079A                    M Exit
00079A 0000               M         nop
                      00848         ChangeMode  key1, PLOG
  0000                    M         local Next, Exit
                          M 
00079C 0E00               M         movlw   key1                ; poll for mode
00079E 6210               M         cpfseq  KEY                 ; check this against key press
0007A0 EF?? F???          M         goto    Exit
                          M 
0007A4                    M Next
0007A4 6A89               M         clrf    LATA                ; clear pins before proceeding
0007A6 6A8A               M         clrf    LATB
0007A8 6A8B               M         clrf    LATC
0007AA 6A8C               M         clrf    LATD
0007AC EF?? F???          M         goto    PLOG
                          M 
0007B0                    M Exit
0007B0 0000               M         nop
                      00849         ChangeMode  key2, PLOG
  0000                    M         local Next, Exit
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
0007B2 0E01               M         movlw   key2                ; poll for mode
0007B4 6210               M         cpfseq  KEY                 ; check this against key press
0007B6 EF?? F???          M         goto    Exit
                          M 
0007BA                    M Next
0007BA 6A89               M         clrf    LATA                ; clear pins before proceeding
0007BC 6A8A               M         clrf    LATB
0007BE 6A8B               M         clrf    LATC
0007C0 6A8C               M         clrf    LATD
0007C2 EF?? F???          M         goto    PLOG
                          M 
0007C6                    M Exit
0007C6 0000               M         nop
                      00850         ChangeMode  key3, PLOG
  0000                    M         local Next, Exit
                          M 
0007C8 0E02               M         movlw   key3                ; poll for mode
0007CA 6210               M         cpfseq  KEY                 ; check this against key press
0007CC EF?? F???          M         goto    Exit
                          M 
0007D0                    M Next
0007D0 6A89               M         clrf    LATA                ; clear pins before proceeding
0007D2 6A8A               M         clrf    LATB
0007D4 6A8B               M         clrf    LATC
0007D6 6A8C               M         clrf    LATD
0007D8 EF?? F???          M         goto    PLOG
                          M 
0007DC                    M Exit
0007DC 0000               M         nop
                      00851         ChangeMode  key4, PLOG
  0000                    M         local Next, Exit
                          M 
0007DE 0E04               M         movlw   key4                ; poll for mode
0007E0 6210               M         cpfseq  KEY                 ; check this against key press
0007E2 EF?? F???          M         goto    Exit
                          M 
0007E6                    M Next
0007E6 6A89               M         clrf    LATA                ; clear pins before proceeding
0007E8 6A8A               M         clrf    LATB
0007EA 6A8B               M         clrf    LATC
0007EC 6A8C               M         clrf    LATD
0007EE EF?? F???          M         goto    PLOG
                          M 
0007F2                    M Exit
0007F2 0000               M         nop
                      00852         ChangeMode  key5, PLOG
  0000                    M         local Next, Exit
                          M 
0007F4 0E05               M         movlw   key5                ; poll for mode
0007F6 6210               M         cpfseq  KEY                 ; check this against key press
0007F8 EF?? F???          M         goto    Exit
                          M 
0007FC                    M Next
0007FC 6A89               M         clrf    LATA                ; clear pins before proceeding
0007FE 6A8A               M         clrf    LATB
000800 6A8B               M         clrf    LATC
000802 6A8C               M         clrf    LATD
000804 EF?? F???          M         goto    PLOG
                          M 
000808                    M Exit
000808 0000               M         nop
                      00853         ChangeMode  key6, PLOG
  0000                    M         local Next, Exit
                          M 
00080A 0E06               M         movlw   key6                ; poll for mode
00080C 6210               M         cpfseq  KEY                 ; check this against key press
00080E EF?? F???          M         goto    Exit
                          M 
000812                    M Next
000812 6A89               M         clrf    LATA                ; clear pins before proceeding
000814 6A8A               M         clrf    LATB
000816 6A8B               M         clrf    LATC
000818 6A8C               M         clrf    LATD
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00081A EF?? F???          M         goto    PLOG
                          M 
00081E                    M Exit
00081E 0000               M         nop
                      00854         ChangeMode  key7, PLOG
  0000                    M         local Next, Exit
                          M 
000820 0E08               M         movlw   key7                ; poll for mode
000822 6210               M         cpfseq  KEY                 ; check this against key press
000824 EF?? F???          M         goto    Exit
                          M 
000828                    M Next
000828 6A89               M         clrf    LATA                ; clear pins before proceeding
00082A 6A8A               M         clrf    LATB
00082C 6A8B               M         clrf    LATC
00082E 6A8C               M         clrf    LATD
000830 EF?? F???          M         goto    PLOG
                          M 
000834                    M Exit
000834 0000               M         nop
                      00855         ChangeMode  key8, PLOG
  0000                    M         local Next, Exit
                          M 
000836 0E09               M         movlw   key8                ; poll for mode
000838 6210               M         cpfseq  KEY                 ; check this against key press
00083A EF?? F???          M         goto    Exit
                          M 
00083E                    M Next
00083E 6A89               M         clrf    LATA                ; clear pins before proceeding
000840 6A8A               M         clrf    LATB
000842 6A8B               M         clrf    LATC
000844 6A8C               M         clrf    LATD
000846 EF?? F???          M         goto    PLOG
                          M 
00084A                    M Exit
00084A 0000               M         nop
                      00856         ChangeMode  key9, PLOG
  0000                    M         local Next, Exit
                          M 
00084C 0E0A               M         movlw   key9                ; poll for mode
00084E 6210               M         cpfseq  KEY                 ; check this against key press
000850 EF?? F???          M         goto    Exit
                          M 
000854                    M Next
000854 6A89               M         clrf    LATA                ; clear pins before proceeding
000856 6A8A               M         clrf    LATB
000858 6A8B               M         clrf    LATC
00085A 6A8C               M         clrf    LATD
00085C EF?? F???          M         goto    PLOG
                          M 
000860                    M Exit
000860 0000               M         nop
000862 D???           00857         bra HOLD_PERM_LOG
                      00858         
000864                00859 PLOG
000864 EC?? F???      00860         call    ClrLCD
                      00861         Display PermLog1
  0000                    M         local   loop
000868 0E??               M         movlw   upper PermLog1  ; Move Table<20:16>
00086A 6EF8               M         movwf   TBLPTRU
00086C 0E??               M         movlw   high PermLog1   ; Move Table<15:8>
00086E 6EF7               M         movwf   TBLPTRH
000870 0E??               M         movlw   low PermLog1    ; Move Table<7:0>
000872 6EF6               M         movwf   TBLPTRL
000874 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000876 50F5               M         movf    TABLAT, W
000878                    M loop
000878 EC?? F???          M         call    WR_DATA         ; write to LCD
00087C 000B               M         tblrd+*                 ; next row in table
00087E 50F5               M         movf    TABLAT, W
000880 E1??               M         bnz     loop
                      00862         
                      00863         ; find the key press value
000882 C010 FFE8      00864         movff   KEY, WREG
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000886 2AE8           00865         incf    WREG        ; W = KEY+1
000888 6E17           00866         movwf   temp
                      00867         
00088A 42E8           00868         rrncf   WREG        ; division by 4
00088C 9EE8           00869         bcf     WREG, 7     ; clear last bit, overflow from rotate
00088E 42E8           00870         rrncf   WREG        
000890 9EE8           00871         bcf     WREG, 7
000892 5E17           00872         subwf   temp        ; temp = (KEY+1) - (KEY+1)/4
000894 C017 FFE8      00873         movff   temp, WREG
000898 C017 F011      00874         movff   temp, temp_KEY
00089C 0D15           00875         mullw   d'21'       ; indexed as mutliples of 21
                      00876 
00089E                00877 displayNum
00089E C011 FFE8      00878         movff   temp_KEY, WREG
0008A2 0F30           00879         addlw   0x30
0008A4 EC?? F???      00880         call    WR_DATA
0008A8 0E3A           00881         movlw   ":"
0008AA EC?? F???      00882         call    WR_DATA
0008AE 0E20           00883         movlw   " "
0008B0 EC?? F???      00884         call    WR_DATA
                      00885         
0008B4 CFF3 F022      00886         movff   PRODL, L_EE
0008B8 0E00           00887         movlw   d'0'
0008BA 2622           00888         addwf   L_EE
                      00889         READEE  OP_sec, H_EE, L_EE
0008BC C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
0008C0 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
0008C4 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
0008C6 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
0008C8 80A6               M         bsf     EECON1, RD          ; read EEPROM
0008CA CFA8 F018          M         movff   EEDATA, OP_sec      ; put data into file
0008CE 2A22           00890         incf    L_EE
                      00891         READEE  OP_INT, H_EE, L_EE
0008D0 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
0008D4 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
0008D8 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
0008DA 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
0008DC 80A6               M         bsf     EECON1, RD          ; read EEPROM
0008DE CFA8 F019          M         movff   EEDATA, OP_INT      ; put data into file
0008E2 2A22           00892         incf    L_EE
0008E4 EC?? F???      00893         call    DisplayExeTime
0008E8 CFF3 F022      00894         movff   PRODL, L_EE
                      00895         
                      00896         ; reset eeprom to beginning
0008EC EC?? F???      00897         call    LCD_L2
0008F0 CFF3 F022      00898         movff   PRODL, L_EE
0008F4 EC?? F???      00899         call    DispOpRTC
                      00900         
0008F8                00901 HOLD_PLOG
0008F8 EC?? F???      00902         call    READ_KEY
                      00903         ChangeMode  key0, PERM_LOG      ; back to perm log menu
  0000                    M         local Next, Exit
                          M 
0008FC 0E0D               M         movlw   key0                ; poll for mode
0008FE 6210               M         cpfseq  KEY                 ; check this against key press
000900 EF?? F???          M         goto    Exit
                          M 
000904                    M Next
000904 6A89               M         clrf    LATA                ; clear pins before proceeding
000906 6A8A               M         clrf    LATB
000908 6A8B               M         clrf    LATC
00090A 6A8C               M         clrf    LATD
00090C EF?? F???          M         goto    PERM_LOG
                          M 
000910                    M Exit
000910 0000               M         nop
000912 D???           00904         bra HOLD_PLOG
                      00905         
                      00906 ;*******************************************************************************
                      00907 ; pc interface
                      00908 ;*******************************************************************************
                      00909 
000914                00910 PC_MODE
000914 EC?? F???      00911         call    ClrLCD
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00912         Display PC1
  0000                    M         local   loop
000918 0E??               M         movlw   upper PC1       ; Move Table<20:16>
00091A 6EF8               M         movwf   TBLPTRU
00091C 0E??               M         movlw   high PC1        ; Move Table<15:8>
00091E 6EF7               M         movwf   TBLPTRH
000920 0E??               M         movlw   low PC1         ; Move Table<7:0>
000922 6EF6               M         movwf   TBLPTRL
000924 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000926 50F5               M         movf    TABLAT, W
000928                    M loop
000928 EC?? F???          M         call    WR_DATA         ; write to LCD
00092C 000B               M         tblrd+*                 ; next row in table
00092E 50F5               M         movf    TABLAT, W
000930 E1??               M         bnz     loop
000932 EC?? F???      00913         call    LCD_L2
                      00914         Display PC2
  0000                    M         local   loop
000936 0E??               M         movlw   upper PC2       ; Move Table<20:16>
000938 6EF8               M         movwf   TBLPTRU
00093A 0E??               M         movlw   high PC2        ; Move Table<15:8>
00093C 6EF7               M         movwf   TBLPTRH
00093E 0E??               M         movlw   low PC2         ; Move Table<7:0>
000940 6EF6               M         movwf   TBLPTRL
000942 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000944 50F5               M         movf    TABLAT, W
000946                    M loop
000946 EC?? F???          M         call    WR_DATA         ; write to LCD
00094A 000B               M         tblrd+*                 ; next row in table
00094C 50F5               M         movf    TABLAT, W
00094E E1??               M         bnz     loop
000950 CFF9 F03A      00915         movff   PCL, PC_PCL
000954 CFFA F03B      00916         movff   PCLATH, PC_PCLATH
000958 CFFB F03C      00917         movff   PCLATU, PC_PCLATU
                      00918         
00095C                00919 HOLD_PC
00095C EC?? F???      00920         call    READ_KEY
                      00921         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
000960 0E0D               M         movlw   key0                ; poll for mode
000962 6210               M         cpfseq  KEY                 ; check this against key press
000964 EF?? F???          M         goto    Exit
                          M 
000968                    M Next
000968 6A89               M         clrf    LATA                ; clear pins before proceeding
00096A 6A8A               M         clrf    LATB
00096C 6A8B               M         clrf    LATC
00096E 6A8C               M         clrf    LATD
000970 EF?? F???          M         goto    STANDBY
                          M 
000974                    M Exit
000974 0000               M         nop
                      00922         ChangeMode  keyH, PC_TRANSFER
  0000                    M         local Next, Exit
                          M 
000976 0E0E               M         movlw   keyH                ; poll for mode
000978 6210               M         cpfseq  KEY                 ; check this against key press
00097A EF?? F???          M         goto    Exit
                          M 
00097E                    M Next
00097E 6A89               M         clrf    LATA                ; clear pins before proceeding
000980 6A8A               M         clrf    LATB
000982 6A8B               M         clrf    LATC
000984 6A8C               M         clrf    LATD
000986 EF?? F???          M         goto    PC_TRANSFER
                          M 
00098A                    M Exit
00098A 0000               M         nop
00098C D???           00923         bra     HOLD_PC
                      00924 
00098E                00925 PC_TRANSFER
00098E 6839           00926         setf    transferring
000990 EC?? F???      00927         call    ClrLCD
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00928         Display PCTransfer
  0000                    M         local   loop
000994 0E??               M         movlw   upper PCTransfer ; Move Table<20:16>
000996 6EF8               M         movwf   TBLPTRU
000998 0E??               M         movlw   high PCTransfer ; Move Table<15:8>
00099A 6EF7               M         movwf   TBLPTRH
00099C 0E??               M         movlw   low PCTransfer  ; Move Table<7:0>
00099E 6EF6               M         movwf   TBLPTRL
0009A0 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0009A2 50F5               M         movf    TABLAT, W
0009A4                    M loop
0009A4 EC?? F???          M         call    WR_DATA         ; write to LCD
0009A8 000B               M         tblrd+*                 ; next row in table
0009AA 50F5               M         movf    TABLAT, W
0009AC E1??               M         bnz     loop
                      00929         ;call   DataUSART
0009AE 6A39           00930         clrf    transferring
0009B0 D???           00931         bra     HOLD_PC
                      00932         
                      00933 ;*******************************************************************************
                      00934 ; subroutines
                      00935 ;*******************************************************************************
                      00936 
0009B2                00937 RTC_INIT
                      00938         ; set sda and scl to high
0009B2 9882           00939         bcf     PORTC, 4
0009B4 9682           00940         bcf     PORTC, 3
0009B6 8894           00941         bsf     TRISC, 4
0009B8 8694           00942         bsf     TRISC, 3
                      00943         
0009BA EC?? F???      00944         call    i2c_common_setup
                      00945         ;call   SET_TIME
Warning[203]: Found opcode in column 1. (return)
0009BE 0012           00946 return
                      00947         
0009C0                00948 SAVE_TIME   
                      00949         rtc_read    0x02        ; hours
0009C0 0E02               M     movlw   0x02
0009C2 6E??               M     movwf   regaddress
0009C4 EC?? F???          M     call    read_rtc
0009C8 C??? FFE8          M     movff   datachar, WREG
0009CC EC?? F???          M     call    rtc_convert
0009D0 EC?? F???      00950         call    WriteEE_RTC
                      00951         rtc_read    0x01        ; minutes
0009D4 0E01               M     movlw   0x01
0009D6 6E??               M     movwf   regaddress
0009D8 EC?? F???          M     call    read_rtc
0009DC C??? FFE8          M     movff   datachar, WREG
0009E0 EC?? F???          M     call    rtc_convert
0009E4 EC?? F???      00952         call    WriteEE_RTC
                      00953         rtc_read    0x06        ; years
0009E8 0E06               M     movlw   0x06
0009EA 6E??               M     movwf   regaddress
0009EC EC?? F???          M     call    read_rtc
0009F0 C??? FFE8          M     movff   datachar, WREG
0009F4 EC?? F???          M     call    rtc_convert
0009F8 EC?? F???      00954         call    WriteEE_RTC
                      00955         rtc_read    0x05        ; months
0009FC 0E05               M     movlw   0x05
0009FE 6E??               M     movwf   regaddress
000A00 EC?? F???          M     call    read_rtc
000A04 C??? FFE8          M     movff   datachar, WREG
000A08 EC?? F???          M     call    rtc_convert
000A0C EC?? F???      00956         call    WriteEE_RTC
                      00957         rtc_read    0x04        ; days
000A10 0E04               M     movlw   0x04
000A12 6E??               M     movwf   regaddress
000A14 EC?? F???          M     call    read_rtc
000A18 C??? FFE8          M     movff   datachar, WREG
000A1C EC?? F???          M     call    rtc_convert
000A20 EC?? F???      00958         call    WriteEE_RTC
Warning[203]: Found opcode in column 1. (return)
000A24 0012           00959 return
                      00960         
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A26                00961 SAVE_EXE_TIME
                      00962         
Warning[202]: Argument out of range.  Least significant bits used.
000A26 3818           00963         swapf   OP_sec, WREG    ; 100's seconds
000A28 6E17           00964         movwf   temp
000A2A 0E0F           00965         movlw   0x0F
000A2C 1617           00966         andwf   temp
000A2E C017 FFE8      00967         movff   temp, WREG
000A32 0F30           00968         addlw   0x30    
                      00969         WriteEE WREG, H_EE, L_EE
000A34 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000A38 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000A3C CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000A40 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000A42 D???               M         bra     $-2
                          M 
000A44 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000A46 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000A48 84A6               M         bsf     EECON1, WREN        ; enable write
000A4A 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000A4C 98A1               M         bcf     PIR2, EEIF
                          M 
000A4E 0E55               M         movlw   0x55
000A50 6EA7               M         movwf   EECON2              ; write 55h
000A52 0EAA               M         movlw   0xaa
000A54 6EA7               M         movwf   EECON2              ; write 0xaa
000A56 82A6               M         bsf     EECON1, WR          ; begin write
000A58 B2A6               M         btfsc   EECON1, WR
000A5A D???               M         bra     $-2
                          M 
000A5C 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000A5E 94A6               M         bcf     EECON1, WREN        ; disable writes
000A60 2A22           00970         incf    L_EE
                      00971         
000A62 C018 F017      00972         movff   OP_sec, temp    ; 10's seconds
000A66 0E0F           00973         movlw   0x0F
000A68 1617           00974         andwf   temp            ; Temp = lower nibble of Op_sec
000A6A C017 FFE8      00975         movff   temp, WREG      ; W = Temp
000A6E 0F30           00976         addlw   0x30            ; Convert to ASCII
                      00977         WriteEE WREG, H_EE, L_EE
000A70 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000A74 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000A78 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000A7C B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000A7E D???               M         bra     $-2
                          M 
000A80 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000A82 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000A84 84A6               M         bsf     EECON1, WREN        ; enable write
000A86 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000A88 98A1               M         bcf     PIR2, EEIF
                          M 
000A8A 0E55               M         movlw   0x55
000A8C 6EA7               M         movwf   EECON2              ; write 55h
000A8E 0EAA               M         movlw   0xaa
000A90 6EA7               M         movwf   EECON2              ; write 0xaa
000A92 82A6               M         bsf     EECON1, WR          ; begin write
000A94 B2A6               M         btfsc   EECON1, WR
000A96 D???               M         bra     $-2
                          M 
000A98 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000A9A 94A6               M         bcf     EECON1, WREN        ; disable writes
000A9C 2A22           00978         incf    L_EE
                      00979         
Warning[202]: Argument out of range.  Least significant bits used.
000A9E 3819           00980         swapf   OP_INT, WREG    ;1's seconds
000AA0 6E17           00981         movwf   temp
000AA2 0E0F           00982         movlw   0x0f
000AA4 1617           00983         andwf   temp
000AA6 C017 FFE8      00984         movff   temp, WREG
000AAA 0F30           00985         addlw   0x30
                      00986         WriteEE WREG, H_EE, L_EE
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000AAC C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000AB0 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000AB4 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000AB8 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000ABA D???               M         bra     $-2
                          M 
000ABC 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000ABE 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000AC0 84A6               M         bsf     EECON1, WREN        ; enable write
000AC2 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000AC4 98A1               M         bcf     PIR2, EEIF
                          M 
000AC6 0E55               M         movlw   0x55
000AC8 6EA7               M         movwf   EECON2              ; write 55h
000ACA 0EAA               M         movlw   0xaa
000ACC 6EA7               M         movwf   EECON2              ; write 0xaa
000ACE 82A6               M         bsf     EECON1, WR          ; begin write
000AD0 B2A6               M         btfsc   EECON1, WR
000AD2 D???               M         bra     $-2
                          M 
000AD4 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000AD6 94A6               M         bcf     EECON1, WREN        ; disable writes
000AD8 2A22           00987         incf    L_EE
Warning[203]: Found opcode in column 1. (return)
000ADA 0012           00988 return
                      00989         
                      00990                 
000ADC                00991 DISPLAY_RTC     
                      00992         ; display data in this format hh/minmin/yy yy/mm/dd
                      00993         rtc_read    0x02            ; 0x02 from DS1307 - hours
000ADC 0E02               M     movlw   0x02
000ADE 6E??               M     movwf   regaddress
000AE0 EC?? F???          M     call    read_rtc
000AE4 C??? FFE8          M     movff   datachar, WREG
000AE8 EC?? F???          M     call    rtc_convert
000AEC C??? FFE8      00994         movff   tens_digit,WREG
000AF0 EC?? F???      00995         call    WR_DATA
000AF4 C??? FFE8      00996         movff   ones_digit,WREG
000AF8 EC?? F???      00997         call    WR_DATA
000AFC 0E68           00998         movlw   "h"
000AFE EC?? F???      00999         call    WR_DATA
                      01000         
                      01001         rtc_read    0x01            ; 0x01 from DS1307 - minutes
000B02 0E01               M     movlw   0x01
000B04 6E??               M     movwf   regaddress
000B06 EC?? F???          M     call    read_rtc
000B0A C??? FFE8          M     movff   datachar, WREG
000B0E EC?? F???          M     call    rtc_convert
000B12 C??? FFE8      01002         movff   tens_digit,WREG
000B16 EC?? F???      01003         call    WR_DATA
000B1A C??? FFE8      01004         movff   ones_digit,WREG
000B1E EC?? F???      01005         call    WR_DATA
                      01006         
                      01007         rtc_read    0x00            ; 0x00 from DS1307 - seconds
000B22 0E00               M     movlw   0x00
000B24 6E??               M     movwf   regaddress
000B26 EC?? F???          M     call    read_rtc
000B2A C??? FFE8          M     movff   datachar, WREG
000B2E EC?? F???          M     call    rtc_convert
000B32 C??? FFE8      01008         movff   tens_digit,WREG
000B36 EC?? F???      01009         call    WR_DATA
000B3A C??? FFE8      01010         movff   ones_digit,WREG
000B3E EC?? F???      01011         call    WR_DATA
000B42 0E20           01012         movlw   " "
000B44 EC?? F???      01013         call    WR_DATA
                      01014         
                      01015         rtc_read    0x06            ; 0x06 from DS1307 - years
000B48 0E06               M     movlw   0x06
000B4A 6E??               M     movwf   regaddress
000B4C EC?? F???          M     call    read_rtc
000B50 C??? FFE8          M     movff   datachar, WREG
000B54 EC?? F???          M     call    rtc_convert
000B58 C??? FFE8      01016         movff   tens_digit,WREG
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000B5C EC?? F???      01017         call    WR_DATA
000B60 C??? FFE8      01018         movff   ones_digit,WREG
000B64 EC?? F???      01019         call    WR_DATA
000B68 0E2F           01020         movlw   "/"
000B6A EC?? F???      01021         call    WR_DATA
                      01022         
                      01023         rtc_read    0x05            ; 0x05 from DS1307 - months
000B6E 0E05               M     movlw   0x05
000B70 6E??               M     movwf   regaddress
000B72 EC?? F???          M     call    read_rtc
000B76 C??? FFE8          M     movff   datachar, WREG
000B7A EC?? F???          M     call    rtc_convert
000B7E C??? FFE8      01024         movff   tens_digit,WREG
000B82 EC?? F???      01025         call    WR_DATA
000B86 C??? FFE8      01026         movff   ones_digit,WREG
000B8A EC?? F???      01027         call    WR_DATA
000B8E 0E2F           01028         movlw   "/"
000B90 EC?? F???      01029         call    WR_DATA
                      01030         
                      01031         rtc_read    0x04            ; 0x04 from DS1307 - days
000B94 0E04               M     movlw   0x04
000B96 6E??               M     movwf   regaddress
000B98 EC?? F???          M     call    read_rtc
000B9C C??? FFE8          M     movff   datachar, WREG
000BA0 EC?? F???          M     call    rtc_convert
000BA4 C??? FFE8      01032         movff   tens_digit,WREG
000BA8 EC?? F???      01033         call    WR_DATA
000BAC C??? FFE8      01034         movff   ones_digit,WREG
000BB0 EC?? F???      01035         call    WR_DATA
Warning[203]: Found opcode in column 1. (return)
000BB4 0012           01036 return
                      01037         
000BB6                01038 SET_TIME
                      01039         rtc_resetAll
                          M 
000BB6 6A??               M     clrf    databyte
000BB8 0E06               M     movlw   6
000BBA 6E??               M     movwf   regaddress ;start at 6 and go down, and set all to 0
                          M 
Warning[207]: Found label after column 1. (del_loop0)
000BBC                    M     del_loop0
000BBC EC?? F???          M     call    write_rtc
000BC0 2E??               M     decfsz  regaddress
000BC2 D???               M     bra     del_loop0
000BC4 EC?? F???          M     call    write_rtc ;sets registers 0-6 to zero
Warning[207]: Found label after column 1. (_loopknt)
  00000001                M     _loopknt set _loopknt+1
                      01040         
                      01041         rtc_set 0x00,   b'10000000'
000BC8 0E00               M     movlw   0x00
000BCA 6E??               M     movwf   regaddress
000BCC 0E80               M     movlw   b'10000000'
000BCE 6E??               M     movwf   databyte
000BD0 EC?? F???          M     call    write_rtc
                      01042 
                      01043         rtc_set 0x06,   b'00010111'             ; Year 17
000BD4 0E06               M     movlw   0x06
000BD6 6E??               M     movwf   regaddress
000BD8 0E17               M     movlw   b'00010111'
000BDA 6E??               M     movwf   databyte
000BDC EC?? F???          M     call    write_rtc
                      01044         rtc_set 0x05,   b'00000010'             ; Month 2
000BE0 0E05               M     movlw   0x05
000BE2 6E??               M     movwf   regaddress
000BE4 0E02               M     movlw   b'00000010'
000BE6 6E??               M     movwf   databyte
000BE8 EC?? F???          M     call    write_rtc
                      01045         rtc_set 0x04,   b'00011001'             ; Date 19
000BEC 0E04               M     movlw   0x04
000BEE 6E??               M     movwf   regaddress
000BF0 0E19               M     movlw   b'00011001'
000BF2 6E??               M     movwf   databyte
000BF4 EC?? F???          M     call    write_rtc
                      01046         rtc_set 0x02,   b'00010001'             ; Hours 11
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000BF8 0E02               M     movlw   0x02
000BFA 6E??               M     movwf   regaddress
000BFC 0E11               M     movlw   b'00010001'
000BFE 6E??               M     movwf   databyte
000C00 EC?? F???          M     call    write_rtc
                      01047         rtc_set 0x01,   b'00111000'             ; Minutes 38
000C04 0E01               M     movlw   0x01
000C06 6E??               M     movwf   regaddress
000C08 0E38               M     movlw   b'00111000'
000C0A 6E??               M     movwf   databyte
000C0C EC?? F???          M     call    write_rtc
                      01048         rtc_set 0x00,   b'00000000'             ; Seconds 0
000C10 0E00               M     movlw   0x00
000C12 6E??               M     movwf   regaddress
000C14 0E00               M     movlw   b'00000000'
000C16 6E??               M     movwf   databyte
000C18 EC?? F???          M     call    write_rtc
Warning[203]: Found opcode in column 1. (return)
000C1C 0012           01049 return
                      01050         
000C1E                01051 INIT_USART
000C1E 0E0F           01052         movlw   15      ; baud rate 9600
000C20 6EAF           01053         movwf   SPBRG
000C22 6AAC           01054         clrf    TXSTA
                      01055         
000C24 6AAB           01056         clrf    RCSTA
000C26 8EAB           01057         bsf     RCSTA,SPEN      ; asynchronous serial port enable
000C28 88AB           01058         bsf     RCSTA,CREN      ; continous receive
                      01059         
000C2A 8AAC           01060         bsf     TXSTA, TXEN     ; transmit enabled
000C2C 0012           01061         return
                      01062 
                      01063 ;DataUSART
                      01064 ;       
                      01065 ;       movlw   0x02
                      01066 ;       call    USART_WAIT
                      01067 ;       movlw   0x0D
                      01068 ;       call    USART_WAIT
                      01069 ;       
                      01070 ;       movlw   d'21'       ; start of permanent logs
                      01071 ;       movff   w, L_EE
                      01072 ;       TransferTable   PCLog1
                      01073 ;       
                      01074 ;       ; display time here
                      01075 ;;      rtc_read        0x02
                      01076 ;;              movf        tens_digit, W
                      01077 ;;        andlw       b'00000001'
                      01078 ;;        addlw       0x30
                      01079 ;;        call        TransmitWaitUSART
                      01080 ;;        movf        ones_digit, W
                      01081 ;;        call        TransmitWaitUSART
                      01082 ;;              movlw           ":"
                      01083 ;;              call            TransmitWaitUSART
                      01084 ;;              ; Dispay minutes
                      01085 ;;              rtc_read        0x01
                      01086 ;;              call        SendRTC_USART
                      01087 ;;              ; Dispay AM/PM
                      01088 ;;              rtc_read        0x02
                      01089 ;;        movlw       "P"
                      01090 ;;        btfss       tens_digit, 1
                      01091 ;;        movlw       "A"
                      01092 ;;        call        TransmitWaitUSART
                      01093 ;;        movlw       "M"
                      01094 ;;        call        TransmitWaitUSART
                      01095 ;;              movlw           " "
                      01096 ;;        call        TransmitWaitUSART
                      01097 ;;              ; Display month
                      01098 ;;              rtc_read        0x05
                      01099 ;;              call        SendRTC_USART
                      01100 ;;              movlw           0x2F            ; ASCII '/'
                      01101 ;;              call            TransmitWaitUSART
                      01102 ;;              ; Display day
                      01103 ;;              rtc_read        0x04
                      01104 ;;              call        SendRTC_USART
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01105 ;;              movlw           0x2F            ; ASCII '/'
                      01106 ;;              call            TransmitWaitUSART
                      01107 ;;              ; Display year
                      01108 ;;              rtc_read        0x06
                      01109 ;;              call        SendRTC_USART
                      01110 ;       
                      01111 ;       call    USART_LINE
                      01112 ;       call    USART_LINE
                      01113 ;       
                      01114 ;       clrf    counter
                      01115 ;       incf    counter
                      01116 ;
                      01117 ;USART_TRANSFER
                      01118 ;       movlw   d'21'
                      01119 ;       mulwf   counter
                      01120 ;       movff   PRODL, L_EE
                      01121 ;       movlw   d'9'
                      01122 ;       addwf   L_EE
                      01123 ;       READEE  OP_sec, H_EE, L_EE
                      01124 ;       incf    L_EE
                      01125 ;       READEE  OP_INT, H_EE, L_EE
                      01126 ;       incf    L_EE
                      01127 ;       ; call  TransferTime
                      01128 ;       
                      01129 ;       ; send rtc
                      01130 ;       movlw   0x09
                      01131 ;       call    USART_WAIT
                      01132 ;       movff   PRODL, L_EE
                      01133 ;       ;call   TransferRTC
                      01134 ;       call    USART_LINE
                      01135 ;       
                      01136 ;       
                      01137 ;       
                      01138 ;       
                      01139 ;USART_WAIT
                      01140 ;       movwf   TXREG
                      01141 ;       btfss   TXSTA,1
                      01142 ;       goto    $-2
                      01143 ;       return
                      01144 ;
                      01145 ;USART_LINE
                      01146 ;       movlw   0x0A
                      01147 ;       call    USART_WAIT
                      01148 ;       movlw   0x0D
                      01149 ;       call    USART_WAIT
                      01150 ;       return
                      01151         
                      01152         
000C2E                01153 Delay5us
000C2E 0E78           01154         movlw   d'120'
000C30 6E1C           01155         movwf   d5us
                      01156 
000C32                01157 loop5us
000C32 2E1C           01158         decfsz  d5us
000C34 EF?? F???      01159         goto    loop5us
000C38 0000           01160         nop
000C3A 0012           01161         return
                      01162 
000C3C                01163 Delay200us
000C3C 0EA4           01164         movlw   0xA4
000C3E 6E1D           01165         movwf   d200us
                      01166 
000C40                01167 loop200us
000C40 2E1D           01168         decfsz  d200us
000C42 EF?? F???      01169         goto    loop200us
000C46 0000           01170         nop
000C48 0012           01171         return
                      01172 
000C4A                01173 Delay50ms
000C4A 0EF9           01174         movlw   0xF9
000C4C 6E1E           01175         movwf   d50ms
                      01176 
000C4E                01177 loop50ms
000C4E EC?? F???      01178         call    Delay200us
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C52 2E1E           01179         decfsz  d50ms
                      01180 
000C54                01181 Cycles
000C54 EF?? F???      01182         goto    loop50ms
000C58 EC?? F???      01183         call    Delay200us
000C5C 0012           01184         return
                      01185 
000C5E                01186 WriteEE_RTC
                      01187         WriteEE tens_digit, H_EE, L_EE
000C5E C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000C62 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000C66 C??? FFA8          M         movff   tens_digit, EEDATA  ; set word
                          M 
000C6A B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000C6C D???               M         bra     $-2
                          M 
000C6E 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000C70 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000C72 84A6               M         bsf     EECON1, WREN        ; enable write
000C74 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000C76 98A1               M         bcf     PIR2, EEIF
                          M 
000C78 0E55               M         movlw   0x55
000C7A 6EA7               M         movwf   EECON2              ; write 55h
000C7C 0EAA               M         movlw   0xaa
000C7E 6EA7               M         movwf   EECON2              ; write 0xaa
000C80 82A6               M         bsf     EECON1, WR          ; begin write
000C82 B2A6               M         btfsc   EECON1, WR
000C84 D???               M         bra     $-2
                          M 
000C86 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000C88 94A6               M         bcf     EECON1, WREN        ; disable writes
000C8A 2A22           01188         incf    L_EE
                      01189         WriteEE ones_digit, H_EE, L_EE
000C8C C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000C90 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000C94 C??? FFA8          M         movff   ones_digit, EEDATA  ; set word
                          M 
000C98 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000C9A D???               M         bra     $-2
                          M 
000C9C 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000C9E 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000CA0 84A6               M         bsf     EECON1, WREN        ; enable write
000CA2 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000CA4 98A1               M         bcf     PIR2, EEIF
                          M 
000CA6 0E55               M         movlw   0x55
000CA8 6EA7               M         movwf   EECON2              ; write 55h
000CAA 0EAA               M         movlw   0xaa
000CAC 6EA7               M         movwf   EECON2              ; write 0xaa
000CAE 82A6               M         bsf     EECON1, WR          ; begin write
000CB0 B2A6               M         btfsc   EECON1, WR
000CB2 D???               M         bra     $-2
                          M 
000CB4 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000CB6 94A6               M         bcf     EECON1, WREN        ; disable writes
000CB8 2A22           01190         incf    L_EE
000CBA 0012           01191         return
                      01192 
000CBC                01193 ClearEEPROM_21
000CBC 6A21           01194         clrf    H_EE
000CBE 6A22           01195         clrf    L_EE
000CC0 6820           01196         setf    clear_EE
000CC2 6A15           01197         clrf    counter
000CC4                01198 ClearNext
                      01199         WriteEE         clear_EE, H_EE, L_EE
000CC4 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000CC8 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000CCC C020 FFA8          M         movff   clear_EE, EEDATA    ; set word
                          M 
000CD0 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000CD2 D???               M         bra     $-2
                          M 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000CD4 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000CD6 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000CD8 84A6               M         bsf     EECON1, WREN        ; enable write
000CDA 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000CDC 98A1               M         bcf     PIR2, EEIF
                          M 
000CDE 0E55               M         movlw   0x55
000CE0 6EA7               M         movwf   EECON2              ; write 55h
000CE2 0EAA               M         movlw   0xaa
000CE4 6EA7               M         movwf   EECON2              ; write 0xaa
000CE6 82A6               M         bsf     EECON1, WR          ; begin write
000CE8 B2A6               M         btfsc   EECON1, WR
000CEA D???               M         bra     $-2
                          M 
000CEC 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000CEE 94A6               M         bcf     EECON1, WREN        ; disable writes
000CF0 2A15           01200         incf            counter
000CF2 2A22           01201         incf            L_EE
000CF4 0E15           01202         movlw           d'21'
000CF6 6215           01203         cpfseq          counter
000CF8 EF?? F???      01204         goto            ClearNext
000CFC 6A21           01205         clrf            H_EE
000CFE 6A22           01206         clrf            L_EE
000D00 0012           01207         return
                      01208         
000D02                01209 READ_KEY
000D02 A281           01210         btfss   PORTB, 1        ; check for keypad interrupt
000D04 EF?? F???      01211         goto    READ_KEY
000D08 3881           01212         swapf   PORTB, W
000D0A 0B0F           01213         andlw   0x0F
000D0C 6E10           01214         movwf   KEY
000D0E B281           01215         btfsc   PORTB, 1
000D10 EF?? F???      01216         goto    $-2
000D14 0012           01217         return
                      01218 
000D16                01219 READ_KEY_TIME
000D16 EC?? F???      01220         call        LCD_L2          ; go to second line to print RTC
                      01221 
                      01222         ; display the time
000D1A EC?? F???      01223         call    DISPLAY_RTC
                      01224 
000D1E A281           01225         btfss       PORTB, 1    ; keypad interrupt
000D20 EF?? F???      01226         goto        READ_KEY_TIME
000D24 3881           01227         swapf       PORTB, W    ; copy PORTB7:4 to W3:0
000D26 0B0F           01228         andlw       0x0F        ; only want W3:0
000D28 6E10           01229         movwf       KEY         ; write this value to the KEY
000D2A B281           01230         btfsc       PORTB, 1    ; wait for release
000D2C EF?? F???      01231         goto        $-2         ; go back one instruction
000D30 0012           01232         return
                      01233 
000D32                01234 DisplayExeTime
                      01235         READEE  REG_EE, H_EE, L_EE
000D32 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D36 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D3A 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D3C 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D3E 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D40 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000D44 0EFF           01236         movlw   0xFF
000D46 6223           01237         cpfseq  REG_EE
000D48 EF?? F???      01238         goto    NoSkipDispExeTime
                      01239         Display NoData
  0000                    M         local   loop
000D4C 0E??               M         movlw   upper NoData    ; Move Table<20:16>
000D4E 6EF8               M         movwf   TBLPTRU
000D50 0E??               M         movlw   high NoData     ; Move Table<15:8>
000D52 6EF7               M         movwf   TBLPTRH
000D54 0E??               M         movlw   low NoData      ; Move Table<7:0>
000D56 6EF6               M         movwf   TBLPTRL
000D58 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000D5A 50F5               M         movf    TABLAT, W
000D5C                    M loop
000D5C EC?? F???          M         call    WR_DATA         ; write to LCD
000D60 000B               M         tblrd+*                 ; next row in table
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D62 50F5               M         movf    TABLAT, W
000D64 E1??               M         bnz     loop
000D66 0EFF           01240         movlw   0xFF
000D68 6023           01241         cpfslt  REG_EE
000D6A EF?? F???      01242         goto    SkipDispExeTime
000D6E 0012           01243         return
                      01244 
000D70                01245 NoSkipDispExeTime
                      01246         READEE  WREG, H_EE, L_EE
000D70 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D74 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D78 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D7A 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D7C 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D7E CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000D82 EC?? F???      01247         call    WR_DATA
000D86 2A22           01248         incf    L_EE
                      01249         
                      01250         READEE  WREG, H_EE, L_EE
000D88 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D8C C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D90 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D92 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D94 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D96 CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000D9A EC?? F???      01251         call    WR_DATA
000D9E 2A22           01252         incf    L_EE
                      01253         
                      01254         READEE  WREG, H_EE, L_EE
000DA0 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000DA4 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000DA8 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000DAA 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000DAC 80A6               M         bsf     EECON1, RD          ; read EEPROM
000DAE CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000DB2 EC?? F???      01255         call    WR_DATA
000DB6 2A22           01256         incf    L_EE
                      01257 
000DB8 0E73           01258         movlw   0x73            ; Write 's'
000DBA EC?? F???      01259         call    WR_DATA
000DBE EC?? F???      01260         call    LCD_L2
000DC2                01261 SkipDispExeTime
000DC2 0012           01262         return
                      01263 
000DC4                01264 DispOpRTC
                      01265         READEE  REG_EE, H_EE, L_EE
000DC4 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000DC8 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000DCC 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000DCE 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000DD0 80A6               M         bsf     EECON1, RD          ; read EEPROM
000DD2 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000DD6 0EFF           01266         movlw   0xff
000DD8 6223           01267         cpfseq  REG_EE
000DDA EF?? F???      01268         goto    NoSkipDispOpRTC
                      01269         Display NoData
  0000                    M         local   loop
000DDE 0E??               M         movlw   upper NoData    ; Move Table<20:16>
000DE0 6EF8               M         movwf   TBLPTRU
000DE2 0E??               M         movlw   high NoData     ; Move Table<15:8>
000DE4 6EF7               M         movwf   TBLPTRH
000DE6 0E??               M         movlw   low NoData      ; Move Table<7:0>
000DE8 6EF6               M         movwf   TBLPTRL
000DEA 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000DEC 50F5               M         movf    TABLAT, W
000DEE                    M loop
000DEE EC?? F???          M         call    WR_DATA         ; write to LCD
000DF2 000B               M         tblrd+*                 ; next row in table
000DF4 50F5               M         movf    TABLAT, W
000DF6 E1??               M         bnz     loop
000DF8 0EFF           01270         movlw   0xff
000DFA 6023           01271         cpfslt  REG_EE
000DFC EF?? F???      01272         goto    SkipDispOpRTC
                      01273 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  19:58:53         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000E00                01274 NoSkipDispOpRTC
                      01275         READEE  REG_EE, H_EE, L_EE
000E00 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E04 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E08 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E0A 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E0C 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E0E CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000E12 C023 FFE8      01276         movff   REG_EE, WREG
000E16 EC?? F???      01277         call    WR_DATA
000E1A 2A22           01278         incf    L_EE
                      01279         
                      01280         READEE  REG_EE, H_EE, L_EE
000E1C C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E20 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E24 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E26 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E28 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E2A CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000E2E C023 FFE8      01281         movff   REG_EE, WREG
000E32 EC?? F???      01282         call    WR_DATA
000E36 2A22           01283         incf    L_EE
                      01284 
000E38 0E68           01285         movlw   "h"
000E3A EC?? F???      01286         call    WR_DATA
                      01287         
000E3E EC?? F???      01288         call    DispOpRTC_Helper
                      01289         
000E42 0E20           01290         movlw   " "
000E44 EC?? F???      01291         call    WR_DATA
                      01292         
000E48 EC?? F???      01293         call    DispOpRTC_Helper
000E4C 0E2F           01294         movlw   "/"
000E4E EC?? F???      01295         call    WR_DATA
                      01296 
000E52 EC?? F???      01297         call    DispOpRTC_Helper
000E56 0E2F           01298         movlw   "/"
000E58 EC?? F???      01299         call    WR_DATA
000E5C EC?? F???      01300         call    DispOpRTC_Helper
000E60                01301 SkipDispOpRTC
000E60 0012           01302                 return
000E62                01303 DispOpRTC_Helper
                      01304         READEE          REG_EE, H_EE, L_EE
000E62 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E66 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E6A 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E6C 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E6E 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E70 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000E74 C023 FFE8      01305         movff           REG_EE, WREG
000E78 EC?? F???      01306         call            WR_DATA
000E7C 2A22           01307         incf            L_EE
                      01308         READEE          REG_EE, H_EE, L_EE
000E7E C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E82 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E86 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E88 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E8A 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E8C CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000E90 C023 FFE8      01309         movff           REG_EE, WREG
000E94 EC?? F???      01310         call            WR_DATA
000E98 2A22           01311         incf            L_EE
000E9A 0012           01312         return
Warning[205]: Found directive in column 1. (end)
                      01313 end

Errors   :     0
Warnings :    42 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

