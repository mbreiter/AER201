MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*******************************************************************************
                      00002 ;
                      00003 ;    Filename: main.asm
                      00004 ;    Date: 2 Feb 2017
                      00005 ;    File Version: 1.0
                      00006 ;    Author: Matthew Reiter
                      00007 ;    Course: AER201
                      00008 ;    Description: botL - a pastic bottle sorting machine
                      00009  
                      00010 ;*******************************************************************************
                      00011 ; configuration settings
                      00012 ;*******************************************************************************
                      00013 
Warning[205]: Found directive in column 1. (list)
                      00014 list    P=18F4620, F=INHX32, C=160, N=80, ST=OFF, MM=OFF, R=DEC
                      00015 #include <p18f4620.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Nov 17 2016
                      00005 ;  MPASM PIC18F4620 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      01440         LIST
                      00016 #include <lcd.inc>
  0000                00001     extern      InitLCD,WrtLCD,ClrLCD,ClkLCD,WR_INS,WR_DATA,LCD_L1,LCD_L2,delay5ms
                      00002 
                      00003 
                      00004 
                      00005 
                      00006 
                      00007 
                      00017 #include <rtc.inc>
Warning[205]: Found directive in column 1. (extern)
  0000                00001 extern write_rtc,read_rtc,rtc_convert,i2c_common_setup, regaddress, databyte, datachar,tens_digit,ones_digit
                      00002 
Warning[205]: Found directive in column 1. (variable)
  0000                00003 variable _loopknt=0
                      00004 
                      00005 rtc_resetAll macro
                      00006 
                      00007     clrf    databyte
                      00008     movlw   6
                      00009     movwf   regaddress ;start at 6 and go down, and set all to 0
                      00010 
                      00011     del_loop#v(_loopknt)
                      00012     call    write_rtc
                      00013     decfsz  regaddress
                      00014     bra     del_loop#v(_loopknt)
                      00015     call    write_rtc ;sets registers 0-6 to zero
                      00016     _loopknt set _loopknt+1
Warning[205]: Found directive in column 1. (endm)
                      00017 endm
                      00018 
                      00019 rtc_set macro addliteral,datliteral
                      00020     movlw   addliteral
                      00021     movwf   regaddress
                      00022     movlw   datliteral
                      00023     movwf   databyte
                      00024     call    write_rtc
Warning[205]: Found directive in column 1. (endm)
                      00025 endm
                      00026 
                      00027 rtc_read macro addliteral
                      00028     movlw   addliteral
                      00029     movwf   regaddress
                      00030     call    read_rtc
                      00031     movff   datachar, WREG
                      00032     call    rtc_convert
Warning[205]: Found directive in column 1. (endm)
                      00033 endm
                      00018 #include <colour.inc>
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                00001     extern      i2c_common_setup, regaddress, databyte, datachar, READ_COLOUR_I2C, WRITE_COLOUR_I2C, WR_DATA, data_colourL, data_col
                            ourH, delay5ms
                      00002 
                      00003 ;    #define TCS34725_ADDRESS          (0x29)
                      00004 ;
                      00005 ;    #define TCS34725_COMMAND_BIT      (0x80)
                      00006 ;
                      00007 ;    #define TCS34725_ENABLE           (0x00)
                      00008 ;    #define TCS34725_ENABLE_AIEN      (0x10)    /* RGBC Interrupt Enable */
                      00009 ;    #define TCS34725_ENABLE_WEN       (0x08)    /* Wait enable - Writing 1 activates the wait timer */
                      00010 ;    #define TCS34725_ENABLE_AEN       (0x02)    /* RGBC Enable - Writing 1 actives the ADC, 0 disables it */
                      00011 ;    #define TCS34725_ENABLE_PON       (0x01)    /* Power on - Writing 1 activates the internal oscillator, 0 disables it */
                      00012 ;    #define TCS34725_ATIME            (0x01)    /* Integration time */
                      00013 ;    #define TCS34725_WTIME            (0x03)    /* Wait time (if TCS34725_ENABLE_WEN is asserted) */
                      00014 ;    #define TCS34725_WTIME_2_4MS      (0xFF)    /* WLONG0 = 2.4ms   WLONG1 = 0.029s */
                      00015 ;    #define TCS34725_WTIME_204MS      (0xAB)    /* WLONG0 = 204ms   WLONG1 = 2.45s  */
                      00016 ;    #define TCS34725_WTIME_614MS      (0x00)    /* WLONG0 = 614ms   WLONG1 = 7.4s   */
                      00017 ;    #define TCS34725_AILTL            (0x04)    /* Clear channel lower interrupt threshold */
                      00018 ;    #define TCS34725_AILTH            (0x05)
                      00019 ;    #define TCS34725_AIHTL            (0x06)    /* Clear channel upper interrupt threshold */
                      00020 ;    #define TCS34725_AIHTH            (0x07)
                      00021 ;    #define TCS34725_PERS             (0x0C)    /* Persistence register - basic SW filtering mechanism for interrupts */
                      00022 ;    #define TCS34725_PERS_NONE        (0b0000)  /* Every RGBC cycle generates an interrupt                                */
                      00023 ;    #define TCS34725_PERS_1_CYCLE     (0b0001)  /* 1 clean channel value outside threshold range generates an interrupt   */
                      00024 ;    #define TCS34725_PERS_2_CYCLE     (0b0010)  /* 2 clean channel values outside threshold range generates an interrupt  */
                      00025 ;    #define TCS34725_PERS_3_CYCLE     (0b0011)  /* 3 clean channel values outside threshold range generates an interrupt  */
                      00026 ;    #define TCS34725_PERS_5_CYCLE     (0b0100)  /* 5 clean channel values outside threshold range generates an interrupt  */
                      00027 ;    #define TCS34725_PERS_10_CYCLE    (0b0101)  /* 10 clean channel values outside threshold range generates an interrupt */
                      00028 ;    #define TCS34725_PERS_15_CYCLE    (0b0110)  /* 15 clean channel values outside threshold range generates an interrupt */
                      00029 ;    #define TCS34725_PERS_20_CYCLE    (0b0111)  /* 20 clean channel values outside threshold range generates an interrupt */
                      00030 ;    #define TCS34725_PERS_25_CYCLE    (0b1000)  /* 25 clean channel values outside threshold range generates an interrupt */
                      00031 ;    #define TCS34725_PERS_30_CYCLE    (0b1001)  /* 30 clean channel values outside threshold range generates an interrupt */
                      00032 ;    #define TCS34725_PERS_35_CYCLE    (0b1010)  /* 35 clean channel values outside threshold range generates an interrupt */
                      00033 ;    #define TCS34725_PERS_40_CYCLE    (0b1011)  /* 40 clean channel values outside threshold range generates an interrupt */
                      00034 ;    #define TCS34725_PERS_45_CYCLE    (0b1100)  /* 45 clean channel values outside threshold range generates an interrupt */
                      00035 ;    #define TCS34725_PERS_50_CYCLE    (0b1101)  /* 50 clean channel values outside threshold range generates an interrupt */
                      00036 ;    #define TCS34725_PERS_55_CYCLE    (0b1110)  /* 55 clean channel values outside threshold range generates an interrupt */
                      00037 ;    #define TCS34725_PERS_60_CYCLE    (0b1111)  /* 60 clean channel values outside threshold range generates an interrupt */
                      00038 ;    #define TCS34725_CONFIG           (0x0D)
                      00039 ;    #define TCS34725_CONFIG_WLONG     (0x02)    /* Choose between short and long (12x) wait times via TCS34725_WTIME */
                      00040 ;    #define TCS34725_CONTROL          (0x0F)    /* Set the gain level for the sensor */
                      00041 ;    #define TCS34725_ID               (0x12)    /* 0x44 = TCS34721/TCS34725, 0x4D = TCS34723/TCS34727 */
                      00042 ;    #define TCS34725_STATUS           (0x13)
                      00043 ;    #define TCS34725_STATUS_AINT      (0x10)    /* RGBC Clean channel interrupt */
                      00044 ;    #define TCS34725_STATUS_AVALID    (0x01)    /* Indicates that the RGBC channels have completed an integration cycle */
                      00045 ;    #define TCS34725_CDATAL           (0x14)    /* Clear channel data */
                      00046 ;    #define TCS34725_CDATAH           (0x15)
                      00047 ;    #define TCS34725_RDATAL           (0x16)    /* Red channel data */
                      00048 ;    #define TCS34725_RDATAH           (0x17)
                      00049 ;    #define TCS34725_GDATAL           (0x18)    /* Green channel data */
                      00050 ;    #define TCS34725_GDATAH           (0x19)
                      00051 ;    #define TCS34725_BDATAL           (0x1A)    /* Blue channel data */
                      00052 ;    #define TCS34725_BDATAH           (0x1B)
                      00053 
                      00054 
Warning[207]: Found label after column 1. (COLOUR_INIT)
                      00055     COLOUR_INIT macro
                      00056         COLOUR_WRITE    0x00, 0x01 ; Enable Register (0x00), Power ON (0x01)
                      00057         call    delay5ms
                      00058         COLOUR_WRITE    0x00, 0x02 ; Enable Register (0x00), RGBC enable (0x02)
                      00059         call    delay5ms
                      00060         COLOUR_WRITE    0x01, 0xff ; Timing Register (0x01), 2.4ms (0xff) cycle
                      00061         call    delay5ms
                      00062         COLOUR_WRITE    0x0f, 0x03 ; Control Register (0x0f), 60x gain (0x03)
                      00063         call    delay5ms
                      00064     endm
                      00065     
Warning[207]: Found label after column 1. (COLOUR_READ)
                      00066     COLOUR_READ  macro  address
                      00067         movlw   address
                      00068         movwf   regaddress
                      00069         call    READ_COLOUR_I2C
                      00070     endm
                      00071     
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[207]: Found label after column 1. (COLOUR_WRITE)
                      00072     COLOUR_WRITE macro address, datliteral
                      00073         movlw   address
                      00074         movwf   regaddress
                      00075         movlw   datliteral
                      00076         movwf   databyte
                      00077         call    WRITE_COLOUR_I2C
                      00078     endm
                      00079     
Warning[207]: Found label after column 1. (COLOUR_GET_DATA)
                      00080     COLOUR_GET_DATA macro clearL, clearH, redL, redH, greenL, greenH, blueL, blueH
                      00081         call    delay5ms
                      00082         
                      00083         COLOUR_READ 0x14    ; read clear colour address low, command bits set later
                      00084         movff   databyte, clearL
                      00085         COLOUR_READ 0x15    ; read clear colour address high, command bits set later
                      00086         movff   databyte, clearH
                      00087                 
                      00088         COLOUR_READ 0x16    ; read red colour address low, command bits set later
                      00089         movff   databyte, redL
                      00090         COLOUR_READ 0x17    ; read red colour address high, command bits set later
                      00091         movff   databyte, redH
                      00092         
                      00093         COLOUR_READ 0x18    ; read green colour address low, command bits set later
                      00094         movff   databyte, greenL
                      00095         COLOUR_READ 0x19    ; read green colour address high, command bits set later
                      00096         movff   databyte, greenH
                      00097         
                      00098         COLOUR_READ 0x1a    ; read blue colour address low, command bits set later
                      00099         movff   databyte, blueL
                      00100         COLOUR_READ 0x1b    ; read blue colour address high, command bits set later
                      00101         movff   databyte, blueH
                      00102     endm
                      00103     
                      00019 
                      00020     CONFIG OSC=HS, FCMEN=OFF, IESO=OFF
                      00021     CONFIG PWRT = OFF, BOREN = SBORDIS, BORV = 3
                      00022     CONFIG WDT = OFF, WDTPS = 32768
                      00023     CONFIG MCLRE = ON, LPT1OSC = OFF, PBADEN = OFF
                      00024     CONFIG STVREN = ON, LVP = OFF, XINST = OFF
                      00025     CONFIG DEBUG = OFF
                      00026     CONFIG CP0 = OFF, CP1 = OFF, CP2 = OFF, CP3 = OFF
                      00027     CONFIG CPB = OFF, CPD = OFF
                      00028     CONFIG WRT0 = OFF, WRT1 = OFF, WRT2 = OFF, WRT3 = OFF
                      00029     CONFIG WRTB = OFF, WRTC = OFF, WRTD = OFF
                      00030     CONFIG EBTR0 = OFF, EBTR1 = OFF, EBTR2 = OFF, EBTR3 = OFF
                      00031     CONFIG EBTRB = OFF
                      00032 
                      00033 ;*******************************************************************************
                      00034 ; variable and constants
                      00035 ;*******************************************************************************
                      00036     CODE
                      00037             
                      00038     cblock 0x00
  00000000            00039         key1
  00000001            00040         key2
  00000002            00041         key3
  00000003            00042         keyA
  00000004            00043         key4
  00000005            00044         key5
  00000006            00045         key6
  00000007            00046         keyB
  00000008            00047         key7
  00000009            00048         key8
  0000000A            00049         key9
  0000000B            00050         keyC
  0000000C            00051         keyS
  0000000D            00052         key0
  0000000E            00053         keyH
  0000000F            00054         keyD
  00000010            00055         KEY
  00000011            00056         temp_KEY
  00000012            00057         KEY_ISR
  00000013            00058         temp_S  
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000014            00059         temp_W
  00000015            00060         counter
  00000016            00061         counter2
  00000017            00062         temp
  00000018            00063         OP_sec
  00000019            00064         OP_INT
  0000001A            00065         temp_ISR
  0000001B            00066         delayR
  0000001C            00067         d5us
  0000001D            00068         d200us
  0000001E            00069         d50ms
  0000001F            00070         inExecution
  00000020            00071         clear_EE
  00000021            00072         H_EE    
  00000022            00073         L_EE    
  00000023            00074         REG_EE  
  00000024            00075         tempH_EE
  00000025            00076         tempL_EE
  00000026            00077         tempL_EEC
  00000027            00078         MAX_EE   
  00000028            00079         READ_EE
  00000029            00080         last_log
  0000002A            00081         startHt
  0000002B            00082         startHo
  0000002C            00083         startMt
  0000002D            00084         startMo
  0000002E            00085         endHt
  0000002F            00086         endHo
  00000030            00087         endMt
  00000031            00088         endMo
  00000032            00089         LED_Count
  00000033            00090         SkipCount
  00000034            00091         exe_sec
  00000035            00092         exe_int
  00000036            00093         timer_H
  00000037            00094         timer_L
  00000038            00095         convert_buffer
  00000039            00096         transferring
  0000003A            00097         PC_PCL
  0000003B            00098         PC_PCLATH
  0000003C            00099         PC_PCLATU
  0000003D            00100         TIMCNT
  0000003E            00101         CPCNT
  0000003F            00102         TDATA
  00000040            00103         ESKA
  00000041            00104         ESKA_CAP
  00000042            00105         YOP
  00000043            00106         YOP_CAP
  00000044            00107         CLEAR:2
  00000046            00108         RED:2
  00000048            00109         GREEN:2
  0000004A            00110         BLUE:2
  0000004C            00111         temp_colour:2
                      00112     endc
                      00113     
  0000                00114     extern tens_digit, ones_digit
                      00115     
                      00116 ;*******************************************************************************
                      00117 ; tables
                      00118 ;*******************************************************************************
Warning[207]: Found label after column 1. (Welcome)
000000 6F62 4C74 0000 00119     Welcome     db          "botL", 0
Warning[207]: Found label after column 1. (Team)
000006 726D 6820 206C 00120     Team        db          "mr hl hg", 0
       6768 0000 
Warning[207]: Found label after column 1. (StandBy)
000010 7453 6E61 6264 00121     StandBy     db          "Standby", 0
       0079 
Warning[207]: Found label after column 1. (Log1)
000018 6954 656D 003A 00122     Log1        db          "Time:",0
Warning[207]: Found label after column 1. (Log2)
00001E 3231 303A 2030 00123     Log2        db          "12:00 2/3/14", 0
       2F32 2F33 3431 
       0000 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[207]: Found label after column 1. (LogInfo1)
00002C 6153 6576 3A64 00124     LogInfo1    db          "Saved:", 0
       0000 
Warning[207]: Found label after column 1. (LogInfo2)
000034 6142 6B63 3C20 00125     LogInfo2    db          "Back <0>", 0
       3E30 0000 
Warning[207]: Found label after column 1. (PermLog1)
00003E 6550 6D72 6E61 00126     PermLog1    db          "Permanent Logs", 0
       6E65 2074 6F4C 
       7367 0000 
Warning[207]: Found label after column 1. (PermLog2)
00004E 313C 203E 2E2E 00127     PermLog2    db          "<1> ... <9>", 0    
       202E 393C 003E 
Warning[207]: Found label after column 1. (Exe1)
00005A 6F53 7472 6E69 00128     Exe1        db          "Sorting...", 0
       2E67 2E2E 0000 
Warning[207]: Found label after column 1. (Exe2)
000066 4E45 2044 2A3C 00129     Exe2        db          "END <*>", 0
       003E 
Warning[207]: Found label after column 1. (PC1)
00006E 4350 4920 746E 00130     PC1         db          "PC Interface", 0
       7265 6166 6563 
       0000 
Warning[207]: Found label after column 1. (PC2)
00007C 6542 6967 206E 00131     PC2         db          "Begin <#>", 0
       233C 003E 
Warning[207]: Found label after column 1. (PCTransfer)
000086 7254 6E61 6673 00132     PCTransfer  db          "Transferring...", 0
       7265 6972 676E 
       2E2E 002E 
Warning[207]: Found label after column 1. (Stopped)
000096 7453 706F 6570 00133     Stopped     db          "Stopped", 0
       0064 
Warning[207]: Found label after column 1. (Exe_Time)
00009E 6954 656D 203A 00134     Exe_Time    db          "Time: ", 0
       0000 
Warning[207]: Found label after column 1. (SAVE)
0000A6 6153 6976 676E 00135     SAVE        db          "Saving...", 0
       2E2E 002E 
Warning[207]: Found label after column 1. (Safety)
0000B0 6153 6566 7974 00136     Safety      db          "Safety check...", 0
       6320 6568 6B63 
       2E2E 002E 
Warning[207]: Found label after column 1. (NoData)
0000C0 2F4E 0041      00137     NoData      db          "N/A", 0
Warning[207]: Found label after column 1. (PCLog1)
0000C4 6954 656D 6120 00138     PCLog1      db          "Time and Date:", 0
       646E 4420 7461 
       3A65 0000 
                      00139         
                      00140 ;*******************************************************************************
                      00141 ; macros
                      00142 ;*******************************************************************************
                      00143 
                      00144 TransferTable macro table
                      00145         local loop
                      00146         
                      00147         movlw   upper table
                      00148         movwf   TBLPTRU
                      00149         movlw   high table
                      00150         movwf   TBLPTRH
                      00151         movlw   low table
                      00152         movwf   TBLPTRL
                      00153         tblrd*
                      00154         movff   TABLAT, WREG
                      00155 loop
                      00156         call    USART_WAIT
                      00157         tblrd+*
                      00158         movff   TABLAT, WREG
                      00159         bnz     loop
                      00160         endm
                      00161         
                      00162 ConfigLCD   macro
                      00163           movlw     b'00101000'    ; 4 bits, 2 lines,5X7 dots seems to work best instead of the above setting
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00164           call      WR_INS
                      00165 
                      00166           movlw     b'00001100'    ; display on/off
                      00167           call      WR_INS
                      00168          ; movlw     B'00000110'    ; Entry mode
                      00169          ; call      WR_INS
                      00170           movlw     b'00000001'    ; Clear ram
                      00171           call      WR_INS
                      00172           endm
                      00173         
                      00174 movMSB  macro   port
                      00175         andlw   0xF0
                      00176         iorwf   port, f
                      00177         iorlw   0x0F
                      00178         andwf   port, f
                      00179         endm
                      00180 
                      00181 Delay50N macro count, N
                      00182         local   loop
                      00183         movlw   N
                      00184         movwf   count
                      00185 
                      00186 loop
                      00187         call    Delay50ms
                      00188         decfsz  count
                      00189         goto    loop
                      00190         endm
                      00191 
                      00192 Display macro   Message
                      00193         local   loop
                      00194         movlw   upper Message   ; Move Table<20:16>
                      00195         movwf   TBLPTRU
                      00196         movlw   high Message    ; Move Table<15:8>
                      00197         movwf   TBLPTRH
                      00198         movlw   low Message     ; Move Table<7:0>
                      00199         movwf   TBLPTRL
                      00200         tblrd*                  ; Read byte from TBLPTRL to TABLAT
                      00201         movf    TABLAT, W
                      00202 loop
                      00203         call    WR_DATA         ; write to LCD
                      00204         tblrd+*                 ; next row in table
                      00205         movf    TABLAT, W
                      00206         bnz     loop
                      00207         endm
                      00208 
                      00209 DisplayLog  macro   addrH, addrL
                      00210             local   Again, Finish
                      00211             
                      00212             clrf    SkipCount
                      00213             clrf    MAX_EE
                      00214 
                      00215             ; Check if there is No Data first
                      00216             READEE      REG_EE, addrH, addrL
                      00217             movlw       0xFF
                      00218             cpfseq      REG_EE
                      00219             goto        Again
                      00220             Display     NoData
                      00221             goto        Finish
                      00222 Again
                      00223             ; Put a space every 3 Writes
                      00224             movlw       d'3'
                      00225             cpfslt      SkipCount
                      00226             cpfslt      MAX_EE
                      00227             goto        Finish
                      00228 
                      00229             ; read EEPROM
                      00230             READEE      REG_EE, addrH, addrL
                      00231             btfsc       REG_EE, 7       ; if bit 7 set then done
                      00232             goto        Finish
                      00233 Finish
                      00234             endm
                      00235             
                      00236 ;TransferLog macro   addrH, addrL
                      00237         
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00238 
                      00239 incf_BCD    macro   BCD
                      00240         local ones, endBCD
                      00241         movff   BCD, temp
                      00242         
                      00243         ;process ones digit
                      00244         movlw   0x0f
                      00245         andwf   temp
                      00246         movlw   d'9'
                      00247         
                      00248         ;skip if ones digit is 9
                      00249         cpfseq  temp
                      00250         goto    ones
                      00251         
                      00252         movlw   b'00010000'
                      00253         addwf   BCD
                      00254         movlw   0xf0
                      00255         andwf   BCD
                      00256         movlw   0xa0
                      00257         cpfslt  BCD
                      00258         
                      00259         clrf    BCD
                      00260         goto    endBCD
                      00261         
                      00262 ones
                      00263         incf    BCD
                      00264         goto    endBCD
                      00265 endBCD
                      00266         nop
                      00267         endm
                      00268         
                      00269 SUB16   macro   x, y        ; does not modify x nor y
                      00270         local   RESULTS
                      00271         movff   y+1, WREG   ; move high y into working register
                      00272         subwf   x+1, 0      ; do subtraction xH - yH => w
                      00273         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
                      00274         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                      00275         
                      00276         movff   y+0, WREG
                      00277         subwf   x+0, 0  
                      00278 RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
                      00279         endm
                      00280 
                      00281 WriteRTC    macro
                      00282         movff   tens_digit, WREG
                      00283         call    WR_DATA
                      00284         movff   ones_digit, WREG
                      00285         call    WR_DATA
                      00286         endm
                      00287 
                      00288 WriteEE macro   word, addH, addL
                      00289         movff   addH, EEADRH        ; High address
                      00290         movff   addL, EEADR         ; Low address
                      00291         movff   word, EEDATA        ; set word
                      00292 
                      00293         btfsc   EECON1, WR          ; test if WR=0, skip if so
                      00294         bra     $-2
                      00295 
                      00296         bcf     EECON1, EEPGD       ; Point to data memory
                      00297         bcf     EECON1, CFGS        ; Access EEPROM
                      00298         bsf     EECON1, WREN        ; enable write
                      00299         bcf     INTCON, GIE         ; disable interrupts during write
                      00300         bcf     PIR2, EEIF
                      00301 
                      00302         movlw   0x55
                      00303         movwf   EECON2              ; write 55h
                      00304         movlw   0xaa
                      00305         movwf   EECON2              ; write 0xaa
                      00306         bsf     EECON1, WR          ; begin write
                      00307         btfsc   EECON1, WR
                      00308         bra     $-2
                      00309 
                      00310         bsf     INTCON, GIE         ; enable interrupts after write
                      00311         bcf     EECON1, WREN        ; disable writes
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00312         endm
                      00313 
                      00314 READEE  macro   file, addH, addL
                      00315         movff   addH, EEADRH        ; read to high
                      00316         movff   addL, EEADR         ; read to low
                      00317         bcf     EECON1, EEPGD       ; point to data memory
                      00318         bcf     EECON1, CFGS        ; access to EEPROM
                      00319         bsf     EECON1, RD          ; read EEPROM
                      00320         movff   EEDATA, file        ; put data into file
                      00321         endm
                      00322 
                      00323 ChangeMode  macro   ModeId, NextMode
                      00324         local Next, Exit
                      00325 
                      00326         movlw   ModeId              ; poll for mode
                      00327         cpfseq  KEY                 ; check this against key press
                      00328         goto    Exit
                      00329 
                      00330 Next
                      00331         clrf    LATA                ; clear pins before proceeding
                      00332         clrf    LATB
                      00333         clrf    LATC
                      00334         clrf    LATD
                      00335         goto    NextMode
                      00336 
                      00337 Exit
                      00338         nop
                      00339         endm
                      00340 
                      00341 saveContext macro
                      00342     movff   STATUS, temp_S          ; save STATUS first
                      00343     movwf   temp_W                  ; save W
                      00344     endm
                      00345 
                      00346 restoreContext macro
                      00347     swapf   temp_W, W               ; restore W first
                      00348     movff   temp_S, STATUS          ; restore STATUS last without affecting W
                      00349     endm
                      00350 ;*******************************************************************************
                      00351 ; reset vector and isrs
                      00352 ;*******************************************************************************
                      00353         ORG     0x000               ; processor reset vector
000000 EF?? F???      00354         goto    INIT                ; go to beginning of program
                      00355 
                      00356         ORG     0x008
000008 EF?? F???      00357         goto    ISR_HIGH
                      00358 
                      00359         ORG     0x018
000018 EF?? F???      00360         goto    ISR_LOW
                      00361 
00001C                00362 ISR_HIGH
                      00363         saveContext
00001C CFD8 F013          M     movff   STATUS, temp_S          ; save STATUS first
000020 6E14               M     movwf   temp_W                  ; save W
                      00364         
                      00365         ; displaying the execution time in seconds
Warning[202]: Argument out of range.  Least significant bits used.
000022 3818           00366         swapf   OP_sec, WREG    ; 100's seconds
000024 6E17           00367         movwf   temp
000026 0E0F           00368         movlw   0x0F
000028 1617           00369         andwf   temp
00002A C017 FFE8      00370         movff   temp, WREG
00002E 0F30           00371         addlw   0x30
000030 EC?? F???      00372         call    WR_DATA
                      00373 
000034 C018 F017      00374         movff   OP_sec, temp    ; 10's seconds
000038 0E0F           00375         movlw   0x0F
00003A 1617           00376         andwf   temp            ; Temp = lower nibble of Op_sec
00003C C017 FFE8      00377         movff   temp, WREG      ; W = Temp
000040 0F30           00378         addlw   0x30            ; Convert to ASCII
000042 EC?? F???      00379         call    WR_DATA
                      00380         
Warning[202]: Argument out of range.  Least significant bits used.
000046 3819           00381         swapf   OP_INT, WREG    ;1's seconds
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000048 6E17           00382         movwf   temp
00004A 0E0F           00383         movlw   0x0f
00004C 1617           00384         andwf   temp
00004E C017 FFE8      00385         movff   temp, WREG
000052 0F30           00386         addlw   0x30
000054 EC?? F???      00387         call    WR_DATA
                      00388 
000058 0E73           00389         movlw   0x73            ; Write 's'
00005A EC?? F???      00390         call    WR_DATA
00005E EC?? F???      00391         call    LCD_L2
                      00392 
                      00393         ;reset timer 
000062 0EC6           00394         movlw   0xc6
000064 6ED7           00395         movwf   TMR0H
000066 0E3E           00396         movlw   0x3e
000068 6ED6           00397         movwf   TMR0L
                      00398                 
                      00399         ;timer interrupt
00006A A4F2           00400         btfss   INTCON, TMR0IF
00006C EF?? F???      00401         goto    END_ISR_HIGH
                      00402         
                      00403         incf_BCD    OP_INT
  0000                    M         local ones, endBCD
000070 C019 F017          M         movff   OP_INT, temp
                          M         
                          M         ;process ones digit
000074 0E0F               M         movlw   0x0f
000076 1617               M         andwf   temp
000078 0E09               M         movlw   d'9'
                          M         
                          M         ;skip if ones digit is 9
00007A 6217               M         cpfseq  temp
00007C EF?? F???          M         goto    ones
                          M         
000080 0E10               M         movlw   b'00010000'
000082 2619               M         addwf   OP_INT
000084 0EF0               M         movlw   0xf0
000086 1619               M         andwf   OP_INT
000088 0EA0               M         movlw   0xa0
00008A 6019               M         cpfslt  OP_INT
                          M         
00008C 6A19               M         clrf    OP_INT
00008E EF?? F???          M         goto    endBCD
                          M         
000092                    M ones
000092 2A19               M         incf    OP_INT
000094 EF?? F???          M         goto    endBCD
000098                    M endBCD
000098 0000               M         nop
00009A 0E00           00404         movlw   d'0'
00009C 6219           00405         cpfseq  OP_INT
00009E EF?? F???      00406         goto    END_ISR_HIGH
                      00407         incf_BCD    OP_sec
  0000                    M         local ones, endBCD
0000A2 C018 F017          M         movff   OP_sec, temp
                          M         
                          M         ;process ones digit
0000A6 0E0F               M         movlw   0x0f
0000A8 1617               M         andwf   temp
0000AA 0E09               M         movlw   d'9'
                          M         
                          M         ;skip if ones digit is 9
0000AC 6217               M         cpfseq  temp
0000AE EF?? F???          M         goto    ones
                          M         
0000B2 0E10               M         movlw   b'00010000'
0000B4 2618               M         addwf   OP_sec
0000B6 0EF0               M         movlw   0xf0
0000B8 1618               M         andwf   OP_sec
0000BA 0EA0               M         movlw   0xa0
0000BC 6018               M         cpfslt  OP_sec
                          M         
0000BE 6A18               M         clrf    OP_sec
0000C0 EF?? F???          M         goto    endBCD
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         
0000C4                    M ones
0000C4 2A18               M         incf    OP_sec
0000C6 EF?? F???          M         goto    endBCD
0000CA                    M endBCD
0000CA 0000               M         nop
                      00408 
0000CC                00409 END_ISR_HIGH
0000CC 94F2           00410         bcf     INTCON, TMR0IF
                      00411         restoreContext
0000CE 3814               M     swapf   temp_W, W               ; restore W first
0000D0 C013 FFD8          M     movff   temp_S, STATUS          ; restore STATUS last without affecting W
0000D4 0010           00412         retfie
                      00413 
0000D6                00414 ISR_LOW
                      00415         saveContext
0000D6 CFD8 F013          M     movff   STATUS, temp_S          ; save STATUS first
0000DA 6E14               M     movwf   temp_W                  ; save W
                      00416         ; KEYPAD INTERRUPT
0000DC A0F0           00417         btfss           INTCON3, INT1IF                 ; If KEYPAD interrupt, skip return
0000DE EF?? F???      00418         goto            END_ISR_LOW
                      00419 
                      00420         ;Check operation status
                      00421 ;       movlw           0xff                                    ; If in operation, skip return
                      00422 ;       cpfseq          InExecution
                      00423 ;       goto            END_ISR_LOW
                      00424 
                      00425         ; Process KEY
0000E2 3881           00426         swapf           PORTB, W                                ; Read PORTB<7:4> into W<3:0>
0000E4 0B0F           00427         andlw           0x0f
0000E6 6E12           00428         movwf           KEY_ISR                                 ; Put W into KEY_ISR
                      00429 ;       movlw           keyS                                    ; Put keyStar into W to compare to KEY_ISR
                      00430 ;       cpfseq          KEY_ISR                                 ; If key was '*', skip return
0000E8 EF?? F???      00431         goto            END_ISR_LOW
                      00432 
                      00433         ; Reset program counter
0000EC 6AFF           00434         clrf            TOSU
0000EE 6AFE           00435         clrf            TOSH
0000F0 6AFD           00436         clrf            TOSL
                      00437 
0000F2                00438 END_ISR_LOW
0000F2 90F0           00439         bcf                     INTCON3, INT1IF         ; Clear flag for next interrupt
                      00440         restoreContext
0000F4 3814               M     swapf   temp_W, W               ; restore W first
0000F6 C013 FFD8          M     movff   temp_S, STATUS          ; restore STATUS last without affecting W
0000FA 0010           00441         retfie
                      00442 
                      00443 ;*******************************************************************************
                      00444 ; main
                      00445 ;*******************************************************************************
0000FC                00446 INIT
                      00447         ; i/o
0000FC 0EFF           00448         movlw   b'11111111'
0000FE 6E92           00449         movwf   TRISA
000100 0EFF           00450         movlw   b'11111111'
000102 6E93           00451         movwf   TRISB               ; keypad
000104 0E00           00452         movlw   b'00000000'
000106 6E94           00453         movwf   TRISC
000108 0E00           00454         movlw   b'00000000'
00010A 6E95           00455         movwf   TRISD
00010C 0E07           00456         movlw   b'00000111'
00010E 6E96           00457         movwf   TRISE
                      00458 
                      00459         ; analog/digital pins
000110 0E0F           00460         movlw   b'00001111'     ; Set all AN pins to Digital
000112 6EC1           00461         movwf   ADCON1
                      00462 
                      00463         ; clear ports
000114 6A89           00464         clrf    LATA
000116 6A8A           00465         clrf    LATB
                      00466 ;       bcf     TRISC, SCL
                      00467 ;       bcf     TRISC, SDA
000118 6A8B           00468         clrf    LATC
00011A 6A8C           00469         clrf    LATD
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00011C 6A8D           00470         clrf    LATE
                      00471         
00011E 0E00           00472         movlw   b'00000000'
000120 6EC2           00473         movwf   ADCON0
000122 0EFF           00474         movlw   b'11111111'
000124 6EC1           00475         movwf   ADCON1
                      00476         
                      00477         ; initializations
000126 EC?? F???      00478         call    InitLCD
                      00479         ConfigLCD
00012A 0E28               M           movlw     b'00101000'    ; 4 bits, 2 lines,5X7 dots seems to work best instead of the above setting
00012C EC?? F???          M           call      WR_INS
                          M 
000130 0E0C               M           movlw     b'00001100'    ; display on/off
000132 EC?? F???          M           call      WR_INS
                          M          ; movlw     B'00000110'    ; Entry mode
                          M          ; call      WR_INS
000136 0E01               M           movlw     b'00000001'    ; Clear ram
000138 EC?? F???          M           call      WR_INS
00013C EC?? F???      00480         call    RTC_INIT
000140 EC?? F???      00481         call    Delay50ms
                      00482         COLOUR_INIT
                          M         COLOUR_WRITE    0x00, 0x01 ; Enable Register (0x00), Power ON (0x01)
000144 0E00               M         movlw   0x00
000146 6E??               M         movwf   regaddress
000148 0E01               M         movlw   0x01
00014A 6E??               M         movwf   databyte
00014C EC?? F???          M         call    WRITE_COLOUR_I2C
000150 EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x00, 0x02 ; Enable Register (0x00), RGBC enable (0x02)
000154 0E00               M         movlw   0x00
000156 6E??               M         movwf   regaddress
000158 0E02               M         movlw   0x02
00015A 6E??               M         movwf   databyte
00015C EC?? F???          M         call    WRITE_COLOUR_I2C
000160 EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x01, 0xff ; Timing Register (0x01), 2.4ms (0xff) cycle
000164 0E01               M         movlw   0x01
000166 6E??               M         movwf   regaddress
000168 0EFF               M         movlw   0xff
00016A 6E??               M         movwf   databyte
00016C EC?? F???          M         call    WRITE_COLOUR_I2C
000170 EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x0f, 0x03 ; Control Register (0x0f), 60x gain (0x03)
000174 0E0F               M         movlw   0x0f
000176 6E??               M         movwf   regaddress
000178 0E03               M         movlw   0x03
00017A 6E??               M         movwf   databyte
00017C EC?? F???          M         call    WRITE_COLOUR_I2C
000180 EC?? F???          M         call    delay5ms
000184 EC?? F???      00483         call    INIT_USART
                      00484 
                      00485         ; interrupts
000188 6AD0           00486         clrf    RCON
00018A 6AF2           00487         clrf    INTCON
00018C 6AF1           00488         clrf    INTCON2
00018E 6AF0           00489         clrf    INTCON3
000190 8ED0           00490         bsf     RCON, IPEN          ; priority mode
000192 8EF2           00491         bsf     INTCON, GIEH        ; permit global interrupts
000194 8CF2           00492         bsf     INTCON, GIEL
000196 8AF1           00493         bsf     INTCON2, INTEDG1    ; INTEDG1 on rising edge
000198 8AF2           00494         bsf     INTCON, TMR0IE      ; clear timer0 overflow interrupt flag
00019A 84F2           00495         bsf     INTCON, TMR0IF      ; clear timer0 overflow interrupt flag
00019C 84F1           00496         bsf     INTCON2, TMR0IP     ; set to high priority
00019E 86F0           00497         bsf     INTCON3, INT1IE
0001A0 9CF0           00498         bcf     INTCON3, INT1IP
                      00499         
                      00500         ; setting up timer to sychronize with 1 second clock intervals
0001A2 9ED5           00501         bcf     T0CON, TMR0ON
0001A4 9CD5           00502         bcf     T0CON, T08BIT
0001A6 9AD5           00503         bcf     T0CON, T0CS
0001A8 98D5           00504         bcf     T0CON, T0SE
0001AA 96D5           00505         bcf     T0CON, PSA
0001AC 94D5           00506         bcf     T0CON, T0PS2        ; set prescaling to 1:16. this allows for 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001AE 82D5           00507         bsf     T0CON, T0PS1        ; a preloading of ~50750 or 0xc63e. very
0001B0 80D5           00508         bsf     T0CON, T0PS0        ; good approximation within 3 minutes.
                      00509 
0001B2 6A21           00510         clrf    H_EE
0001B4 6A22           00511         clrf    L_EE
0001B6 6A??           00512         clrf    tens_digit
0001B8 6A??           00513         clrf    ones_digit
0001BA 6A40           00514         clrf    ESKA
0001BC 6A41           00515         clrf    ESKA_CAP
0001BE 6A42           00516         clrf    YOP
0001C0 6A43           00517         clrf    YOP_CAP
0001C2 6A44           00518         clrf    CLEAR+0
0001C4 6A45           00519         clrf    CLEAR+1 
0001C6 6A46           00520         clrf    RED+0
0001C8 6A47           00521         clrf    RED+1
0001CA 6A48           00522         clrf    GREEN+0
0001CC 6A49           00523         clrf    GREEN+1
0001CE 6A4A           00524         clrf    BLUE+0
0001D0 6A4B           00525         clrf    BLUE+1
                      00526         
0001D2 0EF2           00527         movlw     b'11110010'    ; Set required keypad inputs
0001D4 6E93           00528         movwf     TRISB
                      00529         
0001D6 EC?? F???      00530         call    ClrLCD
                      00531         Display Welcome
  0000                    M         local   loop
0001DA 0E??               M         movlw   upper Welcome   ; Move Table<20:16>
0001DC 6EF8               M         movwf   TBLPTRU
0001DE 0E??               M         movlw   high Welcome    ; Move Table<15:8>
0001E0 6EF7               M         movwf   TBLPTRH
0001E2 0E??               M         movlw   low Welcome     ; Move Table<7:0>
0001E4 6EF6               M         movwf   TBLPTRL
0001E6 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0001E8 50F5               M         movf    TABLAT, W
0001EA                    M loop
0001EA EC?? F???          M         call    WR_DATA         ; write to LCD
0001EE 000B               M         tblrd+*                 ; next row in table
0001F0 50F5               M         movf    TABLAT, W
0001F2 E1??               M         bnz     loop
0001F4 EC?? F???      00532         call LCD_L2
                      00533         Display Team
  0000                    M         local   loop
0001F8 0E??               M         movlw   upper Team      ; Move Table<20:16>
0001FA 6EF8               M         movwf   TBLPTRU
0001FC 0E??               M         movlw   high Team       ; Move Table<15:8>
0001FE 6EF7               M         movwf   TBLPTRH
000200 0E??               M         movlw   low Team        ; Move Table<7:0>
000202 6EF6               M         movwf   TBLPTRL
000204 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000206 50F5               M         movf    TABLAT, W
000208                    M loop
000208 EC?? F???          M         call    WR_DATA         ; write to LCD
00020C 000B               M         tblrd+*                 ; next row in table
00020E 50F5               M         movf    TABLAT, W
000210 E1??               M         bnz     loop
                      00534         
                      00535         Delay50N delayR, 0x28
  0000                    M         local   loop
000212 0E28               M         movlw   0x28
000214 6E1B               M         movwf   delayR
                          M 
000216                    M loop
000216 EC?? F???          M         call    Delay50ms
00021A 2E1B               M         decfsz  delayR
00021C EF?? F???          M         goto    loop
                      00536 
                      00537 ;*******************************************************************************
                      00538 ; standby mode
                      00539 ;*******************************************************************************
000220                00540 STANDBY
000220 EC?? F???      00541         call    ClrLCD
                      00542         Display StandBy
  0000                    M         local   loop
000224 0E??               M         movlw   upper StandBy   ; Move Table<20:16>
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000226 6EF8               M         movwf   TBLPTRU
000228 0E??               M         movlw   high StandBy    ; Move Table<15:8>
00022A 6EF7               M         movwf   TBLPTRH
00022C 0E??               M         movlw   low StandBy     ; Move Table<7:0>
00022E 6EF6               M         movwf   TBLPTRL
000230 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000232 50F5               M         movf    TABLAT, W
000234                    M loop
000234 EC?? F???          M         call    WR_DATA         ; write to LCD
000238 000B               M         tblrd+*                 ; next row in table
00023A 50F5               M         movf    TABLAT, W
00023C E1??               M         bnz     loop
                      00543 
00023E                00544 HOLD_STANDBY
00023E EC?? F???      00545         call    READ_KEY_TIME
                      00546         ChangeMode key5, COLOUR_TEST
  0000                    M         local Next, Exit
                          M 
000242 0E05               M         movlw   key5                ; poll for mode
000244 6210               M         cpfseq  KEY                 ; check this against key press
000246 EF?? F???          M         goto    Exit
                          M 
00024A                    M Next
00024A 6A89               M         clrf    LATA                ; clear pins before proceeding
00024C 6A8A               M         clrf    LATB
00024E 6A8B               M         clrf    LATC
000250 6A8C               M         clrf    LATD
000252 EF?? F???          M         goto    COLOUR_TEST
                          M 
000256                    M Exit
000256 0000               M         nop
                      00547         ChangeMode keyA, EXECUTION
  0000                    M         local Next, Exit
                          M 
000258 0E03               M         movlw   keyA                ; poll for mode
00025A 6210               M         cpfseq  KEY                 ; check this against key press
00025C EF?? F???          M         goto    Exit
                          M 
000260                    M Next
000260 6A89               M         clrf    LATA                ; clear pins before proceeding
000262 6A8A               M         clrf    LATB
000264 6A8B               M         clrf    LATC
000266 6A8C               M         clrf    LATD
000268 EF?? F???          M         goto    EXECUTION
                          M 
00026C                    M Exit
00026C 0000               M         nop
                      00548         ChangeMode keyB, LOG
  0000                    M         local Next, Exit
                          M 
00026E 0E07               M         movlw   keyB                ; poll for mode
000270 6210               M         cpfseq  KEY                 ; check this against key press
000272 EF?? F???          M         goto    Exit
                          M 
000276                    M Next
000276 6A89               M         clrf    LATA                ; clear pins before proceeding
000278 6A8A               M         clrf    LATB
00027A 6A8B               M         clrf    LATC
00027C 6A8C               M         clrf    LATD
00027E EF?? F???          M         goto    LOG
                          M 
000282                    M Exit
000282 0000               M         nop
                      00549         ChangeMode keyC, PERM_LOG
  0000                    M         local Next, Exit
                          M 
000284 0E0B               M         movlw   keyC                ; poll for mode
000286 6210               M         cpfseq  KEY                 ; check this against key press
000288 EF?? F???          M         goto    Exit
                          M 
00028C                    M Next
00028C 6A89               M         clrf    LATA                ; clear pins before proceeding
00028E 6A8A               M         clrf    LATB
000290 6A8B               M         clrf    LATC
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000292 6A8C               M         clrf    LATD
000294 EF?? F???          M         goto    PERM_LOG
                          M 
000298                    M Exit
000298 0000               M         nop
                      00550         ChangeMode keyD, PC_MODE
  0000                    M         local Next, Exit
                          M 
00029A 0E0F               M         movlw   keyD                ; poll for mode
00029C 6210               M         cpfseq  KEY                 ; check this against key press
00029E EF?? F???          M         goto    Exit
                          M 
0002A2                    M Next
0002A2 6A89               M         clrf    LATA                ; clear pins before proceeding
0002A4 6A8A               M         clrf    LATB
0002A6 6A8B               M         clrf    LATC
0002A8 6A8C               M         clrf    LATD
0002AA EF?? F???          M         goto    PC_MODE
                          M 
0002AE                    M Exit
0002AE 0000               M         nop
0002B0 D???           00551         bra     HOLD_STANDBY
                      00552 
                      00553 ;*******************************************************************************
                      00554 ; execution mode
                      00555 ;*******************************************************************************
                      00556 
0002B2                00557 CHECK_CLEAR
                      00558         SUB16   CLEAR, RED                  ; check first against red
  0000                    M         local   RESULTS
0002B2 C047 FFE8          M         movff   RED+1, WREG ; move high y into working register
0002B6 5C45               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
0002B8 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0002BA EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0002BE C046 FFE8          M         movff   RED+0, WREG
0002C2 5C44               M         subwf   CLEAR+0, 0 
0002C4                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0002C4 A0D8           00559         btfss   STATUS, C
0002C6 0012           00560         return                              ; RED > CLEAR
                      00561         
                      00562         SUB16   CLEAR, GREEN                ; check against green
  0000                    M         local   RESULTS
0002C8 C049 FFE8          M         movff   GREEN+1, WREG ; move high y into working register
0002CC 5C45               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
0002CE A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0002D0 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0002D4 C048 FFE8          M         movff   GREEN+0, WREG
0002D8 5C44               M         subwf   CLEAR+0, 0 
0002DA                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0002DA A0D8           00563         btfss   STATUS, C
0002DC 0012           00564         return                              ; GREEN > CLEAR
                      00565         
                      00566         SUB16   CLEAR, BLUE                 ; check against blue
  0000                    M         local   RESULTS
0002DE C04B FFE8          M         movff   BLUE+1, WREG ; move high y into working register
0002E2 5C45               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
0002E4 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0002E6 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0002EA C04A FFE8          M         movff   BLUE+0, WREG
0002EE 5C44               M         subwf   CLEAR+0, 0 
0002F0                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0002F0 A0D8           00567         btfss   STATUS, C
0002F2 0012           00568         return                              ; BLUE > CLEAR
                      00569         
0002F4 0E63           00570         movlw   'c'                         ; CLEAR > everything else
0002F6 EC?? F???      00571         call    WR_DATA
0002FA D???           00572         bra     LOOPING
0002FC                00573 CHECK_RED
                      00574         SUB16   RED, CLEAR                  ; check first against clear
  0000                    M         local   RESULTS
0002FC C045 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000300 5C47               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
000302 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000304 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000308 C044 FFE8          M         movff   CLEAR+0, WREG
00030C 5C46               M         subwf   RED+0, 0 
00030E                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
00030E A0D8           00575         btfss   STATUS, C
000310 0012           00576         return                              ; CLEAR > RED
                      00577         
                      00578         SUB16   RED, GREEN                  ; check against green
  0000                    M         local   RESULTS
000312 C049 FFE8          M         movff   GREEN+1, WREG ; move high y into working register
000316 5C47               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
000318 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00031A EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00031E C048 FFE8          M         movff   GREEN+0, WREG
000322 5C46               M         subwf   RED+0, 0 
000324                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000324 A0D8           00579         btfss   STATUS, C
000326 0012           00580         return                              ; GREEN > RED
                      00581         
                      00582         SUB16   RED, BLUE                   ; check against blue
  0000                    M         local   RESULTS
000328 C04B FFE8          M         movff   BLUE+1, WREG ; move high y into working register
00032C 5C47               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
00032E A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000330 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000334 C04A FFE8          M         movff   BLUE+0, WREG
000338 5C46               M         subwf   RED+0, 0 
00033A                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
00033A A0D8           00583         btfss   STATUS, C
00033C 0012           00584         return                              ; BLUE > RED
                      00585         
00033E 0E72           00586         movlw   'r'                         ; RED > everything else
000340 EC?? F???      00587         call    WR_DATA
000344 D???           00588         bra     LOOPING
000346                00589 CHECK_GREEN
                      00590         SUB16   GREEN, CLEAR                ; check first against clear
  0000                    M         local   RESULTS
000346 C045 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
00034A 5C49               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
00034C A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00034E EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000352 C044 FFE8          M         movff   CLEAR+0, WREG
000356 5C48               M         subwf   GREEN+0, 0 
000358                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000358 A0D8           00591         btfss   STATUS, C
00035A 0012           00592         return                              ; CLEAR > GREEN
                      00593         
                      00594         SUB16   GREEN, RED                  ; check against red
  0000                    M         local   RESULTS
00035C C047 FFE8          M         movff   RED+1, WREG ; move high y into working register
000360 5C49               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
000362 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000364 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000368 C046 FFE8          M         movff   RED+0, WREG
00036C 5C48               M         subwf   GREEN+0, 0 
00036E                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
00036E A0D8           00595         btfss   STATUS, C
000370 0012           00596         return                              ; RED > GREEN
                      00597         
                      00598         SUB16   GREEN, BLUE                 ; check against blue
  0000                    M         local   RESULTS
000372 C04B FFE8          M         movff   BLUE+1, WREG ; move high y into working register
000376 5C49               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
000378 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00037A EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00037E C04A FFE8          M         movff   BLUE+0, WREG
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000382 5C48               M         subwf   GREEN+0, 0 
000384                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000384 A0D8           00599         btfss   STATUS, C
000386 0012           00600         return                              ; BLUE > GREEN
                      00601         
000388 0E67           00602         movlw   'g'                         ; GREEN > everything else
00038A EC?? F???      00603         call    WR_DATA
00038E D???           00604         bra     LOOPING
000390                00605 CHECK_BLUE
                      00606         SUB16   BLUE, CLEAR                 ; check first against clear
  0000                    M         local   RESULTS
000390 C045 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
000394 5C4B               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
000396 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000398 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00039C C044 FFE8          M         movff   CLEAR+0, WREG
0003A0 5C4A               M         subwf   BLUE+0, 0 
0003A2                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003A2 A0D8           00607         btfss   STATUS, C
0003A4 0012           00608         return                              ; CLEAR > BLUE
                      00609         
                      00610         SUB16   BLUE, RED                   ; check against red
  0000                    M         local   RESULTS
0003A6 C047 FFE8          M         movff   RED+1, WREG ; move high y into working register
0003AA 5C4B               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
0003AC A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003AE EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003B2 C046 FFE8          M         movff   RED+0, WREG
0003B6 5C4A               M         subwf   BLUE+0, 0 
0003B8                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003B8 A0D8           00611         btfss   STATUS, C
0003BA 0012           00612         return                              ; RED > BLUE
                      00613 
                      00614         SUB16   BLUE, GREEN                 ; check against green
  0000                    M         local   RESULTS
0003BC C049 FFE8          M         movff   GREEN+1, WREG ; move high y into working register
0003C0 5C4B               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
0003C2 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003C4 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003C8 C048 FFE8          M         movff   GREEN+0, WREG
0003CC 5C4A               M         subwf   BLUE+0, 0 
0003CE                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003CE A0D8           00615         btfss   STATUS, C
0003D0 0012           00616         return                              ; GREEN > CLEAR
                      00617         
0003D2 0E62           00618         movlw   'b'                         ; BLUE > everything else
0003D4 EC?? F???      00619         call    WR_DATA
0003D8 0012           00620         return
                      00621         
0003DA                00622 COLOUR_TEST
                      00623 
0003DA                00624 LOOPING
                      00625         Delay50N delayR, 0x28
  0000                    M         local   loop
0003DA 0E28               M         movlw   0x28
0003DC 6E1B               M         movwf   delayR
                          M 
0003DE                    M loop
0003DE EC?? F???          M         call    Delay50ms
0003E2 2E1B               M         decfsz  delayR
0003E4 EF?? F???          M         goto    loop
0003E8 EC?? F???      00626         call    ClrLCD
                      00627         COLOUR_GET_DATA CLEAR+0, CLEAR+1, RED+0, RED+1, GREEN+0, GREEN+1, BLUE+0, BLUE+1
0003EC EC?? F???          M         call    delay5ms
                          M         
                          M         COLOUR_READ 0x14    ; read clear colour address low, command bits set later
0003F0 0E14               M         movlw   0x14
0003F2 6E??               M         movwf   regaddress
0003F4 EC?? F???          M         call    READ_COLOUR_I2C
0003F8 C??? F044          M         movff   databyte, CLEAR+0
                          M         COLOUR_READ 0x15    ; read clear colour address high, command bits set later
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003FC 0E15               M         movlw   0x15
0003FE 6E??               M         movwf   regaddress
000400 EC?? F???          M         call    READ_COLOUR_I2C
000404 C??? F045          M         movff   databyte, CLEAR+1
                          M                 
                          M         COLOUR_READ 0x16    ; read red colour address low, command bits set later
000408 0E16               M         movlw   0x16
00040A 6E??               M         movwf   regaddress
00040C EC?? F???          M         call    READ_COLOUR_I2C
000410 C??? F046          M         movff   databyte, RED+0
                          M         COLOUR_READ 0x17    ; read red colour address high, command bits set later
000414 0E17               M         movlw   0x17
000416 6E??               M         movwf   regaddress
000418 EC?? F???          M         call    READ_COLOUR_I2C
00041C C??? F047          M         movff   databyte, RED+1
                          M         
                          M         COLOUR_READ 0x18    ; read green colour address low, command bits set later
000420 0E18               M         movlw   0x18
000422 6E??               M         movwf   regaddress
000424 EC?? F???          M         call    READ_COLOUR_I2C
000428 C??? F048          M         movff   databyte, GREEN+0
                          M         COLOUR_READ 0x19    ; read green colour address high, command bits set later
00042C 0E19               M         movlw   0x19
00042E 6E??               M         movwf   regaddress
000430 EC?? F???          M         call    READ_COLOUR_I2C
000434 C??? F049          M         movff   databyte, GREEN+1
                          M         
                          M         COLOUR_READ 0x1a    ; read blue colour address low, command bits set later
000438 0E1A               M         movlw   0x1a
00043A 6E??               M         movwf   regaddress
00043C EC?? F???          M         call    READ_COLOUR_I2C
000440 C??? F04A          M         movff   databyte, BLUE+0
                          M         COLOUR_READ 0x1b    ; read blue colour address high, command bits set later
000444 0E1B               M         movlw   0x1b
000446 6E??               M         movwf   regaddress
000448 EC?? F???          M         call    READ_COLOUR_I2C
00044C C??? F04B          M         movff   databyte, BLUE+1
                      00628         Delay50N delayR, 0x02
  0000                    M         local   loop
000450 0E02               M         movlw   0x02
000452 6E1B               M         movwf   delayR
                          M 
000454                    M loop
000454 EC?? F???          M         call    Delay50ms
000458 2E1B               M         decfsz  delayR
00045A EF?? F???          M         goto    loop
                      00629         
                      00630 ;       movlw   0x01            testing
                      00631 ;       movwf   CLEAR+0
                      00632 ;       movlw   0x06
                      00633 ;       movwf   GREEN+0
                      00634 ;       movlw   0x03
                      00635 ;       movwf   RED+1
                      00636 ;       movlw   0x01
                      00637 ;       movwf   BLUE+0
                      00638 
00045E EC?? F???      00639         call    CHECK_CLEAR
000462 EC?? F???      00640         call    CHECK_RED
000466 EC?? F???      00641         call    CHECK_GREEN
00046A EC?? F???      00642         call    CHECK_BLUE
00046E D???           00643         bra LOOPING
                      00644         
000470                00645 EXECUTION
000470 EC?? F???      00646         call        ClearEEPROM_21
                      00647         ; save the starting time
000474 EC?? F???      00648         call        SAVE_TIME
                      00649                 
                      00650         ; display
000478 681F           00651         setf        inExecution
00047A EC?? F???      00652         call        ClrLCD
                      00653         Display     Exe1
  0000                    M         local   loop
00047E 0E??               M         movlw   upper Exe1      ; Move Table<20:16>
000480 6EF8               M         movwf   TBLPTRU
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000482 0E??               M         movlw   high Exe1       ; Move Table<15:8>
000484 6EF7               M         movwf   TBLPTRH
000486 0E??               M         movlw   low Exe1        ; Move Table<7:0>
000488 6EF6               M         movwf   TBLPTRL
00048A 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
00048C 50F5               M         movf    TABLAT, W
00048E                    M loop
00048E EC?? F???          M         call    WR_DATA         ; write to LCD
000492 000B               M         tblrd+*                 ; next row in table
000494 50F5               M         movf    TABLAT, W
000496 E1??               M         bnz     loop
000498 EC?? F???      00654         call        LCD_L2
00049C 0EC5           00655         movlw       0xc5                    ; setting up timer
00049E 6ED7           00656         movwf       TMR0H
0004A0 0E44           00657         movlw       0x44    
0004A2 6ED6           00658         movwf       TMR0L
                      00659         
0004A4 8ED5           00660         bsf         T0CON, TMR0ON           ; turning on timer
                      00661         ; initialize variables
0004A6 6A18           00662         clrf        OP_sec
0004A8 6A19           00663         clrf        OP_INT
                      00664         
0004AA 6A40           00665         clrf        ESKA
0004AC 6A41           00666         clrf        ESKA_CAP
0004AE 6A42           00667         clrf        YOP
0004B0 6A43           00668         clrf        YOP_CAP
                      00669         
0004B2 6A44           00670         clrf        CLEAR
0004B4 6A45           00671         clrf        CLEAR+1     
0004B6 6A46           00672         clrf        RED
0004B8 6A47           00673         clrf        RED+1
0004BA 6A48           00674         clrf        GREEN
0004BC 6A49           00675         clrf        GREEN+1
0004BE 6A4A           00676         clrf        BLUE
0004C0 6A4B           00677         clrf        BLUE+1
                      00678         
                      00679 ;COLLECTIONS_STEP
                      00680 ;       
                      00681 ;TERM_CHECK
                      00682 ;       
                      00683 ;BOTTLE_CHECK
                      00684 ;
                      00685 ;COLOUR_ONE
                      00686 ;
                      00687 ;COLOUR_TWO
                      00688 ;       
                      00689 ;BRAINS
                      00690 ;       
                      00691 ;TRAY_STEP
                      00692 ;       
                      00693 
0004C2                00694 HOLD_EXE
0004C2 EC?? F???      00695         call        READ_KEY
                      00696         ChangeMode  keyS, EXIT_EXE
  0000                    M         local Next, Exit
                          M 
0004C6 0E0C               M         movlw   keyS                ; poll for mode
0004C8 6210               M         cpfseq  KEY                 ; check this against key press
0004CA EF?? F???          M         goto    Exit
                          M 
0004CE                    M Next
0004CE 6A89               M         clrf    LATA                ; clear pins before proceeding
0004D0 6A8A               M         clrf    LATB
0004D2 6A8B               M         clrf    LATC
0004D4 6A8C               M         clrf    LATD
0004D6 EF?? F???          M         goto    EXIT_EXE
                          M 
0004DA                    M Exit
0004DA 0000               M         nop
0004DC D???           00697         bra         HOLD_EXE
                      00698         
0004DE                00699 EXIT_EXE
                      00700         ; stop timer and save the execution time to eeprom
0004DE 9ED5           00701         bcf         T0CON, TMR0ON
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0004E0 EC?? F???      00702         call        SAVE_EXE_TIME
                      00703                 
                      00704         ; Clear inExecution flag to stop '*' interrupts
0004E4 6A1F           00705         clrf        inExecution
                      00706         
0004E6 C040 FFE8      00707         movff       ESKA, WREG
0004EA 0F30           00708         addlw       0x30
                      00709         WriteEE     WREG, H_EE, L_EE
0004EC C021 FFAA          M         movff   H_EE, EEADRH        ; High address
0004F0 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
0004F4 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
0004F8 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
0004FA D???               M         bra     $-2
                          M 
0004FC 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
0004FE 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000500 84A6               M         bsf     EECON1, WREN        ; enable write
000502 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000504 98A1               M         bcf     PIR2, EEIF
                          M 
000506 0E55               M         movlw   0x55
000508 6EA7               M         movwf   EECON2              ; write 55h
00050A 0EAA               M         movlw   0xaa
00050C 6EA7               M         movwf   EECON2              ; write 0xaa
00050E 82A6               M         bsf     EECON1, WR          ; begin write
000510 B2A6               M         btfsc   EECON1, WR
000512 D???               M         bra     $-2
                          M 
000514 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000516 94A6               M         bcf     EECON1, WREN        ; disable writes
000518 2A22           00710         incf        L_EE
                      00711         
00051A C041 FFE8      00712         movff       ESKA_CAP, WREG
00051E 0F30           00713         addlw       0x30
                      00714         WriteEE     WREG, H_EE, L_EE
000520 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000524 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000528 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
00052C B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
00052E D???               M         bra     $-2
                          M 
000530 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000532 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000534 84A6               M         bsf     EECON1, WREN        ; enable write
000536 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000538 98A1               M         bcf     PIR2, EEIF
                          M 
00053A 0E55               M         movlw   0x55
00053C 6EA7               M         movwf   EECON2              ; write 55h
00053E 0EAA               M         movlw   0xaa
000540 6EA7               M         movwf   EECON2              ; write 0xaa
000542 82A6               M         bsf     EECON1, WR          ; begin write
000544 B2A6               M         btfsc   EECON1, WR
000546 D???               M         bra     $-2
                          M 
000548 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
00054A 94A6               M         bcf     EECON1, WREN        ; disable writes
00054C 2A22           00715         incf        L_EE
                      00716         
00054E C042 FFE8      00717         movff       YOP, WREG
000552 0F30           00718         addlw       0x30
                      00719         WriteEE     WREG, H_EE, L_EE
000554 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000558 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
00055C CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000560 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000562 D???               M         bra     $-2
                          M 
000564 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000566 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000568 84A6               M         bsf     EECON1, WREN        ; enable write
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00056A 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
00056C 98A1               M         bcf     PIR2, EEIF
                          M 
00056E 0E55               M         movlw   0x55
000570 6EA7               M         movwf   EECON2              ; write 55h
000572 0EAA               M         movlw   0xaa
000574 6EA7               M         movwf   EECON2              ; write 0xaa
000576 82A6               M         bsf     EECON1, WR          ; begin write
000578 B2A6               M         btfsc   EECON1, WR
00057A D???               M         bra     $-2
                          M 
00057C 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
00057E 94A6               M         bcf     EECON1, WREN        ; disable writes
000580 2A22           00720         incf        L_EE
                      00721         
000582 C043 FFE8      00722         movff       YOP_CAP, WREG
000586 0F30           00723         addlw       0x30
                      00724         WriteEE     WREG, H_EE, L_EE
000588 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
00058C C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000590 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000594 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000596 D???               M         bra     $-2
                          M 
000598 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
00059A 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
00059C 84A6               M         bsf     EECON1, WREN        ; enable write
00059E 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
0005A0 98A1               M         bcf     PIR2, EEIF
                          M 
0005A2 0E55               M         movlw   0x55
0005A4 6EA7               M         movwf   EECON2              ; write 55h
0005A6 0EAA               M         movlw   0xaa
0005A8 6EA7               M         movwf   EECON2              ; write 0xaa
0005AA 82A6               M         bsf     EECON1, WR          ; begin write
0005AC B2A6               M         btfsc   EECON1, WR
0005AE D???               M         bra     $-2
                          M 
0005B0 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
0005B2 94A6               M         bcf     EECON1, WREN        ; disable writes
0005B4 2A22           00725         incf        L_EE
                      00726         
0005B6 EF?? F???      00727         goto        SaveData
                      00728 
0005BA                00729 SaveData
0005BA EC?? F???      00730         call        ClrLCD
                      00731         Display     SAVE
  0000                    M         local   loop
0005BE 0E??               M         movlw   upper SAVE      ; Move Table<20:16>
0005C0 6EF8               M         movwf   TBLPTRU
0005C2 0E??               M         movlw   high SAVE       ; Move Table<15:8>
0005C4 6EF7               M         movwf   TBLPTRH
0005C6 0E??               M         movlw   low SAVE        ; Move Table<7:0>
0005C8 6EF6               M         movwf   TBLPTRL
0005CA 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0005CC 50F5               M         movf    TABLAT, W
0005CE                    M loop
0005CE EC?? F???          M         call    WR_DATA         ; write to LCD
0005D2 000B               M         tblrd+*                 ; next row in table
0005D4 50F5               M         movf    TABLAT, W
0005D6 E1??               M         bnz     loop
                      00732 
0005D8 0E00           00733         movlw       d'0'
0005DA 6E21           00734         movwf       H_EE
0005DC 0EA8           00735         movlw       d'168'              ; take d'168' as last
0005DE 6E22           00736         movwf       L_EE
0005E0 0E00           00737         movlw       d'0'
0005E2 6E24           00738         movwf       tempH_EE
0005E4 0EDC           00739         movlw       d'220'              ; temp for low constant
0005E6 6E25           00740         movwf       tempL_EE
                      00741         
0005E8 6A16           00742         clrf        counter2
0005EA 6A15           00743         clrf        counter
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00744         
0005EC                00745 ShiftLoop
0005EC 2A15           00746         incf            counter
                      00747         READEE          REG_EE, H_EE, L_EE
0005EE C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
0005F2 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
0005F6 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
0005F8 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
0005FA 80A6               M         bsf     EECON1, RD          ; read EEPROM
0005FC CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000600 0E15           00748         movlw           d'21'
000602 2622           00749         addwf           L_EE
                      00750         WriteEE         REG_EE, H_EE, L_EE
000604 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000608 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
00060C C023 FFA8          M         movff   REG_EE, EEDATA      ; set word
                          M 
000610 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000612 D???               M         bra     $-2
                          M 
000614 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000616 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000618 84A6               M         bsf     EECON1, WREN        ; enable write
00061A 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
00061C 98A1               M         bcf     PIR2, EEIF
                          M 
00061E 0E55               M         movlw   0x55
000620 6EA7               M         movwf   EECON2              ; write 55h
000622 0EAA               M         movlw   0xaa
000624 6EA7               M         movwf   EECON2              ; write 0xaa
000626 82A6               M         bsf     EECON1, WR          ; begin write
000628 B2A6               M         btfsc   EECON1, WR
00062A D???               M         bra     $-2
                          M 
00062C 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
00062E 94A6               M         bcf     EECON1, WREN        ; disable writes
000630 0E14           00751         movlw           d'20'
000632 5E22           00752         subwf           L_EE
000634 0E15           00753         movlw           d'21'
000636 6215           00754         cpfseq          counter
000638 EF?? F???      00755         goto            ShiftLoop
                      00756         
                      00757         ; Set EEPROM address to the previous 21 byte block, and reset temp address
00063C 0E2A           00758         movlw           d'42'
00063E 5E22           00759         subwf           L_EE
000640 0EDC           00760         movlw           d'220'
000642 6E25           00761         movwf           tempL_EE
000644 6A15           00762         clrf            counter
000646 2A16           00763         incf            counter2
000648 0E09           00764         movlw           d'9'
00064A 6216           00765         cpfseq          counter2        ; Skip if 9 shifts were made
00064C EF?? F???      00766         goto            ShiftLoop
                      00767 
000650 EF?? F???      00768         goto            LOG
                      00769 
                      00770 ;*******************************************************************************
                      00771 ; sorting statistics log mode
                      00772 ;*******************************************************************************
                      00773         
000654                00774 LOG
000654 EC?? F???      00775         call    ClrLCD
                      00776         Display Log1
  0000                    M         local   loop
000658 0E??               M         movlw   upper Log1      ; Move Table<20:16>
00065A 6EF8               M         movwf   TBLPTRU
00065C 0E??               M         movlw   high Log1       ; Move Table<15:8>
00065E 6EF7               M         movwf   TBLPTRH
000660 0E??               M         movlw   low Log1        ; Move Table<7:0>
000662 6EF6               M         movwf   TBLPTRL
000664 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000666 50F5               M         movf    TABLAT, W
000668                    M loop
000668 EC?? F???          M         call    WR_DATA         ; write to LCD
00066C 000B               M         tblrd+*                 ; next row in table
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00066E 50F5               M         movf    TABLAT, W
000670 E1??               M         bnz     loop
                      00777 
                      00778         ; display most recent run data
000672 0E0A           00779         movlw   d'10'
000674 6E22           00780         movwf   L_EE
                      00781 ;       READEE  OP_sec, H_EE, L_EE
                      00782 ;       incf    L_EE
                      00783 ;       READEE  OP_INT, H_EE, L_EE
                      00784 ;       incf    L_EE
000676 EC?? F???      00785         call    DisplayExeTime
                      00786 
00067A EC?? F???      00787         call    LCD_L2
00067E 6A22           00788         clrf    L_EE
000680 EC?? F???      00789         call    DispOpRTC
                      00790 
000684                00791 HOLD_LOG
000684 EC?? F???      00792         call    READ_KEY
                      00793         ChangeMode  keyB, LOG_INFO
  0000                    M         local Next, Exit
                          M 
000688 0E07               M         movlw   keyB                ; poll for mode
00068A 6210               M         cpfseq  KEY                 ; check this against key press
00068C EF?? F???          M         goto    Exit
                          M 
000690                    M Next
000690 6A89               M         clrf    LATA                ; clear pins before proceeding
000692 6A8A               M         clrf    LATB
000694 6A8B               M         clrf    LATC
000696 6A8C               M         clrf    LATD
000698 EF?? F???          M         goto    LOG_INFO
                          M 
00069C                    M Exit
00069C 0000               M         nop
                      00794         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
00069E 0E0D               M         movlw   key0                ; poll for mode
0006A0 6210               M         cpfseq  KEY                 ; check this against key press
0006A2 EF?? F???          M         goto    Exit
                          M 
0006A6                    M Next
0006A6 6A89               M         clrf    LATA                ; clear pins before proceeding
0006A8 6A8A               M         clrf    LATB
0006AA 6A8B               M         clrf    LATC
0006AC 6A8C               M         clrf    LATD
0006AE EF?? F???          M         goto    STANDBY
                          M 
0006B2                    M Exit
0006B2 0000               M         nop
0006B4 D???           00795         bra     HOLD_LOG
                      00796 
0006B6                00797 LOG_INFO
0006B6 EC?? F???      00798         call    ClrLCD
                      00799         Display LogInfo1
  0000                    M         local   loop
0006BA 0E??               M         movlw   upper LogInfo1  ; Move Table<20:16>
0006BC 6EF8               M         movwf   TBLPTRU
0006BE 0E??               M         movlw   high LogInfo1   ; Move Table<15:8>
0006C0 6EF7               M         movwf   TBLPTRH
0006C2 0E??               M         movlw   low LogInfo1    ; Move Table<7:0>
0006C4 6EF6               M         movwf   TBLPTRL
0006C6 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0006C8 50F5               M         movf    TABLAT, W
0006CA                    M loop
0006CA EC?? F???          M         call    WR_DATA         ; write to LCD
0006CE 000B               M         tblrd+*                 ; next row in table
0006D0 50F5               M         movf    TABLAT, W
0006D2 E1??               M         bnz     loop
0006D4 EC?? F???      00800         call    LCD_L2
                      00801         Display LogInfo2
  0000                    M         local   loop
0006D8 0E??               M         movlw   upper LogInfo2  ; Move Table<20:16>
0006DA 6EF8               M         movwf   TBLPTRU
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0006DC 0E??               M         movlw   high LogInfo2   ; Move Table<15:8>
0006DE 6EF7               M         movwf   TBLPTRH
0006E0 0E??               M         movlw   low LogInfo2    ; Move Table<7:0>
0006E2 6EF6               M         movwf   TBLPTRL
0006E4 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0006E6 50F5               M         movf    TABLAT, W
0006E8                    M loop
0006E8 EC?? F???          M         call    WR_DATA         ; write to LCD
0006EC 000B               M         tblrd+*                 ; next row in table
0006EE 50F5               M         movf    TABLAT, W
0006F0 E1??               M         bnz     loop
0006F2 6A21           00802         clrf    H_EE
0006F4 6A22           00803         clrf    L_EE
                      00804         ;DisplayLog  H_EE, L_EE
0006F6                00805 HOLD_LOG_INFO
0006F6 EC?? F???      00806         call    READ_KEY
                      00807         ChangeMode key0, LOG
  0000                    M         local Next, Exit
                          M 
0006FA 0E0D               M         movlw   key0                ; poll for mode
0006FC 6210               M         cpfseq  KEY                 ; check this against key press
0006FE EF?? F???          M         goto    Exit
                          M 
000702                    M Next
000702 6A89               M         clrf    LATA                ; clear pins before proceeding
000704 6A8A               M         clrf    LATB
000706 6A8B               M         clrf    LATC
000708 6A8C               M         clrf    LATD
00070A EF?? F???          M         goto    LOG
                          M 
00070E                    M Exit
00070E 0000               M         nop
000710 D???           00808         bra     HOLD_LOG
                      00809         
                      00810 ;*******************************************************************************
                      00811 ; permanent logs
                      00812 ;*******************************************************************************
                      00813 
000712                00814 PERM_LOG
000712 EC?? F???      00815         call    ClrLCD
                      00816         Display PermLog1
  0000                    M         local   loop
000716 0E??               M         movlw   upper PermLog1  ; Move Table<20:16>
000718 6EF8               M         movwf   TBLPTRU
00071A 0E??               M         movlw   high PermLog1   ; Move Table<15:8>
00071C 6EF7               M         movwf   TBLPTRH
00071E 0E??               M         movlw   low PermLog1    ; Move Table<7:0>
000720 6EF6               M         movwf   TBLPTRL
000722 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000724 50F5               M         movf    TABLAT, W
000726                    M loop
000726 EC?? F???          M         call    WR_DATA         ; write to LCD
00072A 000B               M         tblrd+*                 ; next row in table
00072C 50F5               M         movf    TABLAT, W
00072E E1??               M         bnz     loop
000730 EC?? F???      00817         call    LCD_L2
                      00818         Display PermLog2
  0000                    M         local   loop
000734 0E??               M         movlw   upper PermLog2  ; Move Table<20:16>
000736 6EF8               M         movwf   TBLPTRU
000738 0E??               M         movlw   high PermLog2   ; Move Table<15:8>
00073A 6EF7               M         movwf   TBLPTRH
00073C 0E??               M         movlw   low PermLog2    ; Move Table<7:0>
00073E 6EF6               M         movwf   TBLPTRL
000740 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000742 50F5               M         movf    TABLAT, W
000744                    M loop
000744 EC?? F???          M         call    WR_DATA         ; write to LCD
000748 000B               M         tblrd+*                 ; next row in table
00074A 50F5               M         movf    TABLAT, W
00074C E1??               M         bnz     loop
                      00819         
00074E                00820 HOLD_PERM_LOG
00074E EC?? F???      00821         call    READ_KEY
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00822         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
000752 0E0D               M         movlw   key0                ; poll for mode
000754 6210               M         cpfseq  KEY                 ; check this against key press
000756 EF?? F???          M         goto    Exit
                          M 
00075A                    M Next
00075A 6A89               M         clrf    LATA                ; clear pins before proceeding
00075C 6A8A               M         clrf    LATB
00075E 6A8B               M         clrf    LATC
000760 6A8C               M         clrf    LATD
000762 EF?? F???          M         goto    STANDBY
                          M 
000766                    M Exit
000766 0000               M         nop
                      00823         ChangeMode  key1, PLOG
  0000                    M         local Next, Exit
                          M 
000768 0E00               M         movlw   key1                ; poll for mode
00076A 6210               M         cpfseq  KEY                 ; check this against key press
00076C EF?? F???          M         goto    Exit
                          M 
000770                    M Next
000770 6A89               M         clrf    LATA                ; clear pins before proceeding
000772 6A8A               M         clrf    LATB
000774 6A8B               M         clrf    LATC
000776 6A8C               M         clrf    LATD
000778 EF?? F???          M         goto    PLOG
                          M 
00077C                    M Exit
00077C 0000               M         nop
                      00824         ChangeMode  key2, PLOG
  0000                    M         local Next, Exit
                          M 
00077E 0E01               M         movlw   key2                ; poll for mode
000780 6210               M         cpfseq  KEY                 ; check this against key press
000782 EF?? F???          M         goto    Exit
                          M 
000786                    M Next
000786 6A89               M         clrf    LATA                ; clear pins before proceeding
000788 6A8A               M         clrf    LATB
00078A 6A8B               M         clrf    LATC
00078C 6A8C               M         clrf    LATD
00078E EF?? F???          M         goto    PLOG
                          M 
000792                    M Exit
000792 0000               M         nop
                      00825         ChangeMode  key3, PLOG
  0000                    M         local Next, Exit
                          M 
000794 0E02               M         movlw   key3                ; poll for mode
000796 6210               M         cpfseq  KEY                 ; check this against key press
000798 EF?? F???          M         goto    Exit
                          M 
00079C                    M Next
00079C 6A89               M         clrf    LATA                ; clear pins before proceeding
00079E 6A8A               M         clrf    LATB
0007A0 6A8B               M         clrf    LATC
0007A2 6A8C               M         clrf    LATD
0007A4 EF?? F???          M         goto    PLOG
                          M 
0007A8                    M Exit
0007A8 0000               M         nop
                      00826         ChangeMode  key4, PLOG
  0000                    M         local Next, Exit
                          M 
0007AA 0E04               M         movlw   key4                ; poll for mode
0007AC 6210               M         cpfseq  KEY                 ; check this against key press
0007AE EF?? F???          M         goto    Exit
                          M 
0007B2                    M Next
0007B2 6A89               M         clrf    LATA                ; clear pins before proceeding
0007B4 6A8A               M         clrf    LATB
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0007B6 6A8B               M         clrf    LATC
0007B8 6A8C               M         clrf    LATD
0007BA EF?? F???          M         goto    PLOG
                          M 
0007BE                    M Exit
0007BE 0000               M         nop
                      00827         ChangeMode  key5, PLOG
  0000                    M         local Next, Exit
                          M 
0007C0 0E05               M         movlw   key5                ; poll for mode
0007C2 6210               M         cpfseq  KEY                 ; check this against key press
0007C4 EF?? F???          M         goto    Exit
                          M 
0007C8                    M Next
0007C8 6A89               M         clrf    LATA                ; clear pins before proceeding
0007CA 6A8A               M         clrf    LATB
0007CC 6A8B               M         clrf    LATC
0007CE 6A8C               M         clrf    LATD
0007D0 EF?? F???          M         goto    PLOG
                          M 
0007D4                    M Exit
0007D4 0000               M         nop
                      00828         ChangeMode  key6, PLOG
  0000                    M         local Next, Exit
                          M 
0007D6 0E06               M         movlw   key6                ; poll for mode
0007D8 6210               M         cpfseq  KEY                 ; check this against key press
0007DA EF?? F???          M         goto    Exit
                          M 
0007DE                    M Next
0007DE 6A89               M         clrf    LATA                ; clear pins before proceeding
0007E0 6A8A               M         clrf    LATB
0007E2 6A8B               M         clrf    LATC
0007E4 6A8C               M         clrf    LATD
0007E6 EF?? F???          M         goto    PLOG
                          M 
0007EA                    M Exit
0007EA 0000               M         nop
                      00829         ChangeMode  key7, PLOG
  0000                    M         local Next, Exit
                          M 
0007EC 0E08               M         movlw   key7                ; poll for mode
0007EE 6210               M         cpfseq  KEY                 ; check this against key press
0007F0 EF?? F???          M         goto    Exit
                          M 
0007F4                    M Next
0007F4 6A89               M         clrf    LATA                ; clear pins before proceeding
0007F6 6A8A               M         clrf    LATB
0007F8 6A8B               M         clrf    LATC
0007FA 6A8C               M         clrf    LATD
0007FC EF?? F???          M         goto    PLOG
                          M 
000800                    M Exit
000800 0000               M         nop
                      00830         ChangeMode  key8, PLOG
  0000                    M         local Next, Exit
                          M 
000802 0E09               M         movlw   key8                ; poll for mode
000804 6210               M         cpfseq  KEY                 ; check this against key press
000806 EF?? F???          M         goto    Exit
                          M 
00080A                    M Next
00080A 6A89               M         clrf    LATA                ; clear pins before proceeding
00080C 6A8A               M         clrf    LATB
00080E 6A8B               M         clrf    LATC
000810 6A8C               M         clrf    LATD
000812 EF?? F???          M         goto    PLOG
                          M 
000816                    M Exit
000816 0000               M         nop
                      00831         ChangeMode  key9, PLOG
  0000                    M         local Next, Exit
                          M 
000818 0E0A               M         movlw   key9                ; poll for mode
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00081A 6210               M         cpfseq  KEY                 ; check this against key press
00081C EF?? F???          M         goto    Exit
                          M 
000820                    M Next
000820 6A89               M         clrf    LATA                ; clear pins before proceeding
000822 6A8A               M         clrf    LATB
000824 6A8B               M         clrf    LATC
000826 6A8C               M         clrf    LATD
000828 EF?? F???          M         goto    PLOG
                          M 
00082C                    M Exit
00082C 0000               M         nop
00082E D???           00832         bra HOLD_PERM_LOG
                      00833         
000830                00834 PLOG
000830 EC?? F???      00835         call    ClrLCD
                      00836         Display PermLog1
  0000                    M         local   loop
000834 0E??               M         movlw   upper PermLog1  ; Move Table<20:16>
000836 6EF8               M         movwf   TBLPTRU
000838 0E??               M         movlw   high PermLog1   ; Move Table<15:8>
00083A 6EF7               M         movwf   TBLPTRH
00083C 0E??               M         movlw   low PermLog1    ; Move Table<7:0>
00083E 6EF6               M         movwf   TBLPTRL
000840 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000842 50F5               M         movf    TABLAT, W
000844                    M loop
000844 EC?? F???          M         call    WR_DATA         ; write to LCD
000848 000B               M         tblrd+*                 ; next row in table
00084A 50F5               M         movf    TABLAT, W
00084C E1??               M         bnz     loop
                      00837         
                      00838         ; find the key press value
00084E C010 FFE8      00839         movff   KEY, WREG
000852 2AE8           00840         incf    WREG        ; W = KEY+1
000854 6E17           00841         movwf   temp
                      00842         
000856 42E8           00843         rrncf   WREG        ; division by 4
000858 9EE8           00844         bcf     WREG, 7     ; clear last bit, overflow from rotate
00085A 42E8           00845         rrncf   WREG        
00085C 9EE8           00846         bcf     WREG, 7
00085E 5E17           00847         subwf   temp        ; temp = (KEY+1) - (KEY+1)/4
000860 C017 FFE8      00848         movff   temp, WREG
000864 C017 F011      00849         movff   temp, temp_KEY
000868 0D15           00850         mullw   d'21'       ; indexed as mutliples of 21
                      00851 
00086A                00852 displayNum
00086A C011 FFE8      00853         movff   temp_KEY, WREG
00086E 0F30           00854         addlw   0x30
000870 EC?? F???      00855         call    WR_DATA
000874 0E3A           00856         movlw   ":"
000876 EC?? F???      00857         call    WR_DATA
00087A 0E20           00858         movlw   " "
00087C EC?? F???      00859         call    WR_DATA
                      00860         
000880 CFF3 F022      00861         movff   PRODL, L_EE
000884 0E00           00862         movlw   d'0'
000886 2622           00863         addwf   L_EE
                      00864         READEE  OP_sec, H_EE, L_EE
000888 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
00088C C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000890 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000892 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000894 80A6               M         bsf     EECON1, RD          ; read EEPROM
000896 CFA8 F018          M         movff   EEDATA, OP_sec      ; put data into file
00089A 2A22           00865         incf    L_EE
                      00866         READEE  OP_INT, H_EE, L_EE
00089C C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
0008A0 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
0008A4 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
0008A6 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
0008A8 80A6               M         bsf     EECON1, RD          ; read EEPROM
0008AA CFA8 F019          M         movff   EEDATA, OP_INT      ; put data into file
0008AE 2A22           00867         incf    L_EE
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0008B0 EC?? F???      00868         call    DisplayExeTime
0008B4 CFF3 F022      00869         movff   PRODL, L_EE
                      00870         
                      00871         ; reset eeprom to beginning
0008B8 EC?? F???      00872         call    LCD_L2
0008BC CFF3 F022      00873         movff   PRODL, L_EE
0008C0 EC?? F???      00874         call    DispOpRTC
                      00875         
0008C4                00876 HOLD_PLOG
0008C4 EC?? F???      00877         call    READ_KEY
                      00878         ChangeMode  key0, PERM_LOG      ; back to perm log menu
  0000                    M         local Next, Exit
                          M 
0008C8 0E0D               M         movlw   key0                ; poll for mode
0008CA 6210               M         cpfseq  KEY                 ; check this against key press
0008CC EF?? F???          M         goto    Exit
                          M 
0008D0                    M Next
0008D0 6A89               M         clrf    LATA                ; clear pins before proceeding
0008D2 6A8A               M         clrf    LATB
0008D4 6A8B               M         clrf    LATC
0008D6 6A8C               M         clrf    LATD
0008D8 EF?? F???          M         goto    PERM_LOG
                          M 
0008DC                    M Exit
0008DC 0000               M         nop
0008DE D???           00879         bra HOLD_PLOG
                      00880         
                      00881 ;*******************************************************************************
                      00882 ; pc interface
                      00883 ;*******************************************************************************
                      00884 
0008E0                00885 PC_MODE
0008E0 EC?? F???      00886         call    ClrLCD
                      00887         Display PC1
  0000                    M         local   loop
0008E4 0E??               M         movlw   upper PC1       ; Move Table<20:16>
0008E6 6EF8               M         movwf   TBLPTRU
0008E8 0E??               M         movlw   high PC1        ; Move Table<15:8>
0008EA 6EF7               M         movwf   TBLPTRH
0008EC 0E??               M         movlw   low PC1         ; Move Table<7:0>
0008EE 6EF6               M         movwf   TBLPTRL
0008F0 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0008F2 50F5               M         movf    TABLAT, W
0008F4                    M loop
0008F4 EC?? F???          M         call    WR_DATA         ; write to LCD
0008F8 000B               M         tblrd+*                 ; next row in table
0008FA 50F5               M         movf    TABLAT, W
0008FC E1??               M         bnz     loop
0008FE EC?? F???      00888         call    LCD_L2
                      00889         Display PC2
  0000                    M         local   loop
000902 0E??               M         movlw   upper PC2       ; Move Table<20:16>
000904 6EF8               M         movwf   TBLPTRU
000906 0E??               M         movlw   high PC2        ; Move Table<15:8>
000908 6EF7               M         movwf   TBLPTRH
00090A 0E??               M         movlw   low PC2         ; Move Table<7:0>
00090C 6EF6               M         movwf   TBLPTRL
00090E 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000910 50F5               M         movf    TABLAT, W
000912                    M loop
000912 EC?? F???          M         call    WR_DATA         ; write to LCD
000916 000B               M         tblrd+*                 ; next row in table
000918 50F5               M         movf    TABLAT, W
00091A E1??               M         bnz     loop
00091C CFF9 F03A      00890         movff   PCL, PC_PCL
000920 CFFA F03B      00891         movff   PCLATH, PC_PCLATH
000924 CFFB F03C      00892         movff   PCLATU, PC_PCLATU
                      00893         
000928                00894 HOLD_PC
000928 EC?? F???      00895         call    READ_KEY
                      00896         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00092C 0E0D               M         movlw   key0                ; poll for mode
00092E 6210               M         cpfseq  KEY                 ; check this against key press
000930 EF?? F???          M         goto    Exit
                          M 
000934                    M Next
000934 6A89               M         clrf    LATA                ; clear pins before proceeding
000936 6A8A               M         clrf    LATB
000938 6A8B               M         clrf    LATC
00093A 6A8C               M         clrf    LATD
00093C EF?? F???          M         goto    STANDBY
                          M 
000940                    M Exit
000940 0000               M         nop
                      00897         ChangeMode  keyH, PC_TRANSFER
  0000                    M         local Next, Exit
                          M 
000942 0E0E               M         movlw   keyH                ; poll for mode
000944 6210               M         cpfseq  KEY                 ; check this against key press
000946 EF?? F???          M         goto    Exit
                          M 
00094A                    M Next
00094A 6A89               M         clrf    LATA                ; clear pins before proceeding
00094C 6A8A               M         clrf    LATB
00094E 6A8B               M         clrf    LATC
000950 6A8C               M         clrf    LATD
000952 EF?? F???          M         goto    PC_TRANSFER
                          M 
000956                    M Exit
000956 0000               M         nop
000958 D???           00898         bra     HOLD_PC
                      00899 
00095A                00900 PC_TRANSFER
00095A 6839           00901         setf    transferring
00095C EC?? F???      00902         call    ClrLCD
                      00903         Display PCTransfer
  0000                    M         local   loop
000960 0E??               M         movlw   upper PCTransfer ; Move Table<20:16>
000962 6EF8               M         movwf   TBLPTRU
000964 0E??               M         movlw   high PCTransfer ; Move Table<15:8>
000966 6EF7               M         movwf   TBLPTRH
000968 0E??               M         movlw   low PCTransfer  ; Move Table<7:0>
00096A 6EF6               M         movwf   TBLPTRL
00096C 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
00096E 50F5               M         movf    TABLAT, W
000970                    M loop
000970 EC?? F???          M         call    WR_DATA         ; write to LCD
000974 000B               M         tblrd+*                 ; next row in table
000976 50F5               M         movf    TABLAT, W
000978 E1??               M         bnz     loop
                      00904         ;call   DataUSART
00097A 6A39           00905         clrf    transferring
00097C D???           00906         bra     HOLD_PC
                      00907         
                      00908 ;*******************************************************************************
                      00909 ; subroutines
                      00910 ;*******************************************************************************
                      00911 
00097E                00912 RTC_INIT
                      00913         ; set sda and scl to high
00097E 9882           00914         bcf     PORTC, 4
000980 9682           00915         bcf     PORTC, 3
000982 8894           00916         bsf     TRISC, 4
000984 8694           00917         bsf     TRISC, 3
                      00918         
000986 EC?? F???      00919         call    i2c_common_setup
                      00920         ;call   SET_TIME
Warning[203]: Found opcode in column 1. (return)
00098A 0012           00921 return
                      00922         
00098C                00923 SAVE_TIME   
                      00924         rtc_read    0x02        ; hours
00098C 0E02               M     movlw   0x02
00098E 6E??               M     movwf   regaddress
000990 EC?? F???          M     call    read_rtc
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000994 C??? FFE8          M     movff   datachar, WREG
000998 EC?? F???          M     call    rtc_convert
00099C EC?? F???      00925         call    WriteEE_RTC
                      00926         rtc_read    0x01        ; minutes
0009A0 0E01               M     movlw   0x01
0009A2 6E??               M     movwf   regaddress
0009A4 EC?? F???          M     call    read_rtc
0009A8 C??? FFE8          M     movff   datachar, WREG
0009AC EC?? F???          M     call    rtc_convert
0009B0 EC?? F???      00927         call    WriteEE_RTC
                      00928         rtc_read    0x06        ; years
0009B4 0E06               M     movlw   0x06
0009B6 6E??               M     movwf   regaddress
0009B8 EC?? F???          M     call    read_rtc
0009BC C??? FFE8          M     movff   datachar, WREG
0009C0 EC?? F???          M     call    rtc_convert
0009C4 EC?? F???      00929         call    WriteEE_RTC
                      00930         rtc_read    0x05        ; months
0009C8 0E05               M     movlw   0x05
0009CA 6E??               M     movwf   regaddress
0009CC EC?? F???          M     call    read_rtc
0009D0 C??? FFE8          M     movff   datachar, WREG
0009D4 EC?? F???          M     call    rtc_convert
0009D8 EC?? F???      00931         call    WriteEE_RTC
                      00932         rtc_read    0x04        ; days
0009DC 0E04               M     movlw   0x04
0009DE 6E??               M     movwf   regaddress
0009E0 EC?? F???          M     call    read_rtc
0009E4 C??? FFE8          M     movff   datachar, WREG
0009E8 EC?? F???          M     call    rtc_convert
0009EC EC?? F???      00933         call    WriteEE_RTC
Warning[203]: Found opcode in column 1. (return)
0009F0 0012           00934 return
                      00935         
0009F2                00936 SAVE_EXE_TIME
                      00937         
Warning[202]: Argument out of range.  Least significant bits used.
0009F2 3818           00938         swapf   OP_sec, WREG    ; 100's seconds
0009F4 6E17           00939         movwf   temp
0009F6 0E0F           00940         movlw   0x0F
0009F8 1617           00941         andwf   temp
0009FA C017 FFE8      00942         movff   temp, WREG
0009FE 0F30           00943         addlw   0x30    
                      00944         WriteEE WREG, H_EE, L_EE
000A00 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000A04 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000A08 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000A0C B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000A0E D???               M         bra     $-2
                          M 
000A10 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000A12 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000A14 84A6               M         bsf     EECON1, WREN        ; enable write
000A16 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000A18 98A1               M         bcf     PIR2, EEIF
                          M 
000A1A 0E55               M         movlw   0x55
000A1C 6EA7               M         movwf   EECON2              ; write 55h
000A1E 0EAA               M         movlw   0xaa
000A20 6EA7               M         movwf   EECON2              ; write 0xaa
000A22 82A6               M         bsf     EECON1, WR          ; begin write
000A24 B2A6               M         btfsc   EECON1, WR
000A26 D???               M         bra     $-2
                          M 
000A28 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000A2A 94A6               M         bcf     EECON1, WREN        ; disable writes
000A2C 2A22           00945         incf    L_EE
                      00946         
000A2E C018 F017      00947         movff   OP_sec, temp    ; 10's seconds
000A32 0E0F           00948         movlw   0x0F
000A34 1617           00949         andwf   temp            ; Temp = lower nibble of Op_sec
000A36 C017 FFE8      00950         movff   temp, WREG      ; W = Temp
000A3A 0F30           00951         addlw   0x30            ; Convert to ASCII
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00952         WriteEE WREG, H_EE, L_EE
000A3C C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000A40 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000A44 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000A48 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000A4A D???               M         bra     $-2
                          M 
000A4C 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000A4E 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000A50 84A6               M         bsf     EECON1, WREN        ; enable write
000A52 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000A54 98A1               M         bcf     PIR2, EEIF
                          M 
000A56 0E55               M         movlw   0x55
000A58 6EA7               M         movwf   EECON2              ; write 55h
000A5A 0EAA               M         movlw   0xaa
000A5C 6EA7               M         movwf   EECON2              ; write 0xaa
000A5E 82A6               M         bsf     EECON1, WR          ; begin write
000A60 B2A6               M         btfsc   EECON1, WR
000A62 D???               M         bra     $-2
                          M 
000A64 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000A66 94A6               M         bcf     EECON1, WREN        ; disable writes
000A68 2A22           00953         incf    L_EE
                      00954         
Warning[202]: Argument out of range.  Least significant bits used.
000A6A 3819           00955         swapf   OP_INT, WREG    ;1's seconds
000A6C 6E17           00956         movwf   temp
000A6E 0E0F           00957         movlw   0x0f
000A70 1617           00958         andwf   temp
000A72 C017 FFE8      00959         movff   temp, WREG
000A76 0F30           00960         addlw   0x30
                      00961         WriteEE WREG, H_EE, L_EE
000A78 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000A7C C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000A80 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000A84 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000A86 D???               M         bra     $-2
                          M 
000A88 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000A8A 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000A8C 84A6               M         bsf     EECON1, WREN        ; enable write
000A8E 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000A90 98A1               M         bcf     PIR2, EEIF
                          M 
000A92 0E55               M         movlw   0x55
000A94 6EA7               M         movwf   EECON2              ; write 55h
000A96 0EAA               M         movlw   0xaa
000A98 6EA7               M         movwf   EECON2              ; write 0xaa
000A9A 82A6               M         bsf     EECON1, WR          ; begin write
000A9C B2A6               M         btfsc   EECON1, WR
000A9E D???               M         bra     $-2
                          M 
000AA0 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000AA2 94A6               M         bcf     EECON1, WREN        ; disable writes
000AA4 2A22           00962         incf    L_EE
Warning[203]: Found opcode in column 1. (return)
000AA6 0012           00963 return
                      00964         
                      00965                 
000AA8                00966 DISPLAY_RTC     
                      00967         ; display data in this format hh/minmin/yy yy/mm/dd
                      00968         rtc_read    0x02            ; 0x02 from DS1307 - hours
000AA8 0E02               M     movlw   0x02
000AAA 6E??               M     movwf   regaddress
000AAC EC?? F???          M     call    read_rtc
000AB0 C??? FFE8          M     movff   datachar, WREG
000AB4 EC?? F???          M     call    rtc_convert
000AB8 C??? FFE8      00969         movff   tens_digit,WREG
000ABC EC?? F???      00970         call    WR_DATA
000AC0 C??? FFE8      00971         movff   ones_digit,WREG
000AC4 EC?? F???      00972         call    WR_DATA
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000AC8 0E68           00973         movlw   "h"
000ACA EC?? F???      00974         call    WR_DATA
                      00975         
                      00976         rtc_read    0x01            ; 0x01 from DS1307 - minutes
000ACE 0E01               M     movlw   0x01
000AD0 6E??               M     movwf   regaddress
000AD2 EC?? F???          M     call    read_rtc
000AD6 C??? FFE8          M     movff   datachar, WREG
000ADA EC?? F???          M     call    rtc_convert
000ADE C??? FFE8      00977         movff   tens_digit,WREG
000AE2 EC?? F???      00978         call    WR_DATA
000AE6 C??? FFE8      00979         movff   ones_digit,WREG
000AEA EC?? F???      00980         call    WR_DATA
                      00981         
                      00982         rtc_read    0x00            ; 0x00 from DS1307 - seconds
000AEE 0E00               M     movlw   0x00
000AF0 6E??               M     movwf   regaddress
000AF2 EC?? F???          M     call    read_rtc
000AF6 C??? FFE8          M     movff   datachar, WREG
000AFA EC?? F???          M     call    rtc_convert
000AFE C??? FFE8      00983         movff   tens_digit,WREG
000B02 EC?? F???      00984         call    WR_DATA
000B06 C??? FFE8      00985         movff   ones_digit,WREG
000B0A EC?? F???      00986         call    WR_DATA
000B0E 0E20           00987         movlw   " "
000B10 EC?? F???      00988         call    WR_DATA
                      00989         
                      00990         rtc_read    0x06            ; 0x06 from DS1307 - years
000B14 0E06               M     movlw   0x06
000B16 6E??               M     movwf   regaddress
000B18 EC?? F???          M     call    read_rtc
000B1C C??? FFE8          M     movff   datachar, WREG
000B20 EC?? F???          M     call    rtc_convert
000B24 C??? FFE8      00991         movff   tens_digit,WREG
000B28 EC?? F???      00992         call    WR_DATA
000B2C C??? FFE8      00993         movff   ones_digit,WREG
000B30 EC?? F???      00994         call    WR_DATA
000B34 0E2F           00995         movlw   "/"
000B36 EC?? F???      00996         call    WR_DATA
                      00997         
                      00998         rtc_read    0x05            ; 0x05 from DS1307 - months
000B3A 0E05               M     movlw   0x05
000B3C 6E??               M     movwf   regaddress
000B3E EC?? F???          M     call    read_rtc
000B42 C??? FFE8          M     movff   datachar, WREG
000B46 EC?? F???          M     call    rtc_convert
000B4A C??? FFE8      00999         movff   tens_digit,WREG
000B4E EC?? F???      01000         call    WR_DATA
000B52 C??? FFE8      01001         movff   ones_digit,WREG
000B56 EC?? F???      01002         call    WR_DATA
000B5A 0E2F           01003         movlw   "/"
000B5C EC?? F???      01004         call    WR_DATA
                      01005         
                      01006         rtc_read    0x04            ; 0x04 from DS1307 - days
000B60 0E04               M     movlw   0x04
000B62 6E??               M     movwf   regaddress
000B64 EC?? F???          M     call    read_rtc
000B68 C??? FFE8          M     movff   datachar, WREG
000B6C EC?? F???          M     call    rtc_convert
000B70 C??? FFE8      01007         movff   tens_digit,WREG
000B74 EC?? F???      01008         call    WR_DATA
000B78 C??? FFE8      01009         movff   ones_digit,WREG
000B7C EC?? F???      01010         call    WR_DATA
Warning[203]: Found opcode in column 1. (return)
000B80 0012           01011 return
                      01012         
000B82                01013 SET_TIME
                      01014         rtc_resetAll
                          M 
000B82 6A??               M     clrf    databyte
000B84 0E06               M     movlw   6
000B86 6E??               M     movwf   regaddress ;start at 6 and go down, and set all to 0
                          M 
Warning[207]: Found label after column 1. (del_loop0)
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000B88                    M     del_loop0
000B88 EC?? F???          M     call    write_rtc
000B8C 2E??               M     decfsz  regaddress
000B8E D???               M     bra     del_loop0
000B90 EC?? F???          M     call    write_rtc ;sets registers 0-6 to zero
Warning[207]: Found label after column 1. (_loopknt)
  00000001                M     _loopknt set _loopknt+1
                      01015         
                      01016         rtc_set 0x00,   b'10000000'
000B94 0E00               M     movlw   0x00
000B96 6E??               M     movwf   regaddress
000B98 0E80               M     movlw   b'10000000'
000B9A 6E??               M     movwf   databyte
000B9C EC?? F???          M     call    write_rtc
                      01017 
                      01018         rtc_set 0x06,   b'00010111'             ; Year 17
000BA0 0E06               M     movlw   0x06
000BA2 6E??               M     movwf   regaddress
000BA4 0E17               M     movlw   b'00010111'
000BA6 6E??               M     movwf   databyte
000BA8 EC?? F???          M     call    write_rtc
                      01019         rtc_set 0x05,   b'00000010'             ; Month 2
000BAC 0E05               M     movlw   0x05
000BAE 6E??               M     movwf   regaddress
000BB0 0E02               M     movlw   b'00000010'
000BB2 6E??               M     movwf   databyte
000BB4 EC?? F???          M     call    write_rtc
                      01020         rtc_set 0x04,   b'00011001'             ; Date 19
000BB8 0E04               M     movlw   0x04
000BBA 6E??               M     movwf   regaddress
000BBC 0E19               M     movlw   b'00011001'
000BBE 6E??               M     movwf   databyte
000BC0 EC?? F???          M     call    write_rtc
                      01021         rtc_set 0x02,   b'00010001'             ; Hours 11
000BC4 0E02               M     movlw   0x02
000BC6 6E??               M     movwf   regaddress
000BC8 0E11               M     movlw   b'00010001'
000BCA 6E??               M     movwf   databyte
000BCC EC?? F???          M     call    write_rtc
                      01022         rtc_set 0x01,   b'00111000'             ; Minutes 38
000BD0 0E01               M     movlw   0x01
000BD2 6E??               M     movwf   regaddress
000BD4 0E38               M     movlw   b'00111000'
000BD6 6E??               M     movwf   databyte
000BD8 EC?? F???          M     call    write_rtc
                      01023         rtc_set 0x00,   b'00000000'             ; Seconds 0
000BDC 0E00               M     movlw   0x00
000BDE 6E??               M     movwf   regaddress
000BE0 0E00               M     movlw   b'00000000'
000BE2 6E??               M     movwf   databyte
000BE4 EC?? F???          M     call    write_rtc
Warning[203]: Found opcode in column 1. (return)
000BE8 0012           01024 return
                      01025         
000BEA                01026 INIT_USART
000BEA 0E0F           01027         movlw   15      ; baud rate 9600
000BEC 6EAF           01028         movwf   SPBRG
000BEE 6AAC           01029         clrf    TXSTA
                      01030         
000BF0 6AAB           01031         clrf    RCSTA
000BF2 8EAB           01032         bsf     RCSTA,SPEN      ; asynchronous serial port enable
000BF4 88AB           01033         bsf     RCSTA,CREN      ; continous receive
                      01034         
000BF6 8AAC           01035         bsf     TXSTA, TXEN     ; transmit enabled
000BF8 0012           01036         return
                      01037 
                      01038 ;DataUSART
                      01039 ;       
                      01040 ;       movlw   0x02
                      01041 ;       call    USART_WAIT
                      01042 ;       movlw   0x0D
                      01043 ;       call    USART_WAIT
                      01044 ;       
                      01045 ;       movlw   d'21'       ; start of permanent logs
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01046 ;       movff   w, L_EE
                      01047 ;       TransferTable   PCLog1
                      01048 ;       
                      01049 ;       ; display time here
                      01050 ;;      rtc_read        0x02
                      01051 ;;              movf        tens_digit, W
                      01052 ;;        andlw       b'00000001'
                      01053 ;;        addlw       0x30
                      01054 ;;        call        TransmitWaitUSART
                      01055 ;;        movf        ones_digit, W
                      01056 ;;        call        TransmitWaitUSART
                      01057 ;;              movlw           ":"
                      01058 ;;              call            TransmitWaitUSART
                      01059 ;;              ; Dispay minutes
                      01060 ;;              rtc_read        0x01
                      01061 ;;              call        SendRTC_USART
                      01062 ;;              ; Dispay AM/PM
                      01063 ;;              rtc_read        0x02
                      01064 ;;        movlw       "P"
                      01065 ;;        btfss       tens_digit, 1
                      01066 ;;        movlw       "A"
                      01067 ;;        call        TransmitWaitUSART
                      01068 ;;        movlw       "M"
                      01069 ;;        call        TransmitWaitUSART
                      01070 ;;              movlw           " "
                      01071 ;;        call        TransmitWaitUSART
                      01072 ;;              ; Display month
                      01073 ;;              rtc_read        0x05
                      01074 ;;              call        SendRTC_USART
                      01075 ;;              movlw           0x2F            ; ASCII '/'
                      01076 ;;              call            TransmitWaitUSART
                      01077 ;;              ; Display day
                      01078 ;;              rtc_read        0x04
                      01079 ;;              call        SendRTC_USART
                      01080 ;;              movlw           0x2F            ; ASCII '/'
                      01081 ;;              call            TransmitWaitUSART
                      01082 ;;              ; Display year
                      01083 ;;              rtc_read        0x06
                      01084 ;;              call        SendRTC_USART
                      01085 ;       
                      01086 ;       call    USART_LINE
                      01087 ;       call    USART_LINE
                      01088 ;       
                      01089 ;       clrf    counter
                      01090 ;       incf    counter
                      01091 ;
                      01092 ;USART_TRANSFER
                      01093 ;       movlw   d'21'
                      01094 ;       mulwf   counter
                      01095 ;       movff   PRODL, L_EE
                      01096 ;       movlw   d'9'
                      01097 ;       addwf   L_EE
                      01098 ;       READEE  OP_sec, H_EE, L_EE
                      01099 ;       incf    L_EE
                      01100 ;       READEE  OP_INT, H_EE, L_EE
                      01101 ;       incf    L_EE
                      01102 ;       ; call  TransferTime
                      01103 ;       
                      01104 ;       ; send rtc
                      01105 ;       movlw   0x09
                      01106 ;       call    USART_WAIT
                      01107 ;       movff   PRODL, L_EE
                      01108 ;       ;call   TransferRTC
                      01109 ;       call    USART_LINE
                      01110 ;       
                      01111 ;       
                      01112 ;       
                      01113 ;       
                      01114 ;USART_WAIT
                      01115 ;       movwf   TXREG
                      01116 ;       btfss   TXSTA,1
                      01117 ;       goto    $-2
                      01118 ;       return
                      01119 ;
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01120 ;USART_LINE
                      01121 ;       movlw   0x0A
                      01122 ;       call    USART_WAIT
                      01123 ;       movlw   0x0D
                      01124 ;       call    USART_WAIT
                      01125 ;       return
                      01126         
                      01127         
000BFA                01128 Delay5us
000BFA 0E78           01129         movlw   d'120'
000BFC 6E1C           01130         movwf   d5us
                      01131 
000BFE                01132 loop5us
000BFE 2E1C           01133         decfsz  d5us
000C00 EF?? F???      01134         goto    loop5us
000C04 0000           01135         nop
000C06 0012           01136         return
                      01137 
000C08                01138 Delay200us
000C08 0EA4           01139         movlw   0xA4
000C0A 6E1D           01140         movwf   d200us
                      01141 
000C0C                01142 loop200us
000C0C 2E1D           01143         decfsz  d200us
000C0E EF?? F???      01144         goto    loop200us
000C12 0000           01145         nop
000C14 0012           01146         return
                      01147 
000C16                01148 Delay50ms
000C16 0EF9           01149         movlw   0xF9
000C18 6E1E           01150         movwf   d50ms
                      01151 
000C1A                01152 loop50ms
000C1A EC?? F???      01153         call    Delay200us
000C1E 2E1E           01154         decfsz  d50ms
                      01155 
000C20                01156 Cycles
000C20 EF?? F???      01157         goto    loop50ms
000C24 EC?? F???      01158         call    Delay200us
000C28 0012           01159         return
                      01160 
000C2A                01161 WriteEE_RTC
                      01162         WriteEE tens_digit, H_EE, L_EE
000C2A C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000C2E C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000C32 C??? FFA8          M         movff   tens_digit, EEDATA  ; set word
                          M 
000C36 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000C38 D???               M         bra     $-2
                          M 
000C3A 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000C3C 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000C3E 84A6               M         bsf     EECON1, WREN        ; enable write
000C40 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000C42 98A1               M         bcf     PIR2, EEIF
                          M 
000C44 0E55               M         movlw   0x55
000C46 6EA7               M         movwf   EECON2              ; write 55h
000C48 0EAA               M         movlw   0xaa
000C4A 6EA7               M         movwf   EECON2              ; write 0xaa
000C4C 82A6               M         bsf     EECON1, WR          ; begin write
000C4E B2A6               M         btfsc   EECON1, WR
000C50 D???               M         bra     $-2
                          M 
000C52 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000C54 94A6               M         bcf     EECON1, WREN        ; disable writes
000C56 2A22           01163         incf    L_EE
                      01164         WriteEE ones_digit, H_EE, L_EE
000C58 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000C5C C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000C60 C??? FFA8          M         movff   ones_digit, EEDATA  ; set word
                          M 
000C64 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000C66 D???               M         bra     $-2
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
000C68 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000C6A 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000C6C 84A6               M         bsf     EECON1, WREN        ; enable write
000C6E 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000C70 98A1               M         bcf     PIR2, EEIF
                          M 
000C72 0E55               M         movlw   0x55
000C74 6EA7               M         movwf   EECON2              ; write 55h
000C76 0EAA               M         movlw   0xaa
000C78 6EA7               M         movwf   EECON2              ; write 0xaa
000C7A 82A6               M         bsf     EECON1, WR          ; begin write
000C7C B2A6               M         btfsc   EECON1, WR
000C7E D???               M         bra     $-2
                          M 
000C80 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000C82 94A6               M         bcf     EECON1, WREN        ; disable writes
000C84 2A22           01165         incf    L_EE
000C86 0012           01166         return
                      01167 
000C88                01168 ClearEEPROM_21
000C88 6A21           01169         clrf    H_EE
000C8A 6A22           01170         clrf    L_EE
000C8C 6820           01171         setf    clear_EE
000C8E 6A15           01172         clrf    counter
000C90                01173 ClearNext
                      01174         WriteEE         clear_EE, H_EE, L_EE
000C90 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000C94 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000C98 C020 FFA8          M         movff   clear_EE, EEDATA    ; set word
                          M 
000C9C B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000C9E D???               M         bra     $-2
                          M 
000CA0 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000CA2 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000CA4 84A6               M         bsf     EECON1, WREN        ; enable write
000CA6 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000CA8 98A1               M         bcf     PIR2, EEIF
                          M 
000CAA 0E55               M         movlw   0x55
000CAC 6EA7               M         movwf   EECON2              ; write 55h
000CAE 0EAA               M         movlw   0xaa
000CB0 6EA7               M         movwf   EECON2              ; write 0xaa
000CB2 82A6               M         bsf     EECON1, WR          ; begin write
000CB4 B2A6               M         btfsc   EECON1, WR
000CB6 D???               M         bra     $-2
                          M 
000CB8 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000CBA 94A6               M         bcf     EECON1, WREN        ; disable writes
000CBC 2A15           01175         incf            counter
000CBE 2A22           01176         incf            L_EE
000CC0 0E15           01177         movlw           d'21'
000CC2 6215           01178         cpfseq          counter
000CC4 EF?? F???      01179         goto            ClearNext
000CC8 6A21           01180         clrf            H_EE
000CCA 6A22           01181         clrf            L_EE
000CCC 0012           01182         return
                      01183         
000CCE                01184 READ_KEY
000CCE A281           01185         btfss   PORTB, 1        ; check for keypad interrupt
000CD0 EF?? F???      01186         goto    READ_KEY
000CD4 3881           01187         swapf   PORTB, W
000CD6 0B0F           01188         andlw   0x0F
000CD8 6E10           01189         movwf   KEY
000CDA B281           01190         btfsc   PORTB, 1
000CDC EF?? F???      01191         goto    $-2
000CE0 0012           01192         return
                      01193 
000CE2                01194 READ_KEY_TIME
000CE2 EC?? F???      01195         call        LCD_L2          ; go to second line to print RTC
                      01196 
                      01197         ; display the time
000CE6 EC?? F???      01198         call    DISPLAY_RTC
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01199 
000CEA A281           01200         btfss       PORTB, 1    ; keypad interrupt
000CEC EF?? F???      01201         goto        READ_KEY_TIME
000CF0 3881           01202         swapf       PORTB, W    ; copy PORTB7:4 to W3:0
000CF2 0B0F           01203         andlw       0x0F        ; only want W3:0
000CF4 6E10           01204         movwf       KEY         ; write this value to the KEY
000CF6 B281           01205         btfsc       PORTB, 1    ; wait for release
000CF8 EF?? F???      01206         goto        $-2         ; go back one instruction
000CFC 0012           01207         return
                      01208 
000CFE                01209 DisplayExeTime
                      01210         READEE  REG_EE, H_EE, L_EE
000CFE C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D02 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D06 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D08 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D0A 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D0C CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000D10 0EFF           01211         movlw   0xFF
000D12 6223           01212         cpfseq  REG_EE
000D14 EF?? F???      01213         goto    NoSkipDispExeTime
                      01214         Display NoData
  0000                    M         local   loop
000D18 0E??               M         movlw   upper NoData    ; Move Table<20:16>
000D1A 6EF8               M         movwf   TBLPTRU
000D1C 0E??               M         movlw   high NoData     ; Move Table<15:8>
000D1E 6EF7               M         movwf   TBLPTRH
000D20 0E??               M         movlw   low NoData      ; Move Table<7:0>
000D22 6EF6               M         movwf   TBLPTRL
000D24 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000D26 50F5               M         movf    TABLAT, W
000D28                    M loop
000D28 EC?? F???          M         call    WR_DATA         ; write to LCD
000D2C 000B               M         tblrd+*                 ; next row in table
000D2E 50F5               M         movf    TABLAT, W
000D30 E1??               M         bnz     loop
000D32 0EFF           01215         movlw   0xFF
000D34 6023           01216         cpfslt  REG_EE
000D36 EF?? F???      01217         goto    SkipDispExeTime
000D3A 0012           01218         return
                      01219 
000D3C                01220 NoSkipDispExeTime
                      01221         READEE  WREG, H_EE, L_EE
000D3C C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D40 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D44 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D46 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D48 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D4A CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000D4E EC?? F???      01222         call    WR_DATA
000D52 2A22           01223         incf    L_EE
                      01224         
                      01225         READEE  WREG, H_EE, L_EE
000D54 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D58 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D5C 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D5E 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D60 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D62 CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000D66 EC?? F???      01226         call    WR_DATA
000D6A 2A22           01227         incf    L_EE
                      01228         
                      01229         READEE  WREG, H_EE, L_EE
000D6C C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D70 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D74 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D76 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D78 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D7A CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000D7E EC?? F???      01230         call    WR_DATA
000D82 2A22           01231         incf    L_EE
                      01232 
000D84 0E73           01233         movlw   0x73            ; Write 's'
000D86 EC?? F???      01234         call    WR_DATA
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D8A EC?? F???      01235         call    LCD_L2
000D8E                01236 SkipDispExeTime
000D8E 0012           01237         return
                      01238 
000D90                01239 DispOpRTC
                      01240         READEE  REG_EE, H_EE, L_EE
000D90 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D94 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D98 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D9A 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D9C 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D9E CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000DA2 0EFF           01241         movlw   0xff
000DA4 6223           01242         cpfseq  REG_EE
000DA6 EF?? F???      01243         goto    NoSkipDispOpRTC
                      01244         Display NoData
  0000                    M         local   loop
000DAA 0E??               M         movlw   upper NoData    ; Move Table<20:16>
000DAC 6EF8               M         movwf   TBLPTRU
000DAE 0E??               M         movlw   high NoData     ; Move Table<15:8>
000DB0 6EF7               M         movwf   TBLPTRH
000DB2 0E??               M         movlw   low NoData      ; Move Table<7:0>
000DB4 6EF6               M         movwf   TBLPTRL
000DB6 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000DB8 50F5               M         movf    TABLAT, W
000DBA                    M loop
000DBA EC?? F???          M         call    WR_DATA         ; write to LCD
000DBE 000B               M         tblrd+*                 ; next row in table
000DC0 50F5               M         movf    TABLAT, W
000DC2 E1??               M         bnz     loop
000DC4 0EFF           01245         movlw   0xff
000DC6 6023           01246         cpfslt  REG_EE
000DC8 EF?? F???      01247         goto    SkipDispOpRTC
                      01248 
000DCC                01249 NoSkipDispOpRTC
                      01250         READEE  REG_EE, H_EE, L_EE
000DCC C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000DD0 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000DD4 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000DD6 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000DD8 80A6               M         bsf     EECON1, RD          ; read EEPROM
000DDA CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000DDE C023 FFE8      01251         movff   REG_EE, WREG
000DE2 EC?? F???      01252         call    WR_DATA
000DE6 2A22           01253         incf    L_EE
                      01254         
                      01255         READEE  REG_EE, H_EE, L_EE
000DE8 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000DEC C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000DF0 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000DF2 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000DF4 80A6               M         bsf     EECON1, RD          ; read EEPROM
000DF6 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000DFA C023 FFE8      01256         movff   REG_EE, WREG
000DFE EC?? F???      01257         call    WR_DATA
000E02 2A22           01258         incf    L_EE
                      01259 
000E04 0E68           01260         movlw   "h"
000E06 EC?? F???      01261         call    WR_DATA
                      01262         
000E0A EC?? F???      01263         call    DispOpRTC_Helper
                      01264         
000E0E 0E20           01265         movlw   " "
000E10 EC?? F???      01266         call    WR_DATA
                      01267         
000E14 EC?? F???      01268         call    DispOpRTC_Helper
000E18 0E2F           01269         movlw   "/"
000E1A EC?? F???      01270         call    WR_DATA
                      01271 
000E1E EC?? F???      01272         call    DispOpRTC_Helper
000E22 0E2F           01273         movlw   "/"
000E24 EC?? F???      01274         call    WR_DATA
000E28 EC?? F???      01275         call    DispOpRTC_Helper
000E2C                01276 SkipDispOpRTC
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  11:11:19         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000E2C 0012           01277                 return
000E2E                01278 DispOpRTC_Helper
                      01279         READEE          REG_EE, H_EE, L_EE
000E2E C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E32 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E36 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E38 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E3A 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E3C CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000E40 C023 FFE8      01280         movff           REG_EE, WREG
000E44 EC?? F???      01281         call            WR_DATA
000E48 2A22           01282         incf            L_EE
                      01283         READEE          REG_EE, H_EE, L_EE
000E4A C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E4E C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E52 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E54 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E56 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E58 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000E5C C023 FFE8      01284         movff           REG_EE, WREG
000E60 EC?? F???      01285         call            WR_DATA
000E64 2A22           01286         incf            L_EE
000E66 0012           01287         return
Warning[205]: Found directive in column 1. (end)
                      01288 end

Errors   :     0
Warnings :    42 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

