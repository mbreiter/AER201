MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*******************************************************************************
                      00002 ;
                      00003 ;    Filename: main.asm
                      00004 ;    Date: 2 Feb 2017
                      00005 ;    File Version: 1.0
                      00006 ;    Author: Matthew Reiter
                      00007 ;    Course: AER201
                      00008 ;    Description: botL - a pastic bottle sorting machine
                      00009  
                      00010 ;*******************************************************************************
                      00011 ; configuration settings
                      00012 ;*******************************************************************************
                      00013 
Warning[205]: Found directive in column 1. (list)
                      00014 list    P=18F4620, F=INHX32, C=160, N=80, ST=OFF, MM=OFF, R=DEC
                      00015 #include <p18f4620.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Nov 17 2016
                      00005 ;  MPASM PIC18F4620 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      01440         LIST
                      00016 #include <lcd.inc>
  0000                00001     extern      InitLCD,WrtLCD,ClrLCD,ClkLCD,WR_INS,WR_DATA,LCD_L1,LCD_L2,delay5ms
                      00002 
                      00003 
                      00004 
                      00005 
                      00006 
                      00007 
                      00017 #include <rtc.inc>
Warning[205]: Found directive in column 1. (extern)
  0000                00001 extern write_rtc,read_rtc,rtc_convert,i2c_common_setup, regaddress, databyte, datachar,tens_digit,ones_digit
                      00002 
Warning[205]: Found directive in column 1. (variable)
  0000                00003 variable _loopknt=0
                      00004 
                      00005 rtc_resetAll macro
                      00006 
                      00007     clrf    databyte
                      00008     movlw   6
                      00009     movwf   regaddress ;start at 6 and go down, and set all to 0
                      00010 
                      00011     del_loop#v(_loopknt)
                      00012     call    write_rtc
                      00013     decfsz  regaddress
                      00014     bra     del_loop#v(_loopknt)
                      00015     call    write_rtc ;sets registers 0-6 to zero
                      00016     _loopknt set _loopknt+1
Warning[205]: Found directive in column 1. (endm)
                      00017 endm
                      00018 
                      00019 rtc_set macro addliteral,datliteral
                      00020     movlw   addliteral
                      00021     movwf   regaddress
                      00022     movlw   datliteral
                      00023     movwf   databyte
                      00024     call    write_rtc
Warning[205]: Found directive in column 1. (endm)
                      00025 endm
                      00026 
                      00027 rtc_read macro addliteral
                      00028     movlw   addliteral
                      00029     movwf   regaddress
                      00030     call    read_rtc
                      00031     movff   datachar, WREG
                      00032     call    rtc_convert
Warning[205]: Found directive in column 1. (endm)
                      00033 endm
                      00018 #include <colour.inc>
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                00001     extern      i2c_common_setup, regaddress, databyte, datachar, READ_COLOUR_I2C, WRITE_COLOUR_I2C, WR_DATA, data_colourL, data_col
                            ourH, delay5ms
                      00002 
                      00003 ;    #define TCS34725_ADDRESS          (0x29)
                      00004 ;
                      00005 ;    #define TCS34725_COMMAND_BIT      (0x80)
                      00006 ;
                      00007 ;    #define TCS34725_ENABLE           (0x00)
                      00008 ;    #define TCS34725_ENABLE_AIEN      (0x10)    /* RGBC Interrupt Enable */
                      00009 ;    #define TCS34725_ENABLE_WEN       (0x08)    /* Wait enable - Writing 1 activates the wait timer */
                      00010 ;    #define TCS34725_ENABLE_AEN       (0x02)    /* RGBC Enable - Writing 1 actives the ADC, 0 disables it */
                      00011 ;    #define TCS34725_ENABLE_PON       (0x01)    /* Power on - Writing 1 activates the internal oscillator, 0 disables it */
                      00012 ;    #define TCS34725_ATIME            (0x01)    /* Integration time */
                      00013 ;    #define TCS34725_WTIME            (0x03)    /* Wait time (if TCS34725_ENABLE_WEN is asserted) */
                      00014 ;    #define TCS34725_WTIME_2_4MS      (0xFF)    /* WLONG0 = 2.4ms   WLONG1 = 0.029s */
                      00015 ;    #define TCS34725_WTIME_204MS      (0xAB)    /* WLONG0 = 204ms   WLONG1 = 2.45s  */
                      00016 ;    #define TCS34725_WTIME_614MS      (0x00)    /* WLONG0 = 614ms   WLONG1 = 7.4s   */
                      00017 ;    #define TCS34725_AILTL            (0x04)    /* Clear channel lower interrupt threshold */
                      00018 ;    #define TCS34725_AILTH            (0x05)
                      00019 ;    #define TCS34725_AIHTL            (0x06)    /* Clear channel upper interrupt threshold */
                      00020 ;    #define TCS34725_AIHTH            (0x07)
                      00021 ;    #define TCS34725_PERS             (0x0C)    /* Persistence register - basic SW filtering mechanism for interrupts */
                      00022 ;    #define TCS34725_PERS_NONE        (0b0000)  /* Every RGBC cycle generates an interrupt                                */
                      00023 ;    #define TCS34725_PERS_1_CYCLE     (0b0001)  /* 1 clean channel value outside threshold range generates an interrupt   */
                      00024 ;    #define TCS34725_PERS_2_CYCLE     (0b0010)  /* 2 clean channel values outside threshold range generates an interrupt  */
                      00025 ;    #define TCS34725_PERS_3_CYCLE     (0b0011)  /* 3 clean channel values outside threshold range generates an interrupt  */
                      00026 ;    #define TCS34725_PERS_5_CYCLE     (0b0100)  /* 5 clean channel values outside threshold range generates an interrupt  */
                      00027 ;    #define TCS34725_PERS_10_CYCLE    (0b0101)  /* 10 clean channel values outside threshold range generates an interrupt */
                      00028 ;    #define TCS34725_PERS_15_CYCLE    (0b0110)  /* 15 clean channel values outside threshold range generates an interrupt */
                      00029 ;    #define TCS34725_PERS_20_CYCLE    (0b0111)  /* 20 clean channel values outside threshold range generates an interrupt */
                      00030 ;    #define TCS34725_PERS_25_CYCLE    (0b1000)  /* 25 clean channel values outside threshold range generates an interrupt */
                      00031 ;    #define TCS34725_PERS_30_CYCLE    (0b1001)  /* 30 clean channel values outside threshold range generates an interrupt */
                      00032 ;    #define TCS34725_PERS_35_CYCLE    (0b1010)  /* 35 clean channel values outside threshold range generates an interrupt */
                      00033 ;    #define TCS34725_PERS_40_CYCLE    (0b1011)  /* 40 clean channel values outside threshold range generates an interrupt */
                      00034 ;    #define TCS34725_PERS_45_CYCLE    (0b1100)  /* 45 clean channel values outside threshold range generates an interrupt */
                      00035 ;    #define TCS34725_PERS_50_CYCLE    (0b1101)  /* 50 clean channel values outside threshold range generates an interrupt */
                      00036 ;    #define TCS34725_PERS_55_CYCLE    (0b1110)  /* 55 clean channel values outside threshold range generates an interrupt */
                      00037 ;    #define TCS34725_PERS_60_CYCLE    (0b1111)  /* 60 clean channel values outside threshold range generates an interrupt */
                      00038 ;    #define TCS34725_CONFIG           (0x0D)
                      00039 ;    #define TCS34725_CONFIG_WLONG     (0x02)    /* Choose between short and long (12x) wait times via TCS34725_WTIME */
                      00040 ;    #define TCS34725_CONTROL          (0x0F)    /* Set the gain level for the sensor */
                      00041 ;    #define TCS34725_ID               (0x12)    /* 0x44 = TCS34721/TCS34725, 0x4D = TCS34723/TCS34727 */
                      00042 ;    #define TCS34725_STATUS           (0x13)
                      00043 ;    #define TCS34725_STATUS_AINT      (0x10)    /* RGBC Clean channel interrupt */
                      00044 ;    #define TCS34725_STATUS_AVALID    (0x01)    /* Indicates that the RGBC channels have completed an integration cycle */
                      00045 ;    #define TCS34725_CDATAL           (0x14)    /* Clear channel data */
                      00046 ;    #define TCS34725_CDATAH           (0x15)
                      00047 ;    #define TCS34725_RDATAL           (0x16)    /* Red channel data */
                      00048 ;    #define TCS34725_RDATAH           (0x17)
                      00049 ;    #define TCS34725_GDATAL           (0x18)    /* Green channel data */
                      00050 ;    #define TCS34725_GDATAH           (0x19)
                      00051 ;    #define TCS34725_BDATAL           (0x1A)    /* Blue channel data */
                      00052 ;    #define TCS34725_BDATAH           (0x1B)
                      00053 
                      00054 
Warning[207]: Found label after column 1. (COLOUR_INIT)
                      00055     COLOUR_INIT macro
                      00056         COLOUR_WRITE    0x00, 0x01 ; Enable Register (0x00), Power ON (0x01)
                      00057         call    delay5ms
                      00058         COLOUR_WRITE    0x00, 0x02 ; Enable Register (0x00), RGBC enable (0x02)
                      00059         call    delay5ms
                      00060         COLOUR_WRITE    0x01, 0xf6 ; Timing Register (0x01), 24ms (0xf6) cycle
                      00061         call    delay5ms
                      00062         COLOUR_WRITE    0x0f, 0x03 ; Control Register (0x0f), 60x gain (0x03)
                      00063         call    delay5ms
                      00064     endm
                      00065     
Warning[207]: Found label after column 1. (COLOUR_READ)
                      00066     COLOUR_READ  macro  address
                      00067         movlw   address
                      00068         movwf   regaddress
                      00069         call    READ_COLOUR_I2C
                      00070     endm
                      00071     
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[207]: Found label after column 1. (COLOUR_WRITE)
                      00072     COLOUR_WRITE macro address, datliteral
                      00073         movlw   address
                      00074         movwf   regaddress
                      00075         movlw   datliteral
                      00076         movwf   databyte
                      00077         call    WRITE_COLOUR_I2C
                      00078     endm
                      00079     
Warning[207]: Found label after column 1. (COLOUR_GET_DATA)
                      00080     COLOUR_GET_DATA macro clear, red, green, blue
                      00081         call    delay5ms
                      00082         
                      00083         COLOUR_READ 0x14    ; read clear colour address low, command bits set later
                      00084         movff   databyte, clear+0
                      00085         COLOUR_READ 0x15    ; read clear colour address high, command bits set later
                      00086         movff   databyte, clear+1
                      00087                 
                      00088         COLOUR_READ 0x16    ; read red colour address low, command bits set later
                      00089         movff   databyte, red+0
                      00090         COLOUR_READ 0x17    ; read red colour address high, command bits set later
                      00091         movff   databyte, red+1
                      00092         
                      00093         COLOUR_READ 0x18    ; read green colour address low, command bits set later
                      00094         movff   databyte, green+0
                      00095         COLOUR_READ 0x19    ; read green colour address high, command bits set later
                      00096         movff   databyte, green+1
                      00097         
                      00098         COLOUR_READ 0x1a    ; read blue colour address low, command bits set later
                      00099         movff   databyte, blue+0
                      00100         COLOUR_READ 0x1b    ; read blue colour address high, command bits set later
                      00101         movff   databyte, blue+1
                      00102     endm
                      00103     
                      00019 
                      00020     CONFIG OSC=HS, FCMEN=OFF, IESO=OFF
                      00021     CONFIG PWRT = OFF, BOREN = SBORDIS, BORV = 3
                      00022     CONFIG WDT = OFF, WDTPS = 32768
                      00023     CONFIG MCLRE = ON, LPT1OSC = OFF, PBADEN = OFF
                      00024     CONFIG STVREN = ON, LVP = OFF, XINST = OFF
                      00025     CONFIG DEBUG = ON
                      00026     CONFIG CP0 = OFF, CP1 = OFF, CP2 = OFF, CP3 = OFF
                      00027     CONFIG CPB = OFF, CPD = OFF
                      00028     CONFIG WRT0 = OFF, WRT1 = OFF, WRT2 = OFF, WRT3 = OFF
                      00029     CONFIG WRTB = OFF, WRTC = OFF, WRTD = OFF
                      00030     CONFIG EBTR0 = OFF, EBTR1 = OFF, EBTR2 = OFF, EBTR3 = OFF
                      00031     CONFIG EBTRB = OFF
                      00032 
                      00033 ;*******************************************************************************
                      00034 ; variable and constants
                      00035 ;*******************************************************************************
                      00036     CODE
                      00037             
                      00038     cblock 0x00
  00000000            00039         key1
  00000001            00040         key2
  00000002            00041         key3
  00000003            00042         keyA
  00000004            00043         key4
  00000005            00044         key5
  00000006            00045         key6
  00000007            00046         keyB
  00000008            00047         key7
  00000009            00048         key8
  0000000A            00049         key9
  0000000B            00050         keyC
  0000000C            00051         keyS
  0000000D            00052         key0
  0000000E            00053         keyH
  0000000F            00054         keyD
  00000010            00055         KEY
  00000011            00056         temp_KEY
  00000012            00057         KEY_ISR
  00000013            00058         temp_S  
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000014            00059         temp_W
  00000015            00060         counter
  00000016            00061         counter2
  00000017            00062         temp
  00000018            00063         OP_sec
  00000019            00064         OP_INT
  0000001A            00065         temp_ISR
  0000001B            00066         delayR
  0000001C            00067         d5us
  0000001D            00068         d200us
  0000001E            00069         d50ms
  0000001F            00070         inExecution
  00000020            00071         clear_EE
  00000021            00072         H_EE    
  00000022            00073         L_EE    
  00000023            00074         REG_EE  
  00000024            00075         tempH_EE
  00000025            00076         tempL_EE
  00000026            00077         tempL_EEC
  00000027            00078         MAX_EE   
  00000028            00079         READ_EE
  00000029            00080         last_log
  0000002A            00081         startHt
  0000002B            00082         startHo
  0000002C            00083         startMt
  0000002D            00084         startMo
  0000002E            00085         endHt
  0000002F            00086         endHo
  00000030            00087         endMt
  00000031            00088         endMo
  00000032            00089         LED_Count
  00000033            00090         SkipCount
  00000034            00091         exe_sec
  00000035            00092         exe_int
  00000036            00093         timer_H
  00000037            00094         timer_L
  00000038            00095         convert_buffer
  00000039            00096         transferring
  0000003A            00097         PC_PCL
  0000003B            00098         PC_PCLATH
  0000003C            00099         PC_PCLATU
  0000003D            00100         TIMCNT
  0000003E            00101         CPCNT
  0000003F            00102         TDATA
  00000040            00103         ESKA
  00000041            00104         ESKA_CAP
  00000042            00105         YOP
  00000043            00106         YOP_CAP
  00000044            00107         CLEAR:2
  00000046            00108         RED:2
  00000048            00109         GREEN:2
  0000004A            00110         BLUE:2
  0000004C            00111         temp_colour:2
                      00112     endc
                      00113     
  0000                00114     extern tens_digit, ones_digit
                      00115     
                      00116 ;*******************************************************************************
                      00117 ; tables
                      00118 ;*******************************************************************************
Warning[207]: Found label after column 1. (Welcome)
000000 6F62 4C74 0000 00119     Welcome     db          "botL", 0
Warning[207]: Found label after column 1. (Team)
000006 726D 6820 206C 00120     Team        db          "mr hl hg", 0
       6768 0000 
Warning[207]: Found label after column 1. (StandBy)
000010 7453 6E61 6264 00121     StandBy     db          "Standby", 0
       0079 
Warning[207]: Found label after column 1. (Log1)
000018 6954 656D 003A 00122     Log1        db          "Time:",0
Warning[207]: Found label after column 1. (Log2)
00001E 3231 303A 2030 00123     Log2        db          "12:00 2/3/14", 0
       2F32 2F33 3431 
       0000 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[207]: Found label after column 1. (LogInfo1)
00002C 6153 6576 3A64 00124     LogInfo1    db          "Saved:", 0
       0000 
Warning[207]: Found label after column 1. (LogInfo2)
000034 6142 6B63 3C20 00125     LogInfo2    db          "Back <0>", 0
       3E30 0000 
Warning[207]: Found label after column 1. (PermLog1)
00003E 6550 6D72 6E61 00126     PermLog1    db          "Permanent Logs", 0
       6E65 2074 6F4C 
       7367 0000 
Warning[207]: Found label after column 1. (PermLog2)
00004E 313C 203E 2E2E 00127     PermLog2    db          "<1> ... <9>", 0    
       202E 393C 003E 
Warning[207]: Found label after column 1. (Exe1)
00005A 6F53 7472 6E69 00128     Exe1        db          "Sorting...", 0
       2E67 2E2E 0000 
Warning[207]: Found label after column 1. (Exe2)
000066 4E45 2044 2A3C 00129     Exe2        db          "END <*>", 0
       003E 
Warning[207]: Found label after column 1. (PC1)
00006E 4350 4920 746E 00130     PC1         db          "PC Interface", 0
       7265 6166 6563 
       0000 
Warning[207]: Found label after column 1. (PC2)
00007C 6542 6967 206E 00131     PC2         db          "Begin <#>", 0
       233C 003E 
Warning[207]: Found label after column 1. (PCTransfer)
000086 7254 6E61 6673 00132     PCTransfer  db          "Transferring...", 0
       7265 6972 676E 
       2E2E 002E 
Warning[207]: Found label after column 1. (Stopped)
000096 7453 706F 6570 00133     Stopped     db          "Stopped", 0
       0064 
Warning[207]: Found label after column 1. (Exe_Time)
00009E 6954 656D 203A 00134     Exe_Time    db          "Time: ", 0
       0000 
Warning[207]: Found label after column 1. (SAVE)
0000A6 6153 6976 676E 00135     SAVE        db          "Saving...", 0
       2E2E 002E 
Warning[207]: Found label after column 1. (Safety)
0000B0 6153 6566 7974 00136     Safety      db          "Safety check...", 0
       6320 6568 6B63 
       2E2E 002E 
Warning[207]: Found label after column 1. (NoData)
0000C0 2F4E 0041      00137     NoData      db          "N/A", 0
Warning[207]: Found label after column 1. (PCLog1)
0000C4 6954 656D 6120 00138     PCLog1      db          "Time and Date:", 0
       646E 4420 7461 
       3A65 0000 
                      00139         
                      00140 ;*******************************************************************************
                      00141 ; macros
                      00142 ;*******************************************************************************
                      00143 
                      00144 TransferTable macro table
                      00145         local loop
                      00146         
                      00147         movlw   upper table
                      00148         movwf   TBLPTRU
                      00149         movlw   high table
                      00150         movwf   TBLPTRH
                      00151         movlw   low table
                      00152         movwf   TBLPTRL
                      00153         tblrd*
                      00154         movff   TABLAT, WREG
                      00155 loop
                      00156         call    USART_WAIT
                      00157         tblrd+*
                      00158         movff   TABLAT, WREG
                      00159         bnz     loop
                      00160         endm
                      00161         
                      00162 ConfigLCD   macro
                      00163           movlw     b'00101000'    ; 4 bits, 2 lines,5X7 dots seems to work best instead of the above setting
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00164           call      WR_INS
                      00165 
                      00166           movlw     b'00001100'    ; display on/off
                      00167           call      WR_INS
                      00168          ; movlw     B'00000110'    ; Entry mode
                      00169          ; call      WR_INS
                      00170           movlw     b'00000001'    ; Clear ram
                      00171           call      WR_INS
                      00172           endm
                      00173         
                      00174 movMSB  macro   port
                      00175         andlw   0xF0
                      00176         iorwf   port, f
                      00177         iorlw   0x0F
                      00178         andwf   port, f
                      00179         endm
                      00180 
                      00181 Delay50N macro count, N
                      00182         local   loop
                      00183         movlw   N
                      00184         movwf   count
                      00185 
                      00186 loop
                      00187         call    Delay50ms
                      00188         decfsz  count
                      00189         goto    loop
                      00190         endm
                      00191 
                      00192 Display macro   Message
                      00193         local   loop
                      00194         movlw   upper Message   ; Move Table<20:16>
                      00195         movwf   TBLPTRU
                      00196         movlw   high Message    ; Move Table<15:8>
                      00197         movwf   TBLPTRH
                      00198         movlw   low Message     ; Move Table<7:0>
                      00199         movwf   TBLPTRL
                      00200         tblrd*                  ; Read byte from TBLPTRL to TABLAT
                      00201         movf    TABLAT, W
                      00202 loop
                      00203         call    WR_DATA         ; write to LCD
                      00204         tblrd+*                 ; next row in table
                      00205         movf    TABLAT, W
                      00206         bnz     loop
                      00207         endm
                      00208 
                      00209 DisplayLog  macro   addrH, addrL
                      00210             local   Again, Finish
                      00211             
                      00212             clrf    SkipCount
                      00213             clrf    MAX_EE
                      00214 
                      00215             ; Check if there is No Data first
                      00216             READEE      REG_EE, addrH, addrL
                      00217             movlw       0xFF
                      00218             cpfseq      REG_EE
                      00219             goto        Again
                      00220             Display     NoData
                      00221             goto        Finish
                      00222 Again
                      00223             ; Put a space every 3 Writes
                      00224             movlw       d'3'
                      00225             cpfslt      SkipCount
                      00226             cpfslt      MAX_EE
                      00227             goto        Finish
                      00228 
                      00229             ; read EEPROM
                      00230             READEE      REG_EE, addrH, addrL
                      00231             btfsc       REG_EE, 7       ; if bit 7 set then done
                      00232             goto        Finish
                      00233 Finish
                      00234             endm
                      00235             
                      00236 ;TransferLog macro   addrH, addrL
                      00237         
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00238 
                      00239 incf_BCD    macro   BCD
                      00240         local ones, endBCD
                      00241         movff   BCD, temp
                      00242         
                      00243         ;process ones digit
                      00244         movlw   0x0f
                      00245         andwf   temp
                      00246         movlw   d'9'
                      00247         
                      00248         ;skip if ones digit is 9
                      00249         cpfseq  temp
                      00250         goto    ones
                      00251         
                      00252         movlw   b'00010000'
                      00253         addwf   BCD
                      00254         movlw   0xf0
                      00255         andwf   BCD
                      00256         movlw   0xa0
                      00257         cpfslt  BCD
                      00258         
                      00259         clrf    BCD
                      00260         goto    endBCD
                      00261         
                      00262 ones
                      00263         incf    BCD
                      00264         goto    endBCD
                      00265 endBCD
                      00266         nop
                      00267         endm
                      00268         
                      00269 SUB16   macro   x, y        ; does not modify x nor y
                      00270         local   RESULTS
                      00271         movff   y+1, WREG   ; move high y into working register
                      00272         subwf   x+1, 0      ; do subtraction xH - yH => w
                      00273         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
                      00274         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                      00275         
                      00276         movff   y+0, WREG
                      00277         subwf   x+0, 0  
                      00278 RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
                      00279         endm
                      00280 
                      00281 WriteRTC    macro
                      00282         movff   tens_digit, WREG
                      00283         call    WR_DATA
                      00284         movff   ones_digit, WREG
                      00285         call    WR_DATA
                      00286         endm
                      00287 
                      00288 WriteEE macro   word, addH, addL
                      00289         movff   addH, EEADRH        ; High address
                      00290         movff   addL, EEADR         ; Low address
                      00291         movff   word, EEDATA        ; set word
                      00292 
                      00293         btfsc   EECON1, WR          ; test if WR=0, skip if so
                      00294         bra     $-2
                      00295 
                      00296         bcf     EECON1, EEPGD       ; Point to data memory
                      00297         bcf     EECON1, CFGS        ; Access EEPROM
                      00298         bsf     EECON1, WREN        ; enable write
                      00299         bcf     INTCON, GIE         ; disable interrupts during write
                      00300         bcf     PIR2, EEIF
                      00301 
                      00302         movlw   0x55
                      00303         movwf   EECON2              ; write 55h
                      00304         movlw   0xaa
                      00305         movwf   EECON2              ; write 0xaa
                      00306         bsf     EECON1, WR          ; begin write
                      00307         btfsc   EECON1, WR
                      00308         bra     $-2
                      00309 
                      00310         bsf     INTCON, GIE         ; enable interrupts after write
                      00311         bcf     EECON1, WREN        ; disable writes
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00312         endm
                      00313 
                      00314 READEE  macro   file, addH, addL
                      00315         movff   addH, EEADRH        ; read to high
                      00316         movff   addL, EEADR         ; read to low
                      00317         bcf     EECON1, EEPGD       ; point to data memory
                      00318         bcf     EECON1, CFGS        ; access to EEPROM
                      00319         bsf     EECON1, RD          ; read EEPROM
                      00320         movff   EEDATA, file        ; put data into file
                      00321         endm
                      00322 
                      00323 ChangeMode  macro   ModeId, NextMode
                      00324         local Next, Exit
                      00325 
                      00326         movlw   ModeId              ; poll for mode
                      00327         cpfseq  KEY                 ; check this against key press
                      00328         goto    Exit
                      00329 
                      00330 Next
                      00331         clrf    LATA                ; clear pins before proceeding
                      00332         clrf    LATB
                      00333         clrf    LATC
                      00334         clrf    LATD
                      00335         goto    NextMode
                      00336 
                      00337 Exit
                      00338         nop
                      00339         endm
                      00340 
                      00341 saveContext macro
                      00342     movff   STATUS, temp_S          ; save STATUS first
                      00343     movwf   temp_W                  ; save W
                      00344     endm
                      00345 
                      00346 restoreContext macro
                      00347     swapf   temp_W, W               ; restore W first
                      00348     movff   temp_S, STATUS          ; restore STATUS last without affecting W
                      00349     endm
                      00350 ;*******************************************************************************
                      00351 ; reset vector and isrs
                      00352 ;*******************************************************************************
                      00353         ORG     0x000               ; processor reset vector
000000 EF?? F???      00354         goto    INIT                ; go to beginning of program
                      00355 
                      00356         ORG     0x008
000008 EF?? F???      00357         goto    ISR_HIGH
                      00358 
                      00359         ORG     0x018
000018 EF?? F???      00360         goto    ISR_LOW
                      00361 
00001C                00362 ISR_HIGH
                      00363         saveContext
00001C CFD8 F013          M     movff   STATUS, temp_S          ; save STATUS first
000020 6E14               M     movwf   temp_W                  ; save W
                      00364         
                      00365         ; displaying the execution time in seconds
Warning[202]: Argument out of range.  Least significant bits used.
000022 3818           00366         swapf   OP_sec, WREG    ; 100's seconds
000024 6E17           00367         movwf   temp
000026 0E0F           00368         movlw   0x0F
000028 1617           00369         andwf   temp
00002A C017 FFE8      00370         movff   temp, WREG
00002E 0F30           00371         addlw   0x30
000030 EC?? F???      00372         call    WR_DATA
                      00373 
000034 C018 F017      00374         movff   OP_sec, temp    ; 10's seconds
000038 0E0F           00375         movlw   0x0F
00003A 1617           00376         andwf   temp            ; Temp = lower nibble of Op_sec
00003C C017 FFE8      00377         movff   temp, WREG      ; W = Temp
000040 0F30           00378         addlw   0x30            ; Convert to ASCII
000042 EC?? F???      00379         call    WR_DATA
                      00380         
Warning[202]: Argument out of range.  Least significant bits used.
000046 3819           00381         swapf   OP_INT, WREG    ;1's seconds
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000048 6E17           00382         movwf   temp
00004A 0E0F           00383         movlw   0x0f
00004C 1617           00384         andwf   temp
00004E C017 FFE8      00385         movff   temp, WREG
000052 0F30           00386         addlw   0x30
000054 EC?? F???      00387         call    WR_DATA
                      00388 
000058 0E73           00389         movlw   0x73            ; Write 's'
00005A EC?? F???      00390         call    WR_DATA
00005E EC?? F???      00391         call    LCD_L2
                      00392 
                      00393         ;reset timer 
000062 0EC6           00394         movlw   0xc6
000064 6ED7           00395         movwf   TMR0H
000066 0E3E           00396         movlw   0x3e
000068 6ED6           00397         movwf   TMR0L
                      00398                 
                      00399         ;timer interrupt
00006A A4F2           00400         btfss   INTCON, TMR0IF
00006C EF?? F???      00401         goto    END_ISR_HIGH
                      00402         
                      00403         incf_BCD    OP_INT
  0000                    M         local ones, endBCD
000070 C019 F017          M         movff   OP_INT, temp
                          M         
                          M         ;process ones digit
000074 0E0F               M         movlw   0x0f
000076 1617               M         andwf   temp
000078 0E09               M         movlw   d'9'
                          M         
                          M         ;skip if ones digit is 9
00007A 6217               M         cpfseq  temp
00007C EF?? F???          M         goto    ones
                          M         
000080 0E10               M         movlw   b'00010000'
000082 2619               M         addwf   OP_INT
000084 0EF0               M         movlw   0xf0
000086 1619               M         andwf   OP_INT
000088 0EA0               M         movlw   0xa0
00008A 6019               M         cpfslt  OP_INT
                          M         
00008C 6A19               M         clrf    OP_INT
00008E EF?? F???          M         goto    endBCD
                          M         
000092                    M ones
000092 2A19               M         incf    OP_INT
000094 EF?? F???          M         goto    endBCD
000098                    M endBCD
000098 0000               M         nop
00009A 0E00           00404         movlw   d'0'
00009C 6219           00405         cpfseq  OP_INT
00009E EF?? F???      00406         goto    END_ISR_HIGH
                      00407         incf_BCD    OP_sec
  0000                    M         local ones, endBCD
0000A2 C018 F017          M         movff   OP_sec, temp
                          M         
                          M         ;process ones digit
0000A6 0E0F               M         movlw   0x0f
0000A8 1617               M         andwf   temp
0000AA 0E09               M         movlw   d'9'
                          M         
                          M         ;skip if ones digit is 9
0000AC 6217               M         cpfseq  temp
0000AE EF?? F???          M         goto    ones
                          M         
0000B2 0E10               M         movlw   b'00010000'
0000B4 2618               M         addwf   OP_sec
0000B6 0EF0               M         movlw   0xf0
0000B8 1618               M         andwf   OP_sec
0000BA 0EA0               M         movlw   0xa0
0000BC 6018               M         cpfslt  OP_sec
                          M         
0000BE 6A18               M         clrf    OP_sec
0000C0 EF?? F???          M         goto    endBCD
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         
0000C4                    M ones
0000C4 2A18               M         incf    OP_sec
0000C6 EF?? F???          M         goto    endBCD
0000CA                    M endBCD
0000CA 0000               M         nop
                      00408 
0000CC                00409 END_ISR_HIGH
0000CC 94F2           00410         bcf     INTCON, TMR0IF
                      00411         restoreContext
0000CE 3814               M     swapf   temp_W, W               ; restore W first
0000D0 C013 FFD8          M     movff   temp_S, STATUS          ; restore STATUS last without affecting W
0000D4 0010           00412         retfie
                      00413 
0000D6                00414 ISR_LOW
                      00415         saveContext
0000D6 CFD8 F013          M     movff   STATUS, temp_S          ; save STATUS first
0000DA 6E14               M     movwf   temp_W                  ; save W
                      00416         ; KEYPAD INTERRUPT
0000DC A0F0           00417         btfss           INTCON3, INT1IF                 ; If KEYPAD interrupt, skip return
0000DE EF?? F???      00418         goto            END_ISR_LOW
                      00419 
                      00420         ;Check operation status
                      00421 ;       movlw           0xff                                    ; If in operation, skip return
                      00422 ;       cpfseq          InExecution
                      00423 ;       goto            END_ISR_LOW
                      00424 
                      00425         ; Process KEY
0000E2 3881           00426         swapf           PORTB, W                                ; Read PORTB<7:4> into W<3:0>
0000E4 0B0F           00427         andlw           0x0f
0000E6 6E12           00428         movwf           KEY_ISR                                 ; Put W into KEY_ISR
                      00429 ;       movlw           keyS                                    ; Put keyStar into W to compare to KEY_ISR
                      00430 ;       cpfseq          KEY_ISR                                 ; If key was '*', skip return
0000E8 EF?? F???      00431         goto            END_ISR_LOW
                      00432 
                      00433         ; Reset program counter
0000EC 6AFF           00434         clrf            TOSU
0000EE 6AFE           00435         clrf            TOSH
0000F0 6AFD           00436         clrf            TOSL
                      00437 
0000F2                00438 END_ISR_LOW
0000F2 90F0           00439         bcf                     INTCON3, INT1IF         ; Clear flag for next interrupt
                      00440         restoreContext
0000F4 3814               M     swapf   temp_W, W               ; restore W first
0000F6 C013 FFD8          M     movff   temp_S, STATUS          ; restore STATUS last without affecting W
0000FA 0010           00441         retfie
                      00442 
                      00443 ;*******************************************************************************
                      00444 ; main
                      00445 ;*******************************************************************************
0000FC                00446 INIT
                      00447         ; i/o
0000FC 0EFF           00448         movlw   b'11111111'
0000FE 6E92           00449         movwf   TRISA
000100 0EFF           00450         movlw   b'11111111'
000102 6E93           00451         movwf   TRISB               ; keypad
000104 0E00           00452         movlw   b'00000000'
000106 6E94           00453         movwf   TRISC
000108 0E00           00454         movlw   b'00000000'
00010A 6E95           00455         movwf   TRISD
00010C 0E07           00456         movlw   b'00000111'
00010E 6E96           00457         movwf   TRISE
                      00458 
                      00459         ; analog/digital pins
000110 0E0F           00460         movlw   b'00001111'     ; Set all AN pins to Digital
000112 6EC1           00461         movwf   ADCON1
                      00462 
                      00463         ; clear ports
000114 6A89           00464         clrf    LATA
000116 6A8A           00465         clrf    LATB
                      00466 ;       bcf     TRISC, SCL
                      00467 ;       bcf     TRISC, SDA
000118 6A8B           00468         clrf    LATC
00011A 6A8C           00469         clrf    LATD
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00011C 6A8D           00470         clrf    LATE
                      00471         
00011E 0E00           00472         movlw   b'00000000'
000120 6EC2           00473         movwf   ADCON0
000122 0EFF           00474         movlw   b'11111111'
000124 6EC1           00475         movwf   ADCON1
                      00476         
                      00477         ; initializations
000126 EC?? F???      00478         call    InitLCD
                      00479         ConfigLCD
00012A 0E28               M           movlw     b'00101000'    ; 4 bits, 2 lines,5X7 dots seems to work best instead of the above setting
00012C EC?? F???          M           call      WR_INS
                          M 
000130 0E0C               M           movlw     b'00001100'    ; display on/off
000132 EC?? F???          M           call      WR_INS
                          M          ; movlw     B'00000110'    ; Entry mode
                          M          ; call      WR_INS
000136 0E01               M           movlw     b'00000001'    ; Clear ram
000138 EC?? F???          M           call      WR_INS
00013C EC?? F???      00480         call    RTC_INIT
000140 EC?? F???      00481         call    Delay50ms
                      00482         COLOUR_INIT
                          M         COLOUR_WRITE    0x00, 0x01 ; Enable Register (0x00), Power ON (0x01)
000144 0E00               M         movlw   0x00
000146 6E??               M         movwf   regaddress
000148 0E01               M         movlw   0x01
00014A 6E??               M         movwf   databyte
00014C EC?? F???          M         call    WRITE_COLOUR_I2C
000150 EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x00, 0x02 ; Enable Register (0x00), RGBC enable (0x02)
000154 0E00               M         movlw   0x00
000156 6E??               M         movwf   regaddress
000158 0E02               M         movlw   0x02
00015A 6E??               M         movwf   databyte
00015C EC?? F???          M         call    WRITE_COLOUR_I2C
000160 EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x01, 0xf6 ; Timing Register (0x01), 24ms (0xf6) cycle
000164 0E01               M         movlw   0x01
000166 6E??               M         movwf   regaddress
000168 0EF6               M         movlw   0xf6
00016A 6E??               M         movwf   databyte
00016C EC?? F???          M         call    WRITE_COLOUR_I2C
000170 EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x0f, 0x03 ; Control Register (0x0f), 60x gain (0x03)
000174 0E0F               M         movlw   0x0f
000176 6E??               M         movwf   regaddress
000178 0E03               M         movlw   0x03
00017A 6E??               M         movwf   databyte
00017C EC?? F???          M         call    WRITE_COLOUR_I2C
000180 EC?? F???          M         call    delay5ms
000184 EC?? F???      00483         call    INIT_USART
                      00484 
                      00485         ; interrupts
000188 6AD0           00486         clrf    RCON
00018A 6AF2           00487         clrf    INTCON
00018C 6AF1           00488         clrf    INTCON2
00018E 6AF0           00489         clrf    INTCON3
000190 8ED0           00490         bsf     RCON, IPEN          ; priority mode
000192 8EF2           00491         bsf     INTCON, GIEH        ; permit global interrupts
000194 8CF2           00492         bsf     INTCON, GIEL
000196 8AF1           00493         bsf     INTCON2, INTEDG1    ; INTEDG1 on rising edge
000198 8AF2           00494         bsf     INTCON, TMR0IE      ; clear timer0 overflow interrupt flag
00019A 84F2           00495         bsf     INTCON, TMR0IF      ; clear timer0 overflow interrupt flag
00019C 84F1           00496         bsf     INTCON2, TMR0IP     ; set to high priority
00019E 86F0           00497         bsf     INTCON3, INT1IE
0001A0 9CF0           00498         bcf     INTCON3, INT1IP
                      00499         
                      00500         ; setting up timer to sychronize with 1 second clock intervals
0001A2 9ED5           00501         bcf     T0CON, TMR0ON
0001A4 9CD5           00502         bcf     T0CON, T08BIT
0001A6 9AD5           00503         bcf     T0CON, T0CS
0001A8 98D5           00504         bcf     T0CON, T0SE
0001AA 96D5           00505         bcf     T0CON, PSA
0001AC 94D5           00506         bcf     T0CON, T0PS2        ; set prescaling to 1:16. this allows for 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001AE 82D5           00507         bsf     T0CON, T0PS1        ; a preloading of ~50750 or 0xc63e. very
0001B0 80D5           00508         bsf     T0CON, T0PS0        ; good approximation within 3 minutes.
                      00509 
0001B2 6A21           00510         clrf    H_EE
0001B4 6A22           00511         clrf    L_EE
0001B6 6A??           00512         clrf    tens_digit
0001B8 6A??           00513         clrf    ones_digit
0001BA 6A40           00514         clrf    ESKA
0001BC 6A41           00515         clrf    ESKA_CAP
0001BE 6A42           00516         clrf    YOP
0001C0 6A43           00517         clrf    YOP_CAP
                      00518         
0001C2 0EF2           00519         movlw     b'11110010'    ; Set required keypad inputs
0001C4 6E93           00520         movwf     TRISB
                      00521         
0001C6 EC?? F???      00522         call    ClrLCD
                      00523         Display Welcome
  0000                    M         local   loop
0001CA 0E??               M         movlw   upper Welcome   ; Move Table<20:16>
0001CC 6EF8               M         movwf   TBLPTRU
0001CE 0E??               M         movlw   high Welcome    ; Move Table<15:8>
0001D0 6EF7               M         movwf   TBLPTRH
0001D2 0E??               M         movlw   low Welcome     ; Move Table<7:0>
0001D4 6EF6               M         movwf   TBLPTRL
0001D6 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0001D8 50F5               M         movf    TABLAT, W
0001DA                    M loop
0001DA EC?? F???          M         call    WR_DATA         ; write to LCD
0001DE 000B               M         tblrd+*                 ; next row in table
0001E0 50F5               M         movf    TABLAT, W
0001E2 E1??               M         bnz     loop
0001E4 EC?? F???      00524         call LCD_L2
                      00525         Display Team
  0000                    M         local   loop
0001E8 0E??               M         movlw   upper Team      ; Move Table<20:16>
0001EA 6EF8               M         movwf   TBLPTRU
0001EC 0E??               M         movlw   high Team       ; Move Table<15:8>
0001EE 6EF7               M         movwf   TBLPTRH
0001F0 0E??               M         movlw   low Team        ; Move Table<7:0>
0001F2 6EF6               M         movwf   TBLPTRL
0001F4 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0001F6 50F5               M         movf    TABLAT, W
0001F8                    M loop
0001F8 EC?? F???          M         call    WR_DATA         ; write to LCD
0001FC 000B               M         tblrd+*                 ; next row in table
0001FE 50F5               M         movf    TABLAT, W
000200 E1??               M         bnz     loop
                      00526         
                      00527         Delay50N delayR, 0x28
  0000                    M         local   loop
000202 0E28               M         movlw   0x28
000204 6E1B               M         movwf   delayR
                          M 
000206                    M loop
000206 EC?? F???          M         call    Delay50ms
00020A 2E1B               M         decfsz  delayR
00020C EF?? F???          M         goto    loop
                      00528 
                      00529 ;*******************************************************************************
                      00530 ; standby mode
                      00531 ;*******************************************************************************
000210                00532 STANDBY
000210 EC?? F???      00533         call    ClrLCD
                      00534         Display StandBy
  0000                    M         local   loop
000214 0E??               M         movlw   upper StandBy   ; Move Table<20:16>
000216 6EF8               M         movwf   TBLPTRU
000218 0E??               M         movlw   high StandBy    ; Move Table<15:8>
00021A 6EF7               M         movwf   TBLPTRH
00021C 0E??               M         movlw   low StandBy     ; Move Table<7:0>
00021E 6EF6               M         movwf   TBLPTRL
000220 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000222 50F5               M         movf    TABLAT, W
000224                    M loop
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000224 EC?? F???          M         call    WR_DATA         ; write to LCD
000228 000B               M         tblrd+*                 ; next row in table
00022A 50F5               M         movf    TABLAT, W
00022C E1??               M         bnz     loop
                      00535 
00022E                00536 HOLD_STANDBY
00022E EC?? F???      00537         call    READ_KEY_TIME
                      00538         ChangeMode key5, COLOUR_TEST
  0000                    M         local Next, Exit
                          M 
000232 0E05               M         movlw   key5                ; poll for mode
000234 6210               M         cpfseq  KEY                 ; check this against key press
000236 EF?? F???          M         goto    Exit
                          M 
00023A                    M Next
00023A 6A89               M         clrf    LATA                ; clear pins before proceeding
00023C 6A8A               M         clrf    LATB
00023E 6A8B               M         clrf    LATC
000240 6A8C               M         clrf    LATD
000242 EF?? F???          M         goto    COLOUR_TEST
                          M 
000246                    M Exit
000246 0000               M         nop
                      00539         ChangeMode keyA, EXECUTION
  0000                    M         local Next, Exit
                          M 
000248 0E03               M         movlw   keyA                ; poll for mode
00024A 6210               M         cpfseq  KEY                 ; check this against key press
00024C EF?? F???          M         goto    Exit
                          M 
000250                    M Next
000250 6A89               M         clrf    LATA                ; clear pins before proceeding
000252 6A8A               M         clrf    LATB
000254 6A8B               M         clrf    LATC
000256 6A8C               M         clrf    LATD
000258 EF?? F???          M         goto    EXECUTION
                          M 
00025C                    M Exit
00025C 0000               M         nop
                      00540         ChangeMode keyB, LOG
  0000                    M         local Next, Exit
                          M 
00025E 0E07               M         movlw   keyB                ; poll for mode
000260 6210               M         cpfseq  KEY                 ; check this against key press
000262 EF?? F???          M         goto    Exit
                          M 
000266                    M Next
000266 6A89               M         clrf    LATA                ; clear pins before proceeding
000268 6A8A               M         clrf    LATB
00026A 6A8B               M         clrf    LATC
00026C 6A8C               M         clrf    LATD
00026E EF?? F???          M         goto    LOG
                          M 
000272                    M Exit
000272 0000               M         nop
                      00541         ChangeMode keyC, PERM_LOG
  0000                    M         local Next, Exit
                          M 
000274 0E0B               M         movlw   keyC                ; poll for mode
000276 6210               M         cpfseq  KEY                 ; check this against key press
000278 EF?? F???          M         goto    Exit
                          M 
00027C                    M Next
00027C 6A89               M         clrf    LATA                ; clear pins before proceeding
00027E 6A8A               M         clrf    LATB
000280 6A8B               M         clrf    LATC
000282 6A8C               M         clrf    LATD
000284 EF?? F???          M         goto    PERM_LOG
                          M 
000288                    M Exit
000288 0000               M         nop
                      00542         ChangeMode keyD, PC_MODE
  0000                    M         local Next, Exit
                          M 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00028A 0E0F               M         movlw   keyD                ; poll for mode
00028C 6210               M         cpfseq  KEY                 ; check this against key press
00028E EF?? F???          M         goto    Exit
                          M 
000292                    M Next
000292 6A89               M         clrf    LATA                ; clear pins before proceeding
000294 6A8A               M         clrf    LATB
000296 6A8B               M         clrf    LATC
000298 6A8C               M         clrf    LATD
00029A EF?? F???          M         goto    PC_MODE
                          M 
00029E                    M Exit
00029E 0000               M         nop
0002A0 D???           00543         bra     HOLD_STANDBY
                      00544 
                      00545 ;*******************************************************************************
                      00546 ; execution mode
                      00547 ;*******************************************************************************
                      00548 
0002A2                00549 CHECK_CLEAR
                      00550         SUB16   CLEAR, RED                  ; check first against red
  0000                    M         local   RESULTS
0002A2 C047 FFE8          M         movff   RED+1, WREG ; move high y into working register
0002A6 5C45               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
0002A8 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0002AA EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0002AE C046 FFE8          M         movff   RED+0, WREG
0002B2 5C44               M         subwf   CLEAR+0, 0 
0002B4                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0002B4 A0D8           00551         btfss   STATUS, C
0002B6 0012           00552         return                              ; RED > CLEAR
                      00553         
                      00554         SUB16   CLEAR, GREEN                ; check against green
  0000                    M         local   RESULTS
0002B8 C049 FFE8          M         movff   GREEN+1, WREG ; move high y into working register
0002BC 5C45               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
0002BE A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0002C0 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0002C4 C048 FFE8          M         movff   GREEN+0, WREG
0002C8 5C44               M         subwf   CLEAR+0, 0 
0002CA                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0002CA A0D8           00555         btfss   STATUS, C
0002CC 0012           00556         return                              ; GREEN > CLEAR
                      00557         
                      00558         SUB16   CLEAR, BLUE                 ; check against blue
  0000                    M         local   RESULTS
0002CE C04B FFE8          M         movff   BLUE+1, WREG ; move high y into working register
0002D2 5C45               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
0002D4 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0002D6 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0002DA C04A FFE8          M         movff   BLUE+0, WREG
0002DE 5C44               M         subwf   CLEAR+0, 0 
0002E0                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0002E0 A0D8           00559         btfss   STATUS, C
0002E2 0012           00560         return                              ; BLUE > CLEAR
                      00561         
0002E4 0E63           00562         movlw   'c'                         ; CLEAR > everything else
0002E6 EC?? F???      00563         call    WR_DATA
0002EA D???           00564         bra     LOOPING
0002EC                00565 CHECK_RED
                      00566         SUB16   RED, CLEAR                  ; check first against clear
  0000                    M         local   RESULTS
0002EC C045 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
0002F0 5C47               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
0002F2 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0002F4 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0002F8 C044 FFE8          M         movff   CLEAR+0, WREG
0002FC 5C46               M         subwf   RED+0, 0 
0002FE                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0002FE A0D8           00567         btfss   STATUS, C
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000300 0012           00568         return                              ; CLEAR > RED
                      00569         
                      00570         SUB16   RED, GREEN                  ; check against green
  0000                    M         local   RESULTS
000302 C049 FFE8          M         movff   GREEN+1, WREG ; move high y into working register
000306 5C47               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
000308 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00030A EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00030E C048 FFE8          M         movff   GREEN+0, WREG
000312 5C46               M         subwf   RED+0, 0 
000314                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000314 A0D8           00571         btfss   STATUS, C
000316 0012           00572         return                              ; GREEN > RED
                      00573         
                      00574         SUB16   RED, BLUE                   ; check against blue
  0000                    M         local   RESULTS
000318 C04B FFE8          M         movff   BLUE+1, WREG ; move high y into working register
00031C 5C47               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
00031E A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000320 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000324 C04A FFE8          M         movff   BLUE+0, WREG
000328 5C46               M         subwf   RED+0, 0 
00032A                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
00032A A0D8           00575         btfss   STATUS, C
00032C 0012           00576         return                              ; BLUE > RED
                      00577         
00032E 0E72           00578         movlw   'r'                         ; RED > everything else
000330 EC?? F???      00579         call    WR_DATA
000334 D???           00580         bra     LOOPING
000336                00581 CHECK_GREEN
                      00582         SUB16   GREEN, CLEAR                ; check first against clear
  0000                    M         local   RESULTS
000336 C045 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
00033A 5C49               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
00033C A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00033E EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000342 C044 FFE8          M         movff   CLEAR+0, WREG
000346 5C48               M         subwf   GREEN+0, 0 
000348                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000348 A0D8           00583         btfss   STATUS, C
00034A 0012           00584         return                              ; CLEAR > GREEN
                      00585         
                      00586         SUB16   GREEN, RED                  ; check against red
  0000                    M         local   RESULTS
00034C C047 FFE8          M         movff   RED+1, WREG ; move high y into working register
000350 5C49               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
000352 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000354 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000358 C046 FFE8          M         movff   RED+0, WREG
00035C 5C48               M         subwf   GREEN+0, 0 
00035E                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
00035E A0D8           00587         btfss   STATUS, C
000360 0012           00588         return                              ; RED > GREEN
                      00589         
                      00590         SUB16   GREEN, BLUE                 ; check against blue
  0000                    M         local   RESULTS
000362 C04B FFE8          M         movff   BLUE+1, WREG ; move high y into working register
000366 5C49               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
000368 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00036A EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00036E C04A FFE8          M         movff   BLUE+0, WREG
000372 5C48               M         subwf   GREEN+0, 0 
000374                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000374 A0D8           00591         btfss   STATUS, C
000376 0012           00592         return                              ; BLUE > GREEN
                      00593         
000378 0E67           00594         movlw   'g'                         ; GREEN > everything else
00037A EC?? F???      00595         call    WR_DATA
00037E D???           00596         bra     LOOPING
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000380                00597 CHECK_BLUE
                      00598         SUB16   BLUE, CLEAR                 ; check first against clear
  0000                    M         local   RESULTS
000380 C045 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
000384 5C4B               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
000386 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000388 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00038C C044 FFE8          M         movff   CLEAR+0, WREG
000390 5C4A               M         subwf   BLUE+0, 0 
000392                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000392 A0D8           00599         btfss   STATUS, C
000394 0012           00600         return                              ; CLEAR > BLUE
                      00601         
                      00602         SUB16   BLUE, RED                   ; check against red
  0000                    M         local   RESULTS
000396 C047 FFE8          M         movff   RED+1, WREG ; move high y into working register
00039A 5C4B               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
00039C A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00039E EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003A2 C046 FFE8          M         movff   RED+0, WREG
0003A6 5C4A               M         subwf   BLUE+0, 0 
0003A8                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003A8 A0D8           00603         btfss   STATUS, C
0003AA 0012           00604         return                              ; RED > BLUE
                      00605 
                      00606         SUB16   BLUE, GREEN                 ; check against green
  0000                    M         local   RESULTS
0003AC C049 FFE8          M         movff   GREEN+1, WREG ; move high y into working register
0003B0 5C4B               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
0003B2 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003B4 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003B8 C048 FFE8          M         movff   GREEN+0, WREG
0003BC 5C4A               M         subwf   BLUE+0, 0 
0003BE                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003BE A0D8           00607         btfss   STATUS, C
0003C0 0012           00608         return                              ; GREEN > CLEAR
                      00609         
0003C2 0E62           00610         movlw   'b'                         ; BLUE > everything else
0003C4 EC?? F???      00611         call    WR_DATA
0003C8 0012           00612         return
                      00613         
0003CA                00614 COLOUR_TEST
                      00615 
0003CA                00616 LOOPING
                      00617         Delay50N delayR, 0x28
  0000                    M         local   loop
0003CA 0E28               M         movlw   0x28
0003CC 6E1B               M         movwf   delayR
                          M 
0003CE                    M loop
0003CE EC?? F???          M         call    Delay50ms
0003D2 2E1B               M         decfsz  delayR
0003D4 EF?? F???          M         goto    loop
0003D8 EC?? F???      00618         call    ClrLCD
                      00619         COLOUR_GET_DATA CLEAR, RED, GREEN, BLUE
0003DC EC?? F???          M         call    delay5ms
                          M         
                          M         COLOUR_READ 0x14    ; read clear colour address low, command bits set later
0003E0 0E14               M         movlw   0x14
0003E2 6E??               M         movwf   regaddress
0003E4 EC?? F???          M         call    READ_COLOUR_I2C
0003E8 C??? F044          M         movff   databyte, CLEAR+0
                          M         COLOUR_READ 0x15    ; read clear colour address high, command bits set later
0003EC 0E15               M         movlw   0x15
0003EE 6E??               M         movwf   regaddress
0003F0 EC?? F???          M         call    READ_COLOUR_I2C
0003F4 C??? F045          M         movff   databyte, CLEAR+1
                          M                 
                          M         COLOUR_READ 0x16    ; read red colour address low, command bits set later
0003F8 0E16               M         movlw   0x16
0003FA 6E??               M         movwf   regaddress
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003FC EC?? F???          M         call    READ_COLOUR_I2C
000400 C??? F046          M         movff   databyte, RED+0
                          M         COLOUR_READ 0x17    ; read red colour address high, command bits set later
000404 0E17               M         movlw   0x17
000406 6E??               M         movwf   regaddress
000408 EC?? F???          M         call    READ_COLOUR_I2C
00040C C??? F047          M         movff   databyte, RED+1
                          M         
                          M         COLOUR_READ 0x18    ; read green colour address low, command bits set later
000410 0E18               M         movlw   0x18
000412 6E??               M         movwf   regaddress
000414 EC?? F???          M         call    READ_COLOUR_I2C
000418 C??? F048          M         movff   databyte, GREEN+0
                          M         COLOUR_READ 0x19    ; read green colour address high, command bits set later
00041C 0E19               M         movlw   0x19
00041E 6E??               M         movwf   regaddress
000420 EC?? F???          M         call    READ_COLOUR_I2C
000424 C??? F049          M         movff   databyte, GREEN+1
                          M         
                          M         COLOUR_READ 0x1a    ; read blue colour address low, command bits set later
000428 0E1A               M         movlw   0x1a
00042A 6E??               M         movwf   regaddress
00042C EC?? F???          M         call    READ_COLOUR_I2C
000430 C??? F04A          M         movff   databyte, BLUE+0
                          M         COLOUR_READ 0x1b    ; read blue colour address high, command bits set later
000434 0E1B               M         movlw   0x1b
000436 6E??               M         movwf   regaddress
000438 EC?? F???          M         call    READ_COLOUR_I2C
00043C C??? F04B          M         movff   databyte, BLUE+1
                      00620         Delay50N delayR, 0x02
  0000                    M         local   loop
000440 0E02               M         movlw   0x02
000442 6E1B               M         movwf   delayR
                          M 
000444                    M loop
000444 EC?? F???          M         call    Delay50ms
000448 2E1B               M         decfsz  delayR
00044A EF?? F???          M         goto    loop
                      00621 
00044E EC?? F???      00622         call    CHECK_RED
000452 EC?? F???      00623         call    CHECK_CLEAR
000456 EC?? F???      00624         call    CHECK_GREEN
00045A EC?? F???      00625         call    CHECK_BLUE
00045E D???           00626         bra LOOPING
                      00627         
000460                00628 EXECUTION
000460 EC?? F???      00629         call        ClearEEPROM_21
                      00630         ; save the starting time
000464 EC?? F???      00631         call        SAVE_TIME
                      00632                 
                      00633         ; display
000468 681F           00634         setf        inExecution
00046A EC?? F???      00635         call        ClrLCD
                      00636         Display     Exe1
  0000                    M         local   loop
00046E 0E??               M         movlw   upper Exe1      ; Move Table<20:16>
000470 6EF8               M         movwf   TBLPTRU
000472 0E??               M         movlw   high Exe1       ; Move Table<15:8>
000474 6EF7               M         movwf   TBLPTRH
000476 0E??               M         movlw   low Exe1        ; Move Table<7:0>
000478 6EF6               M         movwf   TBLPTRL
00047A 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
00047C 50F5               M         movf    TABLAT, W
00047E                    M loop
00047E EC?? F???          M         call    WR_DATA         ; write to LCD
000482 000B               M         tblrd+*                 ; next row in table
000484 50F5               M         movf    TABLAT, W
000486 E1??               M         bnz     loop
000488 EC?? F???      00637         call        LCD_L2
00048C 0EC5           00638         movlw       0xc5                    ; setting up timer
00048E 6ED7           00639         movwf       TMR0H
000490 0E44           00640         movlw       0x44    
000492 6ED6           00641         movwf       TMR0L
                      00642         
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000494 8ED5           00643         bsf         T0CON, TMR0ON           ; turning on timer
                      00644         ; initialize variables
000496 6A18           00645         clrf        OP_sec
000498 6A19           00646         clrf        OP_INT
00049A 6A44           00647         clrf        CLEAR
00049C 6A48           00648         clrf        GREEN
00049E 6A46           00649         clrf        RED
0004A0 6A4A           00650         clrf        BLUE
                      00651         
                      00652 ;COLLECTIONS_STEP
                      00653 ;       
                      00654 ;TERM_CHECK
                      00655 ;       
                      00656 ;BOTTLE_CHECK
                      00657 ;
                      00658 ;COLOUR_ONE
                      00659 ;
                      00660 ;COLOUR_TWO
                      00661 ;       
                      00662 ;BRAINS
                      00663 ;       
                      00664 ;TRAY_STEP
                      00665 ;       
                      00666 
0004A2                00667 HOLD_EXE
0004A2 EC?? F???      00668         call        READ_KEY
                      00669         ChangeMode  keyS, EXIT_EXE
  0000                    M         local Next, Exit
                          M 
0004A6 0E0C               M         movlw   keyS                ; poll for mode
0004A8 6210               M         cpfseq  KEY                 ; check this against key press
0004AA EF?? F???          M         goto    Exit
                          M 
0004AE                    M Next
0004AE 6A89               M         clrf    LATA                ; clear pins before proceeding
0004B0 6A8A               M         clrf    LATB
0004B2 6A8B               M         clrf    LATC
0004B4 6A8C               M         clrf    LATD
0004B6 EF?? F???          M         goto    EXIT_EXE
                          M 
0004BA                    M Exit
0004BA 0000               M         nop
0004BC D???           00670         bra         HOLD_EXE
                      00671         
0004BE                00672 EXIT_EXE
                      00673         ; stop timer and save the execution time to eeprom
0004BE 9ED5           00674         bcf         T0CON, TMR0ON
0004C0 EC?? F???      00675         call        SAVE_EXE_TIME
                      00676                 
                      00677         ; Clear inExecution flag to stop '*' interrupts
0004C4 6A1F           00678         clrf        inExecution
                      00679         
0004C6 C040 FFE8      00680         movff       ESKA, WREG
0004CA 0F30           00681         addlw       0x30
                      00682         WriteEE     WREG, H_EE, L_EE
0004CC C021 FFAA          M         movff   H_EE, EEADRH        ; High address
0004D0 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
0004D4 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
0004D8 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
0004DA D???               M         bra     $-2
                          M 
0004DC 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
0004DE 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
0004E0 84A6               M         bsf     EECON1, WREN        ; enable write
0004E2 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
0004E4 98A1               M         bcf     PIR2, EEIF
                          M 
0004E6 0E55               M         movlw   0x55
0004E8 6EA7               M         movwf   EECON2              ; write 55h
0004EA 0EAA               M         movlw   0xaa
0004EC 6EA7               M         movwf   EECON2              ; write 0xaa
0004EE 82A6               M         bsf     EECON1, WR          ; begin write
0004F0 B2A6               M         btfsc   EECON1, WR
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0004F2 D???               M         bra     $-2
                          M 
0004F4 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
0004F6 94A6               M         bcf     EECON1, WREN        ; disable writes
0004F8 2A22           00683         incf        L_EE
                      00684         
0004FA C041 FFE8      00685         movff       ESKA_CAP, WREG
0004FE 0F30           00686         addlw       0x30
                      00687         WriteEE     WREG, H_EE, L_EE
000500 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000504 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000508 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
00050C B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
00050E D???               M         bra     $-2
                          M 
000510 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000512 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000514 84A6               M         bsf     EECON1, WREN        ; enable write
000516 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000518 98A1               M         bcf     PIR2, EEIF
                          M 
00051A 0E55               M         movlw   0x55
00051C 6EA7               M         movwf   EECON2              ; write 55h
00051E 0EAA               M         movlw   0xaa
000520 6EA7               M         movwf   EECON2              ; write 0xaa
000522 82A6               M         bsf     EECON1, WR          ; begin write
000524 B2A6               M         btfsc   EECON1, WR
000526 D???               M         bra     $-2
                          M 
000528 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
00052A 94A6               M         bcf     EECON1, WREN        ; disable writes
00052C 2A22           00688         incf        L_EE
                      00689         
00052E C042 FFE8      00690         movff       YOP, WREG
000532 0F30           00691         addlw       0x30
                      00692         WriteEE     WREG, H_EE, L_EE
000534 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000538 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
00053C CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000540 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000542 D???               M         bra     $-2
                          M 
000544 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000546 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000548 84A6               M         bsf     EECON1, WREN        ; enable write
00054A 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
00054C 98A1               M         bcf     PIR2, EEIF
                          M 
00054E 0E55               M         movlw   0x55
000550 6EA7               M         movwf   EECON2              ; write 55h
000552 0EAA               M         movlw   0xaa
000554 6EA7               M         movwf   EECON2              ; write 0xaa
000556 82A6               M         bsf     EECON1, WR          ; begin write
000558 B2A6               M         btfsc   EECON1, WR
00055A D???               M         bra     $-2
                          M 
00055C 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
00055E 94A6               M         bcf     EECON1, WREN        ; disable writes
000560 2A22           00693         incf        L_EE
                      00694         
000562 C043 FFE8      00695         movff       YOP_CAP, WREG
000566 0F30           00696         addlw       0x30
                      00697         WriteEE     WREG, H_EE, L_EE
000568 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
00056C C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000570 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000574 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000576 D???               M         bra     $-2
                          M 
000578 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
00057A 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00057C 84A6               M         bsf     EECON1, WREN        ; enable write
00057E 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000580 98A1               M         bcf     PIR2, EEIF
                          M 
000582 0E55               M         movlw   0x55
000584 6EA7               M         movwf   EECON2              ; write 55h
000586 0EAA               M         movlw   0xaa
000588 6EA7               M         movwf   EECON2              ; write 0xaa
00058A 82A6               M         bsf     EECON1, WR          ; begin write
00058C B2A6               M         btfsc   EECON1, WR
00058E D???               M         bra     $-2
                          M 
000590 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000592 94A6               M         bcf     EECON1, WREN        ; disable writes
000594 2A22           00698         incf        L_EE
                      00699         
000596 EF?? F???      00700         goto        SaveData
                      00701 
00059A                00702 SaveData
00059A EC?? F???      00703         call        ClrLCD
                      00704         Display     SAVE
  0000                    M         local   loop
00059E 0E??               M         movlw   upper SAVE      ; Move Table<20:16>
0005A0 6EF8               M         movwf   TBLPTRU
0005A2 0E??               M         movlw   high SAVE       ; Move Table<15:8>
0005A4 6EF7               M         movwf   TBLPTRH
0005A6 0E??               M         movlw   low SAVE        ; Move Table<7:0>
0005A8 6EF6               M         movwf   TBLPTRL
0005AA 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0005AC 50F5               M         movf    TABLAT, W
0005AE                    M loop
0005AE EC?? F???          M         call    WR_DATA         ; write to LCD
0005B2 000B               M         tblrd+*                 ; next row in table
0005B4 50F5               M         movf    TABLAT, W
0005B6 E1??               M         bnz     loop
                      00705 
0005B8 0E00           00706         movlw       d'0'
0005BA 6E21           00707         movwf       H_EE
0005BC 0EA8           00708         movlw       d'168'              ; take d'168' as last
0005BE 6E22           00709         movwf       L_EE
0005C0 0E00           00710         movlw       d'0'
0005C2 6E24           00711         movwf       tempH_EE
0005C4 0EDC           00712         movlw       d'220'              ; temp for low constant
0005C6 6E25           00713         movwf       tempL_EE
                      00714         
0005C8 6A16           00715         clrf        counter2
0005CA 6A15           00716         clrf        counter
                      00717         
0005CC                00718 ShiftLoop
0005CC 2A15           00719         incf            counter
                      00720         READEE          REG_EE, H_EE, L_EE
0005CE C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
0005D2 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
0005D6 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
0005D8 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
0005DA 80A6               M         bsf     EECON1, RD          ; read EEPROM
0005DC CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
0005E0 0E15           00721         movlw           d'21'
0005E2 2622           00722         addwf           L_EE
                      00723         WriteEE         REG_EE, H_EE, L_EE
0005E4 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
0005E8 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
0005EC C023 FFA8          M         movff   REG_EE, EEDATA      ; set word
                          M 
0005F0 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
0005F2 D???               M         bra     $-2
                          M 
0005F4 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
0005F6 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
0005F8 84A6               M         bsf     EECON1, WREN        ; enable write
0005FA 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
0005FC 98A1               M         bcf     PIR2, EEIF
                          M 
0005FE 0E55               M         movlw   0x55
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000600 6EA7               M         movwf   EECON2              ; write 55h
000602 0EAA               M         movlw   0xaa
000604 6EA7               M         movwf   EECON2              ; write 0xaa
000606 82A6               M         bsf     EECON1, WR          ; begin write
000608 B2A6               M         btfsc   EECON1, WR
00060A D???               M         bra     $-2
                          M 
00060C 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
00060E 94A6               M         bcf     EECON1, WREN        ; disable writes
000610 0E14           00724         movlw           d'20'
000612 5E22           00725         subwf           L_EE
000614 0E15           00726         movlw           d'21'
000616 6215           00727         cpfseq          counter
000618 EF?? F???      00728         goto            ShiftLoop
                      00729         
                      00730         ; Set EEPROM address to the previous 21 byte block, and reset temp address
00061C 0E2A           00731         movlw           d'42'
00061E 5E22           00732         subwf           L_EE
000620 0EDC           00733         movlw           d'220'
000622 6E25           00734         movwf           tempL_EE
000624 6A15           00735         clrf            counter
000626 2A16           00736         incf            counter2
000628 0E09           00737         movlw           d'9'
00062A 6216           00738         cpfseq          counter2        ; Skip if 9 shifts were made
00062C EF?? F???      00739         goto            ShiftLoop
                      00740 
000630 EF?? F???      00741         goto            LOG
                      00742 
                      00743 ;*******************************************************************************
                      00744 ; sorting statistics log mode
                      00745 ;*******************************************************************************
                      00746         
000634                00747 LOG
000634 EC?? F???      00748         call    ClrLCD
                      00749         Display Log1
  0000                    M         local   loop
000638 0E??               M         movlw   upper Log1      ; Move Table<20:16>
00063A 6EF8               M         movwf   TBLPTRU
00063C 0E??               M         movlw   high Log1       ; Move Table<15:8>
00063E 6EF7               M         movwf   TBLPTRH
000640 0E??               M         movlw   low Log1        ; Move Table<7:0>
000642 6EF6               M         movwf   TBLPTRL
000644 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000646 50F5               M         movf    TABLAT, W
000648                    M loop
000648 EC?? F???          M         call    WR_DATA         ; write to LCD
00064C 000B               M         tblrd+*                 ; next row in table
00064E 50F5               M         movf    TABLAT, W
000650 E1??               M         bnz     loop
                      00750 
                      00751         ; display most recent run data
000652 0E0A           00752         movlw   d'10'
000654 6E22           00753         movwf   L_EE
                      00754 ;       READEE  OP_sec, H_EE, L_EE
                      00755 ;       incf    L_EE
                      00756 ;       READEE  OP_INT, H_EE, L_EE
                      00757 ;       incf    L_EE
000656 EC?? F???      00758         call    DisplayExeTime
                      00759 
00065A EC?? F???      00760         call    LCD_L2
00065E 6A22           00761         clrf    L_EE
000660 EC?? F???      00762         call    DispOpRTC
                      00763 
000664                00764 HOLD_LOG
000664 EC?? F???      00765         call    READ_KEY
                      00766         ChangeMode  keyB, LOG_INFO
  0000                    M         local Next, Exit
                          M 
000668 0E07               M         movlw   keyB                ; poll for mode
00066A 6210               M         cpfseq  KEY                 ; check this against key press
00066C EF?? F???          M         goto    Exit
                          M 
000670                    M Next
000670 6A89               M         clrf    LATA                ; clear pins before proceeding
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000672 6A8A               M         clrf    LATB
000674 6A8B               M         clrf    LATC
000676 6A8C               M         clrf    LATD
000678 EF?? F???          M         goto    LOG_INFO
                          M 
00067C                    M Exit
00067C 0000               M         nop
                      00767         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
00067E 0E0D               M         movlw   key0                ; poll for mode
000680 6210               M         cpfseq  KEY                 ; check this against key press
000682 EF?? F???          M         goto    Exit
                          M 
000686                    M Next
000686 6A89               M         clrf    LATA                ; clear pins before proceeding
000688 6A8A               M         clrf    LATB
00068A 6A8B               M         clrf    LATC
00068C 6A8C               M         clrf    LATD
00068E EF?? F???          M         goto    STANDBY
                          M 
000692                    M Exit
000692 0000               M         nop
000694 D???           00768         bra     HOLD_LOG
                      00769 
000696                00770 LOG_INFO
000696 EC?? F???      00771         call    ClrLCD
                      00772         Display LogInfo1
  0000                    M         local   loop
00069A 0E??               M         movlw   upper LogInfo1  ; Move Table<20:16>
00069C 6EF8               M         movwf   TBLPTRU
00069E 0E??               M         movlw   high LogInfo1   ; Move Table<15:8>
0006A0 6EF7               M         movwf   TBLPTRH
0006A2 0E??               M         movlw   low LogInfo1    ; Move Table<7:0>
0006A4 6EF6               M         movwf   TBLPTRL
0006A6 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0006A8 50F5               M         movf    TABLAT, W
0006AA                    M loop
0006AA EC?? F???          M         call    WR_DATA         ; write to LCD
0006AE 000B               M         tblrd+*                 ; next row in table
0006B0 50F5               M         movf    TABLAT, W
0006B2 E1??               M         bnz     loop
0006B4 EC?? F???      00773         call    LCD_L2
                      00774         Display LogInfo2
  0000                    M         local   loop
0006B8 0E??               M         movlw   upper LogInfo2  ; Move Table<20:16>
0006BA 6EF8               M         movwf   TBLPTRU
0006BC 0E??               M         movlw   high LogInfo2   ; Move Table<15:8>
0006BE 6EF7               M         movwf   TBLPTRH
0006C0 0E??               M         movlw   low LogInfo2    ; Move Table<7:0>
0006C2 6EF6               M         movwf   TBLPTRL
0006C4 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0006C6 50F5               M         movf    TABLAT, W
0006C8                    M loop
0006C8 EC?? F???          M         call    WR_DATA         ; write to LCD
0006CC 000B               M         tblrd+*                 ; next row in table
0006CE 50F5               M         movf    TABLAT, W
0006D0 E1??               M         bnz     loop
0006D2 6A21           00775         clrf    H_EE
0006D4 6A22           00776         clrf    L_EE
                      00777         ;DisplayLog  H_EE, L_EE
0006D6                00778 HOLD_LOG_INFO
0006D6 EC?? F???      00779         call    READ_KEY
                      00780         ChangeMode key0, LOG
  0000                    M         local Next, Exit
                          M 
0006DA 0E0D               M         movlw   key0                ; poll for mode
0006DC 6210               M         cpfseq  KEY                 ; check this against key press
0006DE EF?? F???          M         goto    Exit
                          M 
0006E2                    M Next
0006E2 6A89               M         clrf    LATA                ; clear pins before proceeding
0006E4 6A8A               M         clrf    LATB
0006E6 6A8B               M         clrf    LATC
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0006E8 6A8C               M         clrf    LATD
0006EA EF?? F???          M         goto    LOG
                          M 
0006EE                    M Exit
0006EE 0000               M         nop
0006F0 D???           00781         bra     HOLD_LOG
                      00782         
                      00783 ;*******************************************************************************
                      00784 ; permanent logs
                      00785 ;*******************************************************************************
                      00786 
0006F2                00787 PERM_LOG
0006F2 EC?? F???      00788         call    ClrLCD
                      00789         Display PermLog1
  0000                    M         local   loop
0006F6 0E??               M         movlw   upper PermLog1  ; Move Table<20:16>
0006F8 6EF8               M         movwf   TBLPTRU
0006FA 0E??               M         movlw   high PermLog1   ; Move Table<15:8>
0006FC 6EF7               M         movwf   TBLPTRH
0006FE 0E??               M         movlw   low PermLog1    ; Move Table<7:0>
000700 6EF6               M         movwf   TBLPTRL
000702 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000704 50F5               M         movf    TABLAT, W
000706                    M loop
000706 EC?? F???          M         call    WR_DATA         ; write to LCD
00070A 000B               M         tblrd+*                 ; next row in table
00070C 50F5               M         movf    TABLAT, W
00070E E1??               M         bnz     loop
000710 EC?? F???      00790         call    LCD_L2
                      00791         Display PermLog2
  0000                    M         local   loop
000714 0E??               M         movlw   upper PermLog2  ; Move Table<20:16>
000716 6EF8               M         movwf   TBLPTRU
000718 0E??               M         movlw   high PermLog2   ; Move Table<15:8>
00071A 6EF7               M         movwf   TBLPTRH
00071C 0E??               M         movlw   low PermLog2    ; Move Table<7:0>
00071E 6EF6               M         movwf   TBLPTRL
000720 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000722 50F5               M         movf    TABLAT, W
000724                    M loop
000724 EC?? F???          M         call    WR_DATA         ; write to LCD
000728 000B               M         tblrd+*                 ; next row in table
00072A 50F5               M         movf    TABLAT, W
00072C E1??               M         bnz     loop
                      00792         
00072E                00793 HOLD_PERM_LOG
00072E EC?? F???      00794         call    READ_KEY
                      00795         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
000732 0E0D               M         movlw   key0                ; poll for mode
000734 6210               M         cpfseq  KEY                 ; check this against key press
000736 EF?? F???          M         goto    Exit
                          M 
00073A                    M Next
00073A 6A89               M         clrf    LATA                ; clear pins before proceeding
00073C 6A8A               M         clrf    LATB
00073E 6A8B               M         clrf    LATC
000740 6A8C               M         clrf    LATD
000742 EF?? F???          M         goto    STANDBY
                          M 
000746                    M Exit
000746 0000               M         nop
                      00796         ChangeMode  key1, PLOG
  0000                    M         local Next, Exit
                          M 
000748 0E00               M         movlw   key1                ; poll for mode
00074A 6210               M         cpfseq  KEY                 ; check this against key press
00074C EF?? F???          M         goto    Exit
                          M 
000750                    M Next
000750 6A89               M         clrf    LATA                ; clear pins before proceeding
000752 6A8A               M         clrf    LATB
000754 6A8B               M         clrf    LATC
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000756 6A8C               M         clrf    LATD
000758 EF?? F???          M         goto    PLOG
                          M 
00075C                    M Exit
00075C 0000               M         nop
                      00797         ChangeMode  key2, PLOG
  0000                    M         local Next, Exit
                          M 
00075E 0E01               M         movlw   key2                ; poll for mode
000760 6210               M         cpfseq  KEY                 ; check this against key press
000762 EF?? F???          M         goto    Exit
                          M 
000766                    M Next
000766 6A89               M         clrf    LATA                ; clear pins before proceeding
000768 6A8A               M         clrf    LATB
00076A 6A8B               M         clrf    LATC
00076C 6A8C               M         clrf    LATD
00076E EF?? F???          M         goto    PLOG
                          M 
000772                    M Exit
000772 0000               M         nop
                      00798         ChangeMode  key3, PLOG
  0000                    M         local Next, Exit
                          M 
000774 0E02               M         movlw   key3                ; poll for mode
000776 6210               M         cpfseq  KEY                 ; check this against key press
000778 EF?? F???          M         goto    Exit
                          M 
00077C                    M Next
00077C 6A89               M         clrf    LATA                ; clear pins before proceeding
00077E 6A8A               M         clrf    LATB
000780 6A8B               M         clrf    LATC
000782 6A8C               M         clrf    LATD
000784 EF?? F???          M         goto    PLOG
                          M 
000788                    M Exit
000788 0000               M         nop
                      00799         ChangeMode  key4, PLOG
  0000                    M         local Next, Exit
                          M 
00078A 0E04               M         movlw   key4                ; poll for mode
00078C 6210               M         cpfseq  KEY                 ; check this against key press
00078E EF?? F???          M         goto    Exit
                          M 
000792                    M Next
000792 6A89               M         clrf    LATA                ; clear pins before proceeding
000794 6A8A               M         clrf    LATB
000796 6A8B               M         clrf    LATC
000798 6A8C               M         clrf    LATD
00079A EF?? F???          M         goto    PLOG
                          M 
00079E                    M Exit
00079E 0000               M         nop
                      00800         ChangeMode  key5, PLOG
  0000                    M         local Next, Exit
                          M 
0007A0 0E05               M         movlw   key5                ; poll for mode
0007A2 6210               M         cpfseq  KEY                 ; check this against key press
0007A4 EF?? F???          M         goto    Exit
                          M 
0007A8                    M Next
0007A8 6A89               M         clrf    LATA                ; clear pins before proceeding
0007AA 6A8A               M         clrf    LATB
0007AC 6A8B               M         clrf    LATC
0007AE 6A8C               M         clrf    LATD
0007B0 EF?? F???          M         goto    PLOG
                          M 
0007B4                    M Exit
0007B4 0000               M         nop
                      00801         ChangeMode  key6, PLOG
  0000                    M         local Next, Exit
                          M 
0007B6 0E06               M         movlw   key6                ; poll for mode
0007B8 6210               M         cpfseq  KEY                 ; check this against key press
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0007BA EF?? F???          M         goto    Exit
                          M 
0007BE                    M Next
0007BE 6A89               M         clrf    LATA                ; clear pins before proceeding
0007C0 6A8A               M         clrf    LATB
0007C2 6A8B               M         clrf    LATC
0007C4 6A8C               M         clrf    LATD
0007C6 EF?? F???          M         goto    PLOG
                          M 
0007CA                    M Exit
0007CA 0000               M         nop
                      00802         ChangeMode  key7, PLOG
  0000                    M         local Next, Exit
                          M 
0007CC 0E08               M         movlw   key7                ; poll for mode
0007CE 6210               M         cpfseq  KEY                 ; check this against key press
0007D0 EF?? F???          M         goto    Exit
                          M 
0007D4                    M Next
0007D4 6A89               M         clrf    LATA                ; clear pins before proceeding
0007D6 6A8A               M         clrf    LATB
0007D8 6A8B               M         clrf    LATC
0007DA 6A8C               M         clrf    LATD
0007DC EF?? F???          M         goto    PLOG
                          M 
0007E0                    M Exit
0007E0 0000               M         nop
                      00803         ChangeMode  key8, PLOG
  0000                    M         local Next, Exit
                          M 
0007E2 0E09               M         movlw   key8                ; poll for mode
0007E4 6210               M         cpfseq  KEY                 ; check this against key press
0007E6 EF?? F???          M         goto    Exit
                          M 
0007EA                    M Next
0007EA 6A89               M         clrf    LATA                ; clear pins before proceeding
0007EC 6A8A               M         clrf    LATB
0007EE 6A8B               M         clrf    LATC
0007F0 6A8C               M         clrf    LATD
0007F2 EF?? F???          M         goto    PLOG
                          M 
0007F6                    M Exit
0007F6 0000               M         nop
                      00804         ChangeMode  key9, PLOG
  0000                    M         local Next, Exit
                          M 
0007F8 0E0A               M         movlw   key9                ; poll for mode
0007FA 6210               M         cpfseq  KEY                 ; check this against key press
0007FC EF?? F???          M         goto    Exit
                          M 
000800                    M Next
000800 6A89               M         clrf    LATA                ; clear pins before proceeding
000802 6A8A               M         clrf    LATB
000804 6A8B               M         clrf    LATC
000806 6A8C               M         clrf    LATD
000808 EF?? F???          M         goto    PLOG
                          M 
00080C                    M Exit
00080C 0000               M         nop
00080E D???           00805         bra HOLD_PERM_LOG
                      00806         
000810                00807 PLOG
000810 EC?? F???      00808         call    ClrLCD
                      00809         Display PermLog1
  0000                    M         local   loop
000814 0E??               M         movlw   upper PermLog1  ; Move Table<20:16>
000816 6EF8               M         movwf   TBLPTRU
000818 0E??               M         movlw   high PermLog1   ; Move Table<15:8>
00081A 6EF7               M         movwf   TBLPTRH
00081C 0E??               M         movlw   low PermLog1    ; Move Table<7:0>
00081E 6EF6               M         movwf   TBLPTRL
000820 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000822 50F5               M         movf    TABLAT, W
000824                    M loop
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000824 EC?? F???          M         call    WR_DATA         ; write to LCD
000828 000B               M         tblrd+*                 ; next row in table
00082A 50F5               M         movf    TABLAT, W
00082C E1??               M         bnz     loop
                      00810         
                      00811         ; find the key press value
00082E C010 FFE8      00812         movff   KEY, WREG
000832 2AE8           00813         incf    WREG        ; W = KEY+1
000834 6E17           00814         movwf   temp
                      00815         
000836 42E8           00816         rrncf   WREG        ; division by 4
000838 9EE8           00817         bcf     WREG, 7     ; clear last bit, overflow from rotate
00083A 42E8           00818         rrncf   WREG        
00083C 9EE8           00819         bcf     WREG, 7
00083E 5E17           00820         subwf   temp        ; temp = (KEY+1) - (KEY+1)/4
000840 C017 FFE8      00821         movff   temp, WREG
000844 C017 F011      00822         movff   temp, temp_KEY
000848 0D15           00823         mullw   d'21'       ; indexed as mutliples of 21
                      00824 
00084A                00825 displayNum
00084A C011 FFE8      00826         movff   temp_KEY, WREG
00084E 0F30           00827         addlw   0x30
000850 EC?? F???      00828         call    WR_DATA
000854 0E3A           00829         movlw   ":"
000856 EC?? F???      00830         call    WR_DATA
00085A 0E20           00831         movlw   " "
00085C EC?? F???      00832         call    WR_DATA
                      00833         
000860 CFF3 F022      00834         movff   PRODL, L_EE
000864 0E00           00835         movlw   d'0'
000866 2622           00836         addwf   L_EE
                      00837         READEE  OP_sec, H_EE, L_EE
000868 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
00086C C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000870 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000872 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000874 80A6               M         bsf     EECON1, RD          ; read EEPROM
000876 CFA8 F018          M         movff   EEDATA, OP_sec      ; put data into file
00087A 2A22           00838         incf    L_EE
                      00839         READEE  OP_INT, H_EE, L_EE
00087C C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000880 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000884 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000886 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000888 80A6               M         bsf     EECON1, RD          ; read EEPROM
00088A CFA8 F019          M         movff   EEDATA, OP_INT      ; put data into file
00088E 2A22           00840         incf    L_EE
000890 EC?? F???      00841         call    DisplayExeTime
000894 CFF3 F022      00842         movff   PRODL, L_EE
                      00843         
                      00844         ; reset eeprom to beginning
000898 EC?? F???      00845         call    LCD_L2
00089C CFF3 F022      00846         movff   PRODL, L_EE
0008A0 EC?? F???      00847         call    DispOpRTC
                      00848         
0008A4                00849 HOLD_PLOG
0008A4 EC?? F???      00850         call    READ_KEY
                      00851         ChangeMode  key0, PERM_LOG      ; back to perm log menu
  0000                    M         local Next, Exit
                          M 
0008A8 0E0D               M         movlw   key0                ; poll for mode
0008AA 6210               M         cpfseq  KEY                 ; check this against key press
0008AC EF?? F???          M         goto    Exit
                          M 
0008B0                    M Next
0008B0 6A89               M         clrf    LATA                ; clear pins before proceeding
0008B2 6A8A               M         clrf    LATB
0008B4 6A8B               M         clrf    LATC
0008B6 6A8C               M         clrf    LATD
0008B8 EF?? F???          M         goto    PERM_LOG
                          M 
0008BC                    M Exit
0008BC 0000               M         nop
0008BE D???           00852         bra HOLD_PLOG
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00853         
                      00854 ;*******************************************************************************
                      00855 ; pc interface
                      00856 ;*******************************************************************************
                      00857 
0008C0                00858 PC_MODE
0008C0 EC?? F???      00859         call    ClrLCD
                      00860         Display PC1
  0000                    M         local   loop
0008C4 0E??               M         movlw   upper PC1       ; Move Table<20:16>
0008C6 6EF8               M         movwf   TBLPTRU
0008C8 0E??               M         movlw   high PC1        ; Move Table<15:8>
0008CA 6EF7               M         movwf   TBLPTRH
0008CC 0E??               M         movlw   low PC1         ; Move Table<7:0>
0008CE 6EF6               M         movwf   TBLPTRL
0008D0 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0008D2 50F5               M         movf    TABLAT, W
0008D4                    M loop
0008D4 EC?? F???          M         call    WR_DATA         ; write to LCD
0008D8 000B               M         tblrd+*                 ; next row in table
0008DA 50F5               M         movf    TABLAT, W
0008DC E1??               M         bnz     loop
0008DE EC?? F???      00861         call    LCD_L2
                      00862         Display PC2
  0000                    M         local   loop
0008E2 0E??               M         movlw   upper PC2       ; Move Table<20:16>
0008E4 6EF8               M         movwf   TBLPTRU
0008E6 0E??               M         movlw   high PC2        ; Move Table<15:8>
0008E8 6EF7               M         movwf   TBLPTRH
0008EA 0E??               M         movlw   low PC2         ; Move Table<7:0>
0008EC 6EF6               M         movwf   TBLPTRL
0008EE 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0008F0 50F5               M         movf    TABLAT, W
0008F2                    M loop
0008F2 EC?? F???          M         call    WR_DATA         ; write to LCD
0008F6 000B               M         tblrd+*                 ; next row in table
0008F8 50F5               M         movf    TABLAT, W
0008FA E1??               M         bnz     loop
0008FC CFF9 F03A      00863         movff   PCL, PC_PCL
000900 CFFA F03B      00864         movff   PCLATH, PC_PCLATH
000904 CFFB F03C      00865         movff   PCLATU, PC_PCLATU
                      00866         
000908                00867 HOLD_PC
000908 EC?? F???      00868         call    READ_KEY
                      00869         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
00090C 0E0D               M         movlw   key0                ; poll for mode
00090E 6210               M         cpfseq  KEY                 ; check this against key press
000910 EF?? F???          M         goto    Exit
                          M 
000914                    M Next
000914 6A89               M         clrf    LATA                ; clear pins before proceeding
000916 6A8A               M         clrf    LATB
000918 6A8B               M         clrf    LATC
00091A 6A8C               M         clrf    LATD
00091C EF?? F???          M         goto    STANDBY
                          M 
000920                    M Exit
000920 0000               M         nop
                      00870         ChangeMode  keyH, PC_TRANSFER
  0000                    M         local Next, Exit
                          M 
000922 0E0E               M         movlw   keyH                ; poll for mode
000924 6210               M         cpfseq  KEY                 ; check this against key press
000926 EF?? F???          M         goto    Exit
                          M 
00092A                    M Next
00092A 6A89               M         clrf    LATA                ; clear pins before proceeding
00092C 6A8A               M         clrf    LATB
00092E 6A8B               M         clrf    LATC
000930 6A8C               M         clrf    LATD
000932 EF?? F???          M         goto    PC_TRANSFER
                          M 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000936                    M Exit
000936 0000               M         nop
000938 D???           00871         bra     HOLD_PC
                      00872 
00093A                00873 PC_TRANSFER
00093A 6839           00874         setf    transferring
00093C EC?? F???      00875         call    ClrLCD
                      00876         Display PCTransfer
  0000                    M         local   loop
000940 0E??               M         movlw   upper PCTransfer ; Move Table<20:16>
000942 6EF8               M         movwf   TBLPTRU
000944 0E??               M         movlw   high PCTransfer ; Move Table<15:8>
000946 6EF7               M         movwf   TBLPTRH
000948 0E??               M         movlw   low PCTransfer  ; Move Table<7:0>
00094A 6EF6               M         movwf   TBLPTRL
00094C 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
00094E 50F5               M         movf    TABLAT, W
000950                    M loop
000950 EC?? F???          M         call    WR_DATA         ; write to LCD
000954 000B               M         tblrd+*                 ; next row in table
000956 50F5               M         movf    TABLAT, W
000958 E1??               M         bnz     loop
                      00877         ;call   DataUSART
00095A 6A39           00878         clrf    transferring
00095C D???           00879         bra     HOLD_PC
                      00880         
                      00881 ;*******************************************************************************
                      00882 ; subroutines
                      00883 ;*******************************************************************************
                      00884 
00095E                00885 RTC_INIT
                      00886         ; set sda and scl to high
00095E 9882           00887         bcf     PORTC, 4
000960 9682           00888         bcf     PORTC, 3
000962 8894           00889         bsf     TRISC, 4
000964 8694           00890         bsf     TRISC, 3
                      00891         
000966 EC?? F???      00892         call    i2c_common_setup
                      00893         ;call   SET_TIME
Warning[203]: Found opcode in column 1. (return)
00096A 0012           00894 return
                      00895         
00096C                00896 SAVE_TIME   
                      00897         rtc_read    0x02        ; hours
00096C 0E02               M     movlw   0x02
00096E 6E??               M     movwf   regaddress
000970 EC?? F???          M     call    read_rtc
000974 C??? FFE8          M     movff   datachar, WREG
000978 EC?? F???          M     call    rtc_convert
00097C EC?? F???      00898         call    WriteEE_RTC
                      00899         rtc_read    0x01        ; minutes
000980 0E01               M     movlw   0x01
000982 6E??               M     movwf   regaddress
000984 EC?? F???          M     call    read_rtc
000988 C??? FFE8          M     movff   datachar, WREG
00098C EC?? F???          M     call    rtc_convert
000990 EC?? F???      00900         call    WriteEE_RTC
                      00901         rtc_read    0x06        ; years
000994 0E06               M     movlw   0x06
000996 6E??               M     movwf   regaddress
000998 EC?? F???          M     call    read_rtc
00099C C??? FFE8          M     movff   datachar, WREG
0009A0 EC?? F???          M     call    rtc_convert
0009A4 EC?? F???      00902         call    WriteEE_RTC
                      00903         rtc_read    0x05        ; months
0009A8 0E05               M     movlw   0x05
0009AA 6E??               M     movwf   regaddress
0009AC EC?? F???          M     call    read_rtc
0009B0 C??? FFE8          M     movff   datachar, WREG
0009B4 EC?? F???          M     call    rtc_convert
0009B8 EC?? F???      00904         call    WriteEE_RTC
                      00905         rtc_read    0x04        ; days
0009BC 0E04               M     movlw   0x04
0009BE 6E??               M     movwf   regaddress
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0009C0 EC?? F???          M     call    read_rtc
0009C4 C??? FFE8          M     movff   datachar, WREG
0009C8 EC?? F???          M     call    rtc_convert
0009CC EC?? F???      00906         call    WriteEE_RTC
Warning[203]: Found opcode in column 1. (return)
0009D0 0012           00907 return
                      00908         
0009D2                00909 SAVE_EXE_TIME
                      00910         
Warning[202]: Argument out of range.  Least significant bits used.
0009D2 3818           00911         swapf   OP_sec, WREG    ; 100's seconds
0009D4 6E17           00912         movwf   temp
0009D6 0E0F           00913         movlw   0x0F
0009D8 1617           00914         andwf   temp
0009DA C017 FFE8      00915         movff   temp, WREG
0009DE 0F30           00916         addlw   0x30    
                      00917         WriteEE WREG, H_EE, L_EE
0009E0 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
0009E4 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
0009E8 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
0009EC B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
0009EE D???               M         bra     $-2
                          M 
0009F0 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
0009F2 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
0009F4 84A6               M         bsf     EECON1, WREN        ; enable write
0009F6 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
0009F8 98A1               M         bcf     PIR2, EEIF
                          M 
0009FA 0E55               M         movlw   0x55
0009FC 6EA7               M         movwf   EECON2              ; write 55h
0009FE 0EAA               M         movlw   0xaa
000A00 6EA7               M         movwf   EECON2              ; write 0xaa
000A02 82A6               M         bsf     EECON1, WR          ; begin write
000A04 B2A6               M         btfsc   EECON1, WR
000A06 D???               M         bra     $-2
                          M 
000A08 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000A0A 94A6               M         bcf     EECON1, WREN        ; disable writes
000A0C 2A22           00918         incf    L_EE
                      00919         
000A0E C018 F017      00920         movff   OP_sec, temp    ; 10's seconds
000A12 0E0F           00921         movlw   0x0F
000A14 1617           00922         andwf   temp            ; Temp = lower nibble of Op_sec
000A16 C017 FFE8      00923         movff   temp, WREG      ; W = Temp
000A1A 0F30           00924         addlw   0x30            ; Convert to ASCII
                      00925         WriteEE WREG, H_EE, L_EE
000A1C C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000A20 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000A24 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000A28 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000A2A D???               M         bra     $-2
                          M 
000A2C 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000A2E 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000A30 84A6               M         bsf     EECON1, WREN        ; enable write
000A32 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000A34 98A1               M         bcf     PIR2, EEIF
                          M 
000A36 0E55               M         movlw   0x55
000A38 6EA7               M         movwf   EECON2              ; write 55h
000A3A 0EAA               M         movlw   0xaa
000A3C 6EA7               M         movwf   EECON2              ; write 0xaa
000A3E 82A6               M         bsf     EECON1, WR          ; begin write
000A40 B2A6               M         btfsc   EECON1, WR
000A42 D???               M         bra     $-2
                          M 
000A44 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000A46 94A6               M         bcf     EECON1, WREN        ; disable writes
000A48 2A22           00926         incf    L_EE
                      00927         
Warning[202]: Argument out of range.  Least significant bits used.
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A4A 3819           00928         swapf   OP_INT, WREG    ;1's seconds
000A4C 6E17           00929         movwf   temp
000A4E 0E0F           00930         movlw   0x0f
000A50 1617           00931         andwf   temp
000A52 C017 FFE8      00932         movff   temp, WREG
000A56 0F30           00933         addlw   0x30
                      00934         WriteEE WREG, H_EE, L_EE
000A58 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000A5C C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000A60 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000A64 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000A66 D???               M         bra     $-2
                          M 
000A68 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000A6A 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000A6C 84A6               M         bsf     EECON1, WREN        ; enable write
000A6E 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000A70 98A1               M         bcf     PIR2, EEIF
                          M 
000A72 0E55               M         movlw   0x55
000A74 6EA7               M         movwf   EECON2              ; write 55h
000A76 0EAA               M         movlw   0xaa
000A78 6EA7               M         movwf   EECON2              ; write 0xaa
000A7A 82A6               M         bsf     EECON1, WR          ; begin write
000A7C B2A6               M         btfsc   EECON1, WR
000A7E D???               M         bra     $-2
                          M 
000A80 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000A82 94A6               M         bcf     EECON1, WREN        ; disable writes
000A84 2A22           00935         incf    L_EE
Warning[203]: Found opcode in column 1. (return)
000A86 0012           00936 return
                      00937         
                      00938                 
000A88                00939 DISPLAY_RTC     
                      00940         ; display data in this format hh/minmin/yy yy/mm/dd
                      00941         rtc_read    0x02            ; 0x02 from DS1307 - hours
000A88 0E02               M     movlw   0x02
000A8A 6E??               M     movwf   regaddress
000A8C EC?? F???          M     call    read_rtc
000A90 C??? FFE8          M     movff   datachar, WREG
000A94 EC?? F???          M     call    rtc_convert
000A98 C??? FFE8      00942         movff   tens_digit,WREG
000A9C EC?? F???      00943         call    WR_DATA
000AA0 C??? FFE8      00944         movff   ones_digit,WREG
000AA4 EC?? F???      00945         call    WR_DATA
000AA8 0E68           00946         movlw   "h"
000AAA EC?? F???      00947         call    WR_DATA
                      00948         
                      00949         rtc_read    0x01            ; 0x01 from DS1307 - minutes
000AAE 0E01               M     movlw   0x01
000AB0 6E??               M     movwf   regaddress
000AB2 EC?? F???          M     call    read_rtc
000AB6 C??? FFE8          M     movff   datachar, WREG
000ABA EC?? F???          M     call    rtc_convert
000ABE C??? FFE8      00950         movff   tens_digit,WREG
000AC2 EC?? F???      00951         call    WR_DATA
000AC6 C??? FFE8      00952         movff   ones_digit,WREG
000ACA EC?? F???      00953         call    WR_DATA
                      00954         
                      00955         rtc_read    0x00            ; 0x00 from DS1307 - seconds
000ACE 0E00               M     movlw   0x00
000AD0 6E??               M     movwf   regaddress
000AD2 EC?? F???          M     call    read_rtc
000AD6 C??? FFE8          M     movff   datachar, WREG
000ADA EC?? F???          M     call    rtc_convert
000ADE C??? FFE8      00956         movff   tens_digit,WREG
000AE2 EC?? F???      00957         call    WR_DATA
000AE6 C??? FFE8      00958         movff   ones_digit,WREG
000AEA EC?? F???      00959         call    WR_DATA
000AEE 0E20           00960         movlw   " "
000AF0 EC?? F???      00961         call    WR_DATA
                      00962         
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00963         rtc_read    0x06            ; 0x06 from DS1307 - years
000AF4 0E06               M     movlw   0x06
000AF6 6E??               M     movwf   regaddress
000AF8 EC?? F???          M     call    read_rtc
000AFC C??? FFE8          M     movff   datachar, WREG
000B00 EC?? F???          M     call    rtc_convert
000B04 C??? FFE8      00964         movff   tens_digit,WREG
000B08 EC?? F???      00965         call    WR_DATA
000B0C C??? FFE8      00966         movff   ones_digit,WREG
000B10 EC?? F???      00967         call    WR_DATA
000B14 0E2F           00968         movlw   "/"
000B16 EC?? F???      00969         call    WR_DATA
                      00970         
                      00971         rtc_read    0x05            ; 0x05 from DS1307 - months
000B1A 0E05               M     movlw   0x05
000B1C 6E??               M     movwf   regaddress
000B1E EC?? F???          M     call    read_rtc
000B22 C??? FFE8          M     movff   datachar, WREG
000B26 EC?? F???          M     call    rtc_convert
000B2A C??? FFE8      00972         movff   tens_digit,WREG
000B2E EC?? F???      00973         call    WR_DATA
000B32 C??? FFE8      00974         movff   ones_digit,WREG
000B36 EC?? F???      00975         call    WR_DATA
000B3A 0E2F           00976         movlw   "/"
000B3C EC?? F???      00977         call    WR_DATA
                      00978         
                      00979         rtc_read    0x04            ; 0x04 from DS1307 - days
000B40 0E04               M     movlw   0x04
000B42 6E??               M     movwf   regaddress
000B44 EC?? F???          M     call    read_rtc
000B48 C??? FFE8          M     movff   datachar, WREG
000B4C EC?? F???          M     call    rtc_convert
000B50 C??? FFE8      00980         movff   tens_digit,WREG
000B54 EC?? F???      00981         call    WR_DATA
000B58 C??? FFE8      00982         movff   ones_digit,WREG
000B5C EC?? F???      00983         call    WR_DATA
Warning[203]: Found opcode in column 1. (return)
000B60 0012           00984 return
                      00985         
000B62                00986 SET_TIME
                      00987         rtc_resetAll
                          M 
000B62 6A??               M     clrf    databyte
000B64 0E06               M     movlw   6
000B66 6E??               M     movwf   regaddress ;start at 6 and go down, and set all to 0
                          M 
Warning[207]: Found label after column 1. (del_loop0)
000B68                    M     del_loop0
000B68 EC?? F???          M     call    write_rtc
000B6C 2E??               M     decfsz  regaddress
000B6E D???               M     bra     del_loop0
000B70 EC?? F???          M     call    write_rtc ;sets registers 0-6 to zero
Warning[207]: Found label after column 1. (_loopknt)
  00000001                M     _loopknt set _loopknt+1
                      00988         
                      00989         rtc_set 0x00,   b'10000000'
000B74 0E00               M     movlw   0x00
000B76 6E??               M     movwf   regaddress
000B78 0E80               M     movlw   b'10000000'
000B7A 6E??               M     movwf   databyte
000B7C EC?? F???          M     call    write_rtc
                      00990 
                      00991         rtc_set 0x06,   b'00010111'             ; Year 17
000B80 0E06               M     movlw   0x06
000B82 6E??               M     movwf   regaddress
000B84 0E17               M     movlw   b'00010111'
000B86 6E??               M     movwf   databyte
000B88 EC?? F???          M     call    write_rtc
                      00992         rtc_set 0x05,   b'00000010'             ; Month 2
000B8C 0E05               M     movlw   0x05
000B8E 6E??               M     movwf   regaddress
000B90 0E02               M     movlw   b'00000010'
000B92 6E??               M     movwf   databyte
000B94 EC?? F???          M     call    write_rtc
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00993         rtc_set 0x04,   b'00011001'             ; Date 19
000B98 0E04               M     movlw   0x04
000B9A 6E??               M     movwf   regaddress
000B9C 0E19               M     movlw   b'00011001'
000B9E 6E??               M     movwf   databyte
000BA0 EC?? F???          M     call    write_rtc
                      00994         rtc_set 0x02,   b'00010001'             ; Hours 11
000BA4 0E02               M     movlw   0x02
000BA6 6E??               M     movwf   regaddress
000BA8 0E11               M     movlw   b'00010001'
000BAA 6E??               M     movwf   databyte
000BAC EC?? F???          M     call    write_rtc
                      00995         rtc_set 0x01,   b'00111000'             ; Minutes 38
000BB0 0E01               M     movlw   0x01
000BB2 6E??               M     movwf   regaddress
000BB4 0E38               M     movlw   b'00111000'
000BB6 6E??               M     movwf   databyte
000BB8 EC?? F???          M     call    write_rtc
                      00996         rtc_set 0x00,   b'00000000'             ; Seconds 0
000BBC 0E00               M     movlw   0x00
000BBE 6E??               M     movwf   regaddress
000BC0 0E00               M     movlw   b'00000000'
000BC2 6E??               M     movwf   databyte
000BC4 EC?? F???          M     call    write_rtc
Warning[203]: Found opcode in column 1. (return)
000BC8 0012           00997 return
                      00998         
000BCA                00999 INIT_USART
000BCA 0E0F           01000         movlw   15      ; baud rate 9600
000BCC 6EAF           01001         movwf   SPBRG
000BCE 6AAC           01002         clrf    TXSTA
                      01003         
000BD0 6AAB           01004         clrf    RCSTA
000BD2 8EAB           01005         bsf     RCSTA,SPEN      ; asynchronous serial port enable
000BD4 88AB           01006         bsf     RCSTA,CREN      ; continous receive
                      01007         
000BD6 8AAC           01008         bsf     TXSTA, TXEN     ; transmit enabled
000BD8 0012           01009         return
                      01010 
                      01011 ;DataUSART
                      01012 ;       
                      01013 ;       movlw   0x02
                      01014 ;       call    USART_WAIT
                      01015 ;       movlw   0x0D
                      01016 ;       call    USART_WAIT
                      01017 ;       
                      01018 ;       movlw   d'21'       ; start of permanent logs
                      01019 ;       movff   w, L_EE
                      01020 ;       TransferTable   PCLog1
                      01021 ;       
                      01022 ;       ; display time here
                      01023 ;;      rtc_read        0x02
                      01024 ;;              movf        tens_digit, W
                      01025 ;;        andlw       b'00000001'
                      01026 ;;        addlw       0x30
                      01027 ;;        call        TransmitWaitUSART
                      01028 ;;        movf        ones_digit, W
                      01029 ;;        call        TransmitWaitUSART
                      01030 ;;              movlw           ":"
                      01031 ;;              call            TransmitWaitUSART
                      01032 ;;              ; Dispay minutes
                      01033 ;;              rtc_read        0x01
                      01034 ;;              call        SendRTC_USART
                      01035 ;;              ; Dispay AM/PM
                      01036 ;;              rtc_read        0x02
                      01037 ;;        movlw       "P"
                      01038 ;;        btfss       tens_digit, 1
                      01039 ;;        movlw       "A"
                      01040 ;;        call        TransmitWaitUSART
                      01041 ;;        movlw       "M"
                      01042 ;;        call        TransmitWaitUSART
                      01043 ;;              movlw           " "
                      01044 ;;        call        TransmitWaitUSART
                      01045 ;;              ; Display month
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01046 ;;              rtc_read        0x05
                      01047 ;;              call        SendRTC_USART
                      01048 ;;              movlw           0x2F            ; ASCII '/'
                      01049 ;;              call            TransmitWaitUSART
                      01050 ;;              ; Display day
                      01051 ;;              rtc_read        0x04
                      01052 ;;              call        SendRTC_USART
                      01053 ;;              movlw           0x2F            ; ASCII '/'
                      01054 ;;              call            TransmitWaitUSART
                      01055 ;;              ; Display year
                      01056 ;;              rtc_read        0x06
                      01057 ;;              call        SendRTC_USART
                      01058 ;       
                      01059 ;       call    USART_LINE
                      01060 ;       call    USART_LINE
                      01061 ;       
                      01062 ;       clrf    counter
                      01063 ;       incf    counter
                      01064 ;
                      01065 ;USART_TRANSFER
                      01066 ;       movlw   d'21'
                      01067 ;       mulwf   counter
                      01068 ;       movff   PRODL, L_EE
                      01069 ;       movlw   d'9'
                      01070 ;       addwf   L_EE
                      01071 ;       READEE  OP_sec, H_EE, L_EE
                      01072 ;       incf    L_EE
                      01073 ;       READEE  OP_INT, H_EE, L_EE
                      01074 ;       incf    L_EE
                      01075 ;       ; call  TransferTime
                      01076 ;       
                      01077 ;       ; send rtc
                      01078 ;       movlw   0x09
                      01079 ;       call    USART_WAIT
                      01080 ;       movff   PRODL, L_EE
                      01081 ;       ;call   TransferRTC
                      01082 ;       call    USART_LINE
                      01083 ;       
                      01084 ;       
                      01085 ;       
                      01086 ;       
                      01087 ;USART_WAIT
                      01088 ;       movwf   TXREG
                      01089 ;       btfss   TXSTA,1
                      01090 ;       goto    $-2
                      01091 ;       return
                      01092 ;
                      01093 ;USART_LINE
                      01094 ;       movlw   0x0A
                      01095 ;       call    USART_WAIT
                      01096 ;       movlw   0x0D
                      01097 ;       call    USART_WAIT
                      01098 ;       return
                      01099         
                      01100         
000BDA                01101 Delay5us
000BDA 0E78           01102         movlw   d'120'
000BDC 6E1C           01103         movwf   d5us
                      01104 
000BDE                01105 loop5us
000BDE 2E1C           01106         decfsz  d5us
000BE0 EF?? F???      01107         goto    loop5us
000BE4 0000           01108         nop
000BE6 0012           01109         return
                      01110 
000BE8                01111 Delay200us
000BE8 0EA4           01112         movlw   0xA4
000BEA 6E1D           01113         movwf   d200us
                      01114 
000BEC                01115 loop200us
000BEC 2E1D           01116         decfsz  d200us
000BEE EF?? F???      01117         goto    loop200us
000BF2 0000           01118         nop
000BF4 0012           01119         return
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01120 
000BF6                01121 Delay50ms
000BF6 0EF9           01122         movlw   0xF9
000BF8 6E1E           01123         movwf   d50ms
                      01124 
000BFA                01125 loop50ms
000BFA EC?? F???      01126         call    Delay200us
000BFE 2E1E           01127         decfsz  d50ms
                      01128 
000C00                01129 Cycles
000C00 EF?? F???      01130         goto    loop50ms
000C04 EC?? F???      01131         call    Delay200us
000C08 0012           01132         return
                      01133 
000C0A                01134 WriteEE_RTC
                      01135         WriteEE tens_digit, H_EE, L_EE
000C0A C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000C0E C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000C12 C??? FFA8          M         movff   tens_digit, EEDATA  ; set word
                          M 
000C16 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000C18 D???               M         bra     $-2
                          M 
000C1A 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000C1C 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000C1E 84A6               M         bsf     EECON1, WREN        ; enable write
000C20 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000C22 98A1               M         bcf     PIR2, EEIF
                          M 
000C24 0E55               M         movlw   0x55
000C26 6EA7               M         movwf   EECON2              ; write 55h
000C28 0EAA               M         movlw   0xaa
000C2A 6EA7               M         movwf   EECON2              ; write 0xaa
000C2C 82A6               M         bsf     EECON1, WR          ; begin write
000C2E B2A6               M         btfsc   EECON1, WR
000C30 D???               M         bra     $-2
                          M 
000C32 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000C34 94A6               M         bcf     EECON1, WREN        ; disable writes
000C36 2A22           01136         incf    L_EE
                      01137         WriteEE ones_digit, H_EE, L_EE
000C38 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000C3C C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000C40 C??? FFA8          M         movff   ones_digit, EEDATA  ; set word
                          M 
000C44 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000C46 D???               M         bra     $-2
                          M 
000C48 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000C4A 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000C4C 84A6               M         bsf     EECON1, WREN        ; enable write
000C4E 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000C50 98A1               M         bcf     PIR2, EEIF
                          M 
000C52 0E55               M         movlw   0x55
000C54 6EA7               M         movwf   EECON2              ; write 55h
000C56 0EAA               M         movlw   0xaa
000C58 6EA7               M         movwf   EECON2              ; write 0xaa
000C5A 82A6               M         bsf     EECON1, WR          ; begin write
000C5C B2A6               M         btfsc   EECON1, WR
000C5E D???               M         bra     $-2
                          M 
000C60 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000C62 94A6               M         bcf     EECON1, WREN        ; disable writes
000C64 2A22           01138         incf    L_EE
000C66 0012           01139         return
                      01140 
000C68                01141 ClearEEPROM_21
000C68 6A21           01142         clrf    H_EE
000C6A 6A22           01143         clrf    L_EE
000C6C 6820           01144         setf    clear_EE
000C6E 6A15           01145         clrf    counter
000C70                01146 ClearNext
                      01147         WriteEE         clear_EE, H_EE, L_EE
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C70 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000C74 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000C78 C020 FFA8          M         movff   clear_EE, EEDATA    ; set word
                          M 
000C7C B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000C7E D???               M         bra     $-2
                          M 
000C80 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000C82 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000C84 84A6               M         bsf     EECON1, WREN        ; enable write
000C86 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000C88 98A1               M         bcf     PIR2, EEIF
                          M 
000C8A 0E55               M         movlw   0x55
000C8C 6EA7               M         movwf   EECON2              ; write 55h
000C8E 0EAA               M         movlw   0xaa
000C90 6EA7               M         movwf   EECON2              ; write 0xaa
000C92 82A6               M         bsf     EECON1, WR          ; begin write
000C94 B2A6               M         btfsc   EECON1, WR
000C96 D???               M         bra     $-2
                          M 
000C98 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000C9A 94A6               M         bcf     EECON1, WREN        ; disable writes
000C9C 2A15           01148         incf            counter
000C9E 2A22           01149         incf            L_EE
000CA0 0E15           01150         movlw           d'21'
000CA2 6215           01151         cpfseq          counter
000CA4 EF?? F???      01152         goto            ClearNext
000CA8 6A21           01153         clrf            H_EE
000CAA 6A22           01154         clrf            L_EE
000CAC 0012           01155         return
                      01156         
000CAE                01157 READ_KEY
000CAE A281           01158         btfss   PORTB, 1        ; check for keypad interrupt
000CB0 EF?? F???      01159         goto    READ_KEY
000CB4 3881           01160         swapf   PORTB, W
000CB6 0B0F           01161         andlw   0x0F
000CB8 6E10           01162         movwf   KEY
000CBA B281           01163         btfsc   PORTB, 1
000CBC EF?? F???      01164         goto    $-2
000CC0 0012           01165         return
                      01166 
000CC2                01167 READ_KEY_TIME
000CC2 EC?? F???      01168         call        LCD_L2          ; go to second line to print RTC
                      01169 
                      01170         ; display the time
000CC6 EC?? F???      01171         call    DISPLAY_RTC
                      01172 
000CCA A281           01173         btfss       PORTB, 1    ; keypad interrupt
000CCC EF?? F???      01174         goto        READ_KEY_TIME
000CD0 3881           01175         swapf       PORTB, W    ; copy PORTB7:4 to W3:0
000CD2 0B0F           01176         andlw       0x0F        ; only want W3:0
000CD4 6E10           01177         movwf       KEY         ; write this value to the KEY
000CD6 B281           01178         btfsc       PORTB, 1    ; wait for release
000CD8 EF?? F???      01179         goto        $-2         ; go back one instruction
000CDC 0012           01180         return
                      01181 
000CDE                01182 DisplayExeTime
                      01183         READEE  REG_EE, H_EE, L_EE
000CDE C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000CE2 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000CE6 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000CE8 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000CEA 80A6               M         bsf     EECON1, RD          ; read EEPROM
000CEC CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000CF0 0EFF           01184         movlw   0xFF
000CF2 6223           01185         cpfseq  REG_EE
000CF4 EF?? F???      01186         goto    NoSkipDispExeTime
                      01187         Display NoData
  0000                    M         local   loop
000CF8 0E??               M         movlw   upper NoData    ; Move Table<20:16>
000CFA 6EF8               M         movwf   TBLPTRU
000CFC 0E??               M         movlw   high NoData     ; Move Table<15:8>
000CFE 6EF7               M         movwf   TBLPTRH
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D00 0E??               M         movlw   low NoData      ; Move Table<7:0>
000D02 6EF6               M         movwf   TBLPTRL
000D04 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000D06 50F5               M         movf    TABLAT, W
000D08                    M loop
000D08 EC?? F???          M         call    WR_DATA         ; write to LCD
000D0C 000B               M         tblrd+*                 ; next row in table
000D0E 50F5               M         movf    TABLAT, W
000D10 E1??               M         bnz     loop
000D12 0EFF           01188         movlw   0xFF
000D14 6023           01189         cpfslt  REG_EE
000D16 EF?? F???      01190         goto    SkipDispExeTime
000D1A 0012           01191         return
                      01192 
000D1C                01193 NoSkipDispExeTime
                      01194         READEE  WREG, H_EE, L_EE
000D1C C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D20 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D24 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D26 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D28 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D2A CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000D2E EC?? F???      01195         call    WR_DATA
000D32 2A22           01196         incf    L_EE
                      01197         
                      01198         READEE  WREG, H_EE, L_EE
000D34 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D38 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D3C 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D3E 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D40 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D42 CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000D46 EC?? F???      01199         call    WR_DATA
000D4A 2A22           01200         incf    L_EE
                      01201         
                      01202         READEE  WREG, H_EE, L_EE
000D4C C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D50 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D54 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D56 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D58 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D5A CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000D5E EC?? F???      01203         call    WR_DATA
000D62 2A22           01204         incf    L_EE
                      01205 
000D64 0E73           01206         movlw   0x73            ; Write 's'
000D66 EC?? F???      01207         call    WR_DATA
000D6A EC?? F???      01208         call    LCD_L2
000D6E                01209 SkipDispExeTime
000D6E 0012           01210         return
                      01211 
000D70                01212 DispOpRTC
                      01213         READEE  REG_EE, H_EE, L_EE
000D70 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D74 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D78 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D7A 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D7C 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D7E CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000D82 0EFF           01214         movlw   0xff
000D84 6223           01215         cpfseq  REG_EE
000D86 EF?? F???      01216         goto    NoSkipDispOpRTC
                      01217         Display NoData
  0000                    M         local   loop
000D8A 0E??               M         movlw   upper NoData    ; Move Table<20:16>
000D8C 6EF8               M         movwf   TBLPTRU
000D8E 0E??               M         movlw   high NoData     ; Move Table<15:8>
000D90 6EF7               M         movwf   TBLPTRH
000D92 0E??               M         movlw   low NoData      ; Move Table<7:0>
000D94 6EF6               M         movwf   TBLPTRL
000D96 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000D98 50F5               M         movf    TABLAT, W
000D9A                    M loop
000D9A EC?? F???          M         call    WR_DATA         ; write to LCD
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D9E 000B               M         tblrd+*                 ; next row in table
000DA0 50F5               M         movf    TABLAT, W
000DA2 E1??               M         bnz     loop
000DA4 0EFF           01218         movlw   0xff
000DA6 6023           01219         cpfslt  REG_EE
000DA8 EF?? F???      01220         goto    SkipDispOpRTC
                      01221 
000DAC                01222 NoSkipDispOpRTC
                      01223         READEE  REG_EE, H_EE, L_EE
000DAC C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000DB0 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000DB4 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000DB6 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000DB8 80A6               M         bsf     EECON1, RD          ; read EEPROM
000DBA CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000DBE C023 FFE8      01224         movff   REG_EE, WREG
000DC2 EC?? F???      01225         call    WR_DATA
000DC6 2A22           01226         incf    L_EE
                      01227         
                      01228         READEE  REG_EE, H_EE, L_EE
000DC8 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000DCC C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000DD0 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000DD2 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000DD4 80A6               M         bsf     EECON1, RD          ; read EEPROM
000DD6 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000DDA C023 FFE8      01229         movff   REG_EE, WREG
000DDE EC?? F???      01230         call    WR_DATA
000DE2 2A22           01231         incf    L_EE
                      01232 
000DE4 0E68           01233         movlw   "h"
000DE6 EC?? F???      01234         call    WR_DATA
                      01235         
000DEA EC?? F???      01236         call    DispOpRTC_Helper
                      01237         
000DEE 0E20           01238         movlw   " "
000DF0 EC?? F???      01239         call    WR_DATA
                      01240         
000DF4 EC?? F???      01241         call    DispOpRTC_Helper
000DF8 0E2F           01242         movlw   "/"
000DFA EC?? F???      01243         call    WR_DATA
                      01244 
000DFE EC?? F???      01245         call    DispOpRTC_Helper
000E02 0E2F           01246         movlw   "/"
000E04 EC?? F???      01247         call    WR_DATA
000E08 EC?? F???      01248         call    DispOpRTC_Helper
000E0C                01249 SkipDispOpRTC
000E0C 0012           01250                 return
000E0E                01251 DispOpRTC_Helper
                      01252         READEE          REG_EE, H_EE, L_EE
000E0E C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E12 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E16 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E18 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E1A 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E1C CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000E20 C023 FFE8      01253         movff           REG_EE, WREG
000E24 EC?? F???      01254         call            WR_DATA
000E28 2A22           01255         incf            L_EE
                      01256         READEE          REG_EE, H_EE, L_EE
000E2A C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E2E C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E32 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E34 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E36 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E38 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000E3C C023 FFE8      01257         movff           REG_EE, WREG
000E40 EC?? F???      01258         call            WR_DATA
000E44 2A22           01259         incf            L_EE
000E46 0012           01260         return
Warning[205]: Found directive in column 1. (end)
                      01261 end

MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-22-2017  10:48:08         PAGE 38





Errors   :     0
Warnings :    42 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

