MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*******************************************************************************
                      00002 ;
                      00003 ;    Filename: main.asm
                      00004 ;    Date: 2 Feb 2017
                      00005 ;    File Version: 1.0
                      00006 ;    Author: Matthew Reiter
                      00007 ;    Course: AER201
                      00008 ;    Description: botL - a pastic bottle sorting machine
                      00009  
                      00010 ;*******************************************************************************
                      00011 ; configuration settings
                      00012 ;*******************************************************************************
                      00013 
Warning[205]: Found directive in column 1. (list)
                      00014 list    P=18F4620, F=INHX32, C=160, N=80, ST=OFF, MM=OFF, R=DEC
                      00015 #include <p18f4620.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Nov 17 2016
                      00005 ;  MPASM PIC18F4620 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      01440         LIST
                      00016 #include <lcd.inc>
  0000                00001     extern      InitLCD,WrtLCD,ClrLCD,ClkLCD,WR_INS,WR_DATA,LCD_L1,LCD_L2,delay5ms
                      00002 
                      00003 
                      00004 
                      00005 
                      00006 
                      00007 
                      00017 #include <rtc.inc>
Warning[205]: Found directive in column 1. (extern)
  0000                00001 extern write_rtc,read_rtc,rtc_convert,i2c_common_setup, regaddress, databyte, datachar,tens_digit,ones_digit
                      00002 
Warning[205]: Found directive in column 1. (variable)
  0000                00003 variable _loopknt=0
                      00004 
                      00005 rtc_resetAll macro
                      00006 
                      00007     clrf    databyte
                      00008     movlw   6
                      00009     movwf   regaddress ;start at 6 and go down, and set all to 0
                      00010 
                      00011     del_loop#v(_loopknt)
                      00012     call    write_rtc
                      00013     decfsz  regaddress
                      00014     bra     del_loop#v(_loopknt)
                      00015     call    write_rtc ;sets registers 0-6 to zero
                      00016     _loopknt set _loopknt+1
Warning[205]: Found directive in column 1. (endm)
                      00017 endm
                      00018 
                      00019 rtc_set macro addliteral,datliteral
                      00020     movlw   addliteral
                      00021     movwf   regaddress
                      00022     movlw   datliteral
                      00023     movwf   databyte
                      00024     call    write_rtc
Warning[205]: Found directive in column 1. (endm)
                      00025 endm
                      00026 
                      00027 rtc_read macro addliteral
                      00028     movlw   addliteral
                      00029     movwf   regaddress
                      00030     call    read_rtc
                      00031     movff   datachar, WREG
                      00032     call    rtc_convert
Warning[205]: Found directive in column 1. (endm)
                      00033 endm
                      00018 #include <colour.inc>
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                00001     extern      i2c_common_setup, regaddress, databyte, datachar, READ_COLOUR_I2C, WRITE_COLOUR_I2C, WR_DATA, data_colourL, data_col
                            ourH, delay5ms
                      00002 
                      00003 ;    #define TCS34725_ADDRESS          (0x29)
                      00004 ;
                      00005 ;    #define TCS34725_COMMAND_BIT      (0x80)
                      00006 ;
                      00007 ;    #define TCS34725_ENABLE           (0x00)
                      00008 ;    #define TCS34725_ENABLE_AIEN      (0x10)    /* RGBC Interrupt Enable */
                      00009 ;    #define TCS34725_ENABLE_WEN       (0x08)    /* Wait enable - Writing 1 activates the wait timer */
                      00010 ;    #define TCS34725_ENABLE_AEN       (0x02)    /* RGBC Enable - Writing 1 actives the ADC, 0 disables it */
                      00011 ;    #define TCS34725_ENABLE_PON       (0x01)    /* Power on - Writing 1 activates the internal oscillator, 0 disables it */
                      00012 ;    #define TCS34725_ATIME            (0x01)    /* Integration time */
                      00013 ;    #define TCS34725_WTIME            (0x03)    /* Wait time (if TCS34725_ENABLE_WEN is asserted) */
                      00014 ;    #define TCS34725_WTIME_2_4MS      (0xFF)    /* WLONG0 = 2.4ms   WLONG1 = 0.029s */
                      00015 ;    #define TCS34725_WTIME_204MS      (0xAB)    /* WLONG0 = 204ms   WLONG1 = 2.45s  */
                      00016 ;    #define TCS34725_WTIME_614MS      (0x00)    /* WLONG0 = 614ms   WLONG1 = 7.4s   */
                      00017 ;    #define TCS34725_AILTL            (0x04)    /* Clear channel lower interrupt threshold */
                      00018 ;    #define TCS34725_AILTH            (0x05)
                      00019 ;    #define TCS34725_AIHTL            (0x06)    /* Clear channel upper interrupt threshold */
                      00020 ;    #define TCS34725_AIHTH            (0x07)
                      00021 ;    #define TCS34725_PERS             (0x0C)    /* Persistence register - basic SW filtering mechanism for interrupts */
                      00022 ;    #define TCS34725_PERS_NONE        (0b0000)  /* Every RGBC cycle generates an interrupt                                */
                      00023 ;    #define TCS34725_PERS_1_CYCLE     (0b0001)  /* 1 clean channel value outside threshold range generates an interrupt   */
                      00024 ;    #define TCS34725_PERS_2_CYCLE     (0b0010)  /* 2 clean channel values outside threshold range generates an interrupt  */
                      00025 ;    #define TCS34725_PERS_3_CYCLE     (0b0011)  /* 3 clean channel values outside threshold range generates an interrupt  */
                      00026 ;    #define TCS34725_PERS_5_CYCLE     (0b0100)  /* 5 clean channel values outside threshold range generates an interrupt  */
                      00027 ;    #define TCS34725_PERS_10_CYCLE    (0b0101)  /* 10 clean channel values outside threshold range generates an interrupt */
                      00028 ;    #define TCS34725_PERS_15_CYCLE    (0b0110)  /* 15 clean channel values outside threshold range generates an interrupt */
                      00029 ;    #define TCS34725_PERS_20_CYCLE    (0b0111)  /* 20 clean channel values outside threshold range generates an interrupt */
                      00030 ;    #define TCS34725_PERS_25_CYCLE    (0b1000)  /* 25 clean channel values outside threshold range generates an interrupt */
                      00031 ;    #define TCS34725_PERS_30_CYCLE    (0b1001)  /* 30 clean channel values outside threshold range generates an interrupt */
                      00032 ;    #define TCS34725_PERS_35_CYCLE    (0b1010)  /* 35 clean channel values outside threshold range generates an interrupt */
                      00033 ;    #define TCS34725_PERS_40_CYCLE    (0b1011)  /* 40 clean channel values outside threshold range generates an interrupt */
                      00034 ;    #define TCS34725_PERS_45_CYCLE    (0b1100)  /* 45 clean channel values outside threshold range generates an interrupt */
                      00035 ;    #define TCS34725_PERS_50_CYCLE    (0b1101)  /* 50 clean channel values outside threshold range generates an interrupt */
                      00036 ;    #define TCS34725_PERS_55_CYCLE    (0b1110)  /* 55 clean channel values outside threshold range generates an interrupt */
                      00037 ;    #define TCS34725_PERS_60_CYCLE    (0b1111)  /* 60 clean channel values outside threshold range generates an interrupt */
                      00038 ;    #define TCS34725_CONFIG           (0x0D)
                      00039 ;    #define TCS34725_CONFIG_WLONG     (0x02)    /* Choose between short and long (12x) wait times via TCS34725_WTIME */
                      00040 ;    #define TCS34725_CONTROL          (0x0F)    /* Set the gain level for the sensor */
                      00041 ;    #define TCS34725_ID               (0x12)    /* 0x44 = TCS34721/TCS34725, 0x4D = TCS34723/TCS34727 */
                      00042 ;    #define TCS34725_STATUS           (0x13)
                      00043 ;    #define TCS34725_STATUS_AINT      (0x10)    /* RGBC Clean channel interrupt */
                      00044 ;    #define TCS34725_STATUS_AVALID    (0x01)    /* Indicates that the RGBC channels have completed an integration cycle */
                      00045 ;    #define TCS34725_CDATAL           (0x14)    /* Clear channel data */
                      00046 ;    #define TCS34725_CDATAH           (0x15)
                      00047 ;    #define TCS34725_RDATAL           (0x16)    /* Red channel data */
                      00048 ;    #define TCS34725_RDATAH           (0x17)
                      00049 ;    #define TCS34725_GDATAL           (0x18)    /* Green channel data */
                      00050 ;    #define TCS34725_GDATAH           (0x19)
                      00051 ;    #define TCS34725_BDATAL           (0x1A)    /* Blue channel data */
                      00052 ;    #define TCS34725_BDATAH           (0x1B)
                      00053 
                      00054 
Warning[207]: Found label after column 1. (COLOUR_INIT)
                      00055     COLOUR_INIT macro
                      00056         COLOUR_WRITE    0x00, 0x01 ; Enable Register (0x00), Power ON (0x01)
                      00057         call    delay5ms
                      00058         COLOUR_WRITE    0x00, 0x02 ; Enable Register (0x00), RGBC enable (0x02)
                      00059         call    delay5ms
                      00060         COLOUR_WRITE    0x01, 0xff ; Timing Register (0x01), 2.4ms (0xff) cycle
                      00061         call    delay5ms
                      00062         COLOUR_WRITE    0x0f, 0x03 ; Control Register (0x0f), 60x gain (0x03)
                      00063         call    delay5ms
                      00064     endm
                      00065     
Warning[207]: Found label after column 1. (COLOUR_READ)
                      00066     COLOUR_READ  macro  address
                      00067         movlw   address
                      00068         movwf   regaddress
                      00069         call    READ_COLOUR_I2C
                      00070     endm
                      00071     
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[207]: Found label after column 1. (COLOUR_WRITE)
                      00072     COLOUR_WRITE macro address, datliteral
                      00073         movlw   address
                      00074         movwf   regaddress
                      00075         movlw   datliteral
                      00076         movwf   databyte
                      00077         call    WRITE_COLOUR_I2C
                      00078     endm
                      00079     
Warning[207]: Found label after column 1. (COLOUR_GET_DATA)
                      00080     COLOUR_GET_DATA macro clear, red, green, blue
                      00081         call    delay5ms
                      00082         
                      00083         COLOUR_READ 0x14    ; read clear colour address low, command bits set later
                      00084         movff   databyte, clear+0
                      00085         COLOUR_READ 0x15    ; read clear colour address high, command bits set later
                      00086         movff   databyte, clear+1
                      00087                 
                      00088         COLOUR_READ 0x16    ; read red colour address low, command bits set later
                      00089         movff   databyte, red+0
                      00090         COLOUR_READ 0x17    ; read red colour address high, command bits set later
                      00091         movff   databyte, red+0
                      00092         
                      00093         COLOUR_READ 0x18    ; read green colour address low, command bits set later
                      00094         movff   databyte, green+0
                      00095         COLOUR_READ 0x19    ; read green colour address high, command bits set later
                      00096         movff   databyte, green+1
                      00097         
                      00098         COLOUR_READ 0x1a    ; read blue colour address low, command bits set later
                      00099         movff   databyte, blue+0
                      00100         COLOUR_READ 0x1b    ; read blue colour address high, command bits set later
                      00101         movff   databyte, blue+1
                      00102     endm
                      00103     
                      00019 #include <sorting.inc>
  0000                00001     extern      i2c_common_setup, regaddress, databyte, datachar, READ_ARDUINO, WR_DATA, delay5ms
                      00002     
Warning[207]: Found label after column 1. (ARDUINO_READ)
                      00003     ARDUINO_READ macro bottle_sort
                      00004         call    READ_ARDUINO
                      00005         movff   databyte, bottle_sort
                      00006     endm
                      00007     
                      00008 
                      00009 
                      00010 
                      00020 
                      00021     CONFIG OSC=HS, FCMEN=OFF, IESO=OFF
                      00022     CONFIG PWRT = OFF, BOREN = SBORDIS, BORV = 3
                      00023     CONFIG WDT = OFF, WDTPS = 32768
                      00024     CONFIG MCLRE = ON, LPT1OSC = OFF, PBADEN = OFF
                      00025     CONFIG STVREN = ON, LVP = OFF, XINST = OFF
                      00026     CONFIG DEBUG = OFF
                      00027     CONFIG CP0 = OFF, CP1 = OFF, CP2 = OFF, CP3 = OFF
                      00028     CONFIG CPB = OFF, CPD = OFF
                      00029     CONFIG WRT0 = OFF, WRT1 = OFF, WRT2 = OFF, WRT3 = OFF
                      00030     CONFIG WRTB = OFF, WRTC = OFF, WRTD = OFF
                      00031     CONFIG EBTR0 = OFF, EBTR1 = OFF, EBTR2 = OFF, EBTR3 = OFF
                      00032     CONFIG EBTRB = OFF
                      00033 
                      00034 ;*******************************************************************************
                      00035 ; variable and constants
                      00036 ;*******************************************************************************
                      00037     CODE
                      00038             
                      00039     cblock 0x00
  00000000            00040         key1
  00000001            00041         key2
  00000002            00042         key3
  00000003            00043         keyA
  00000004            00044         key4
  00000005            00045         key5
  00000006            00046         key6
  00000007            00047         keyB
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000008            00048         key7
  00000009            00049         key8
  0000000A            00050         key9
  0000000B            00051         keyC
  0000000C            00052         keyS
  0000000D            00053         key0
  0000000E            00054         keyH
  0000000F            00055         keyD
  00000010            00056         KEY
  00000011            00057         temp_KEY
  00000012            00058         KEY_ISR
  00000013            00059         temp_S  
  00000014            00060         temp_W
  00000015            00061         counter
  00000016            00062         counter2
  00000017            00063         temp
  00000018            00064         OP_sec
  00000019            00065         OP_INT
  0000001A            00066         temp_ISR
  0000001B            00067         delayR
  0000001C            00068         d5us
  0000001D            00069         d200us
  0000001E            00070         d50ms
  0000001F            00071         inExecution
  00000020            00072         clear_EE
  00000021            00073         H_EE    
  00000022            00074         L_EE    
  00000023            00075         REG_EE  
  00000024            00076         tempH_EE
  00000025            00077         tempL_EE
  00000026            00078         tempL_EEC
  00000027            00079         MAX_EE   
  00000028            00080         READ_EE
  00000029            00081         last_log
  0000002A            00082         startHt
  0000002B            00083         startHo
  0000002C            00084         startMt
  0000002D            00085         startMo
  0000002E            00086         endHt
  0000002F            00087         endHo
  00000030            00088         endMt
  00000031            00089         endMo
  00000032            00090         LED_Count
  00000033            00091         SkipCount
  00000034            00092         exe_sec
  00000035            00093         exe_int
  00000036            00094         timer_H
  00000037            00095         timer_L
  00000038            00096         convert_buffer
  00000039            00097         transferring
  0000003A            00098         PC_PCL
  0000003B            00099         PC_PCLATH
  0000003C            00100         PC_PCLATU
  0000003D            00101         TIMCNT
  0000003E            00102         CPCNT
  0000003F            00103         TDATA
  00000040            00104         DETECTION_VAL
  00000041            00105         ESKA
  00000042            00106         ESKA_CAP
  00000043            00107         YOP
  00000044            00108         YOP_CAP
  00000045            00109         CLEAR:2
  00000047            00110         RED:2
  00000049            00111         GREEN:2
  0000004B            00112         BLUE:2
  0000004D            00113         temp_colour:2
                      00114     endc
                      00115     
  0000                00116     extern tens_digit, ones_digit
                      00117     
                      00118 ;*******************************************************************************
                      00119 ; tables
                      00120 ;*******************************************************************************
Warning[207]: Found label after column 1. (Welcome)
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000000 6F62 4C74 0000 00121     Welcome     db          "botL", 0
Warning[207]: Found label after column 1. (Team)
000006 726D 6820 206C 00122     Team        db          "mr hl hg", 0
       6768 0000 
Warning[207]: Found label after column 1. (StandBy)
000010 7453 6E61 6264 00123     StandBy     db          "Standby", 0
       0079 
Warning[207]: Found label after column 1. (Log1)
000018 6954 656D 003A 00124     Log1        db          "Time:",0
Warning[207]: Found label after column 1. (Log2)
00001E 3231 303A 2030 00125     Log2        db          "12:00 2/3/14", 0
       2F32 2F33 3431 
       0000 
Warning[207]: Found label after column 1. (LogInfo1)
00002C 6153 6576 3A64 00126     LogInfo1    db          "Saved:", 0
       0000 
Warning[207]: Found label after column 1. (LogInfo2)
000034 6142 6B63 3C20 00127     LogInfo2    db          "Back <0>", 0
       3E30 0000 
Warning[207]: Found label after column 1. (PermLog1)
00003E 6550 6D72 6E61 00128     PermLog1    db          "Permanent Logs", 0
       6E65 2074 6F4C 
       7367 0000 
Warning[207]: Found label after column 1. (PermLog2)
00004E 313C 203E 2E2E 00129     PermLog2    db          "<1> ... <9>", 0    
       202E 393C 003E 
Warning[207]: Found label after column 1. (Exe1)
00005A 6F53 7472 6E69 00130     Exe1        db          "Sorting...", 0
       2E67 2E2E 0000 
Warning[207]: Found label after column 1. (Exe2)
000066 4E45 2044 2A3C 00131     Exe2        db          "END <*>", 0
       003E 
Warning[207]: Found label after column 1. (PC1)
00006E 4350 4920 746E 00132     PC1         db          "PC Interface", 0
       7265 6166 6563 
       0000 
Warning[207]: Found label after column 1. (PC2)
00007C 6542 6967 206E 00133     PC2         db          "Begin <#>", 0
       233C 003E 
Warning[207]: Found label after column 1. (PCTransfer)
000086 7254 6E61 6673 00134     PCTransfer  db          "Transferring...", 0
       7265 6972 676E 
       2E2E 002E 
Warning[207]: Found label after column 1. (Stopped)
000096 7453 706F 6570 00135     Stopped     db          "Stopped", 0
       0064 
Warning[207]: Found label after column 1. (Exe_Time)
00009E 6954 656D 203A 00136     Exe_Time    db          "Time: ", 0
       0000 
Warning[207]: Found label after column 1. (SAVE)
0000A6 6153 6976 676E 00137     SAVE        db          "Saving...", 0
       2E2E 002E 
Warning[207]: Found label after column 1. (Safety)
0000B0 6153 6566 7974 00138     Safety      db          "Safety check...", 0
       6320 6568 6B63 
       2E2E 002E 
Warning[207]: Found label after column 1. (NoData)
0000C0 2F4E 0041      00139     NoData      db          "N/A", 0
Warning[207]: Found label after column 1. (PCLog1)
0000C4 6954 656D 6120 00140     PCLog1      db          "Time and Date:", 0
       646E 4420 7461 
       3A65 0000 
                      00141         
                      00142 ;*******************************************************************************
                      00143 ; macros
                      00144 ;*******************************************************************************
                      00145 
                      00146 TransferTable macro table
                      00147         local loop
                      00148         
                      00149         movlw   upper table
                      00150         movwf   TBLPTRU
                      00151         movlw   high table
                      00152         movwf   TBLPTRH
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00153         movlw   low table
                      00154         movwf   TBLPTRL
                      00155         tblrd*
                      00156         movff   TABLAT, WREG
                      00157 loop
                      00158         call    USART_WAIT
                      00159         tblrd+*
                      00160         movff   TABLAT, WREG
                      00161         bnz     loop
                      00162         endm
                      00163         
                      00164 ConfigLCD   macro
                      00165           movlw     b'00101000'    ; 4 bits, 2 lines,5X7 dots seems to work best instead of the above setting
                      00166           call      WR_INS
                      00167 
                      00168           movlw     b'00001100'    ; display on/off
                      00169           call      WR_INS
                      00170          ; movlw     B'00000110'    ; Entry mode
                      00171          ; call      WR_INS
                      00172           movlw     b'00000001'    ; Clear ram
                      00173           call      WR_INS
                      00174           endm
                      00175         
                      00176 movMSB  macro   port
                      00177         andlw   0xF0
                      00178         iorwf   port, f
                      00179         iorlw   0x0F
                      00180         andwf   port, f
                      00181         endm
                      00182 
                      00183 Delay50N macro count, N
                      00184         local   loop
                      00185         movlw   N
                      00186         movwf   count
                      00187 
                      00188 loop
                      00189         call    Delay50ms
                      00190         decfsz  count
                      00191         goto    loop
                      00192         endm
                      00193 
                      00194 Display macro   Message
                      00195         local   loop
                      00196         movlw   upper Message   ; Move Table<20:16>
                      00197         movwf   TBLPTRU
                      00198         movlw   high Message    ; Move Table<15:8>
                      00199         movwf   TBLPTRH
                      00200         movlw   low Message     ; Move Table<7:0>
                      00201         movwf   TBLPTRL
                      00202         tblrd*                  ; Read byte from TBLPTRL to TABLAT
                      00203         movf    TABLAT, W
                      00204 loop
                      00205         call    WR_DATA         ; write to LCD
                      00206         tblrd+*                 ; next row in table
                      00207         movf    TABLAT, W
                      00208         bnz     loop
                      00209         endm
                      00210 
                      00211 DisplayLog  macro   addrH, addrL
                      00212             local   Again, Finish
                      00213             
                      00214             clrf    SkipCount
                      00215             clrf    MAX_EE
                      00216 
                      00217             ; Check if there is No Data first
                      00218             READEE      REG_EE, addrH, addrL
                      00219             movlw       0xFF
                      00220             cpfseq      REG_EE
                      00221             goto        Again
                      00222             Display     NoData
                      00223             goto        Finish
                      00224 Again
                      00225             ; Put a space every 3 Writes
                      00226             movlw       d'3'
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00227             cpfslt      SkipCount
                      00228             cpfslt      MAX_EE
                      00229             goto        Finish
                      00230 
                      00231             ; read EEPROM
                      00232             READEE      REG_EE, addrH, addrL
                      00233             btfsc       REG_EE, 7       ; if bit 7 set then done
                      00234             goto        Finish
                      00235 Finish
                      00236             endm
                      00237             
                      00238 ;TransferLog macro   addrH, addrL
                      00239         
                      00240 
                      00241 incf_BCD    macro   BCD
                      00242         local ones, endBCD
                      00243         movff   BCD, temp
                      00244         
                      00245         ;process ones digit
                      00246         movlw   0x0f
                      00247         andwf   temp
                      00248         movlw   d'9'
                      00249         
                      00250         ;skip if ones digit is 9
                      00251         cpfseq  temp
                      00252         goto    ones
                      00253         
                      00254         movlw   b'00010000'
                      00255         addwf   BCD
                      00256         movlw   0xf0
                      00257         andwf   BCD
                      00258         movlw   0xa0
                      00259         cpfslt  BCD
                      00260         
                      00261         clrf    BCD
                      00262         goto    endBCD
                      00263         
                      00264 ones
                      00265         incf    BCD
                      00266         goto    endBCD
                      00267 endBCD
                      00268         nop
                      00269         endm
                      00270         
                      00271 SUB16   macro   x, y        ; does not modify x nor y
                      00272         local   RESULTS
                      00273         movff   y+1, WREG   ; move high y into working register
                      00274         subwf   x+1, 0      ; do subtraction xH - yH => w
                      00275         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
                      00276         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                      00277         
                      00278         movff   y+0, WREG
                      00279         subwf   x+0, 0  
                      00280 RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
                      00281         endm
                      00282 
                      00283 WriteRTC    macro
                      00284         movff   tens_digit, WREG
                      00285         call    WR_DATA
                      00286         movff   ones_digit, WREG
                      00287         call    WR_DATA
                      00288         endm
                      00289 
                      00290 WriteEE macro   word, addH, addL
                      00291         movff   addH, EEADRH        ; High address
                      00292         movff   addL, EEADR         ; Low address
                      00293         movff   word, EEDATA        ; set word
                      00294 
                      00295         btfsc   EECON1, WR          ; test if WR=0, skip if so
                      00296         bra     $-2
                      00297 
                      00298         bcf     EECON1, EEPGD       ; Point to data memory
                      00299         bcf     EECON1, CFGS        ; Access EEPROM
                      00300         bsf     EECON1, WREN        ; enable write
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00301         bcf     INTCON, GIE         ; disable interrupts during write
                      00302         bcf     PIR2, EEIF
                      00303 
                      00304         movlw   0x55
                      00305         movwf   EECON2              ; write 55h
                      00306         movlw   0xaa
                      00307         movwf   EECON2              ; write 0xaa
                      00308         bsf     EECON1, WR          ; begin write
                      00309         btfsc   EECON1, WR
                      00310         bra     $-2
                      00311 
                      00312         bsf     INTCON, GIE         ; enable interrupts after write
                      00313         bcf     EECON1, WREN        ; disable writes
                      00314         endm
                      00315 
                      00316 READEE  macro   file, addH, addL
                      00317         movff   addH, EEADRH        ; read to high
                      00318         movff   addL, EEADR         ; read to low
                      00319         bcf     EECON1, EEPGD       ; point to data memory
                      00320         bcf     EECON1, CFGS        ; access to EEPROM
                      00321         bsf     EECON1, RD          ; read EEPROM
                      00322         movff   EEDATA, file        ; put data into file
                      00323         endm
                      00324 
                      00325 ChangeMode  macro   ModeId, NextMode
                      00326         local Next, Exit
                      00327 
                      00328         movlw   ModeId              ; poll for mode
                      00329         cpfseq  KEY                 ; check this against key press
                      00330         goto    Exit
                      00331 
                      00332 Next
                      00333         clrf    LATA                ; clear pins before proceeding
                      00334         clrf    LATB
                      00335         clrf    LATC
                      00336         clrf    LATD
                      00337         goto    NextMode
                      00338 
                      00339 Exit
                      00340         nop
                      00341         endm
                      00342 
                      00343 saveContext macro
                      00344     movff   STATUS, temp_S          ; save STATUS first
                      00345     movwf   temp_W                  ; save W
                      00346     endm
                      00347 
                      00348 restoreContext macro
                      00349     swapf   temp_W, W               ; restore W first
                      00350     movff   temp_S, STATUS          ; restore STATUS last without affecting W
                      00351     endm
                      00352 ;*******************************************************************************
                      00353 ; reset vector and isrs
                      00354 ;*******************************************************************************
                      00355         ORG     0x000               ; processor reset vector
000000 EF?? F???      00356         goto    INIT                ; go to beginning of program
                      00357 
                      00358         ORG     0x008
000008 EF?? F???      00359         goto    ISR_HIGH
                      00360 
                      00361         ORG     0x018
000018 EF?? F???      00362         goto    ISR_LOW
                      00363 
00001C                00364 ISR_HIGH
                      00365         saveContext
00001C CFD8 F013          M     movff   STATUS, temp_S          ; save STATUS first
000020 6E14               M     movwf   temp_W                  ; save W
                      00366         
                      00367         ; displaying the execution time in seconds
Warning[202]: Argument out of range.  Least significant bits used.
000022 3818           00368         swapf   OP_sec, WREG    ; 100's seconds
000024 6E17           00369         movwf   temp
000026 0E0F           00370         movlw   0x0F
000028 1617           00371         andwf   temp
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00002A C017 FFE8      00372         movff   temp, WREG
00002E 0F30           00373         addlw   0x30
000030 EC?? F???      00374         call    WR_DATA
                      00375 
000034 C018 F017      00376         movff   OP_sec, temp    ; 10's seconds
000038 0E0F           00377         movlw   0x0F
00003A 1617           00378         andwf   temp            ; Temp = lower nibble of Op_sec
00003C C017 FFE8      00379         movff   temp, WREG      ; W = Temp
000040 0F30           00380         addlw   0x30            ; Convert to ASCII
000042 EC?? F???      00381         call    WR_DATA
                      00382         
Warning[202]: Argument out of range.  Least significant bits used.
000046 3819           00383         swapf   OP_INT, WREG    ;1's seconds
000048 6E17           00384         movwf   temp
00004A 0E0F           00385         movlw   0x0f
00004C 1617           00386         andwf   temp
00004E C017 FFE8      00387         movff   temp, WREG
000052 0F30           00388         addlw   0x30
000054 EC?? F???      00389         call    WR_DATA
                      00390 
000058 0E73           00391         movlw   0x73            ; Write 's'
00005A EC?? F???      00392         call    WR_DATA
00005E EC?? F???      00393         call    LCD_L2
                      00394 
                      00395         ;reset timer 
000062 0EC6           00396         movlw   0xc6
000064 6ED7           00397         movwf   TMR0H
000066 0E3E           00398         movlw   0x3e
000068 6ED6           00399         movwf   TMR0L
                      00400                 
                      00401         ;timer interrupt
00006A A4F2           00402         btfss   INTCON, TMR0IF
00006C EF?? F???      00403         goto    END_ISR_HIGH
                      00404         
                      00405         incf_BCD    OP_INT
  0000                    M         local ones, endBCD
000070 C019 F017          M         movff   OP_INT, temp
                          M         
                          M         ;process ones digit
000074 0E0F               M         movlw   0x0f
000076 1617               M         andwf   temp
000078 0E09               M         movlw   d'9'
                          M         
                          M         ;skip if ones digit is 9
00007A 6217               M         cpfseq  temp
00007C EF?? F???          M         goto    ones
                          M         
000080 0E10               M         movlw   b'00010000'
000082 2619               M         addwf   OP_INT
000084 0EF0               M         movlw   0xf0
000086 1619               M         andwf   OP_INT
000088 0EA0               M         movlw   0xa0
00008A 6019               M         cpfslt  OP_INT
                          M         
00008C 6A19               M         clrf    OP_INT
00008E EF?? F???          M         goto    endBCD
                          M         
000092                    M ones
000092 2A19               M         incf    OP_INT
000094 EF?? F???          M         goto    endBCD
000098                    M endBCD
000098 0000               M         nop
00009A 0E00           00406         movlw   d'0'
00009C 6219           00407         cpfseq  OP_INT
00009E EF?? F???      00408         goto    END_ISR_HIGH
                      00409         incf_BCD    OP_sec
  0000                    M         local ones, endBCD
0000A2 C018 F017          M         movff   OP_sec, temp
                          M         
                          M         ;process ones digit
0000A6 0E0F               M         movlw   0x0f
0000A8 1617               M         andwf   temp
0000AA 0E09               M         movlw   d'9'
                          M         
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         ;skip if ones digit is 9
0000AC 6217               M         cpfseq  temp
0000AE EF?? F???          M         goto    ones
                          M         
0000B2 0E10               M         movlw   b'00010000'
0000B4 2618               M         addwf   OP_sec
0000B6 0EF0               M         movlw   0xf0
0000B8 1618               M         andwf   OP_sec
0000BA 0EA0               M         movlw   0xa0
0000BC 6018               M         cpfslt  OP_sec
                          M         
0000BE 6A18               M         clrf    OP_sec
0000C0 EF?? F???          M         goto    endBCD
                          M         
0000C4                    M ones
0000C4 2A18               M         incf    OP_sec
0000C6 EF?? F???          M         goto    endBCD
0000CA                    M endBCD
0000CA 0000               M         nop
                      00410 
0000CC                00411 END_ISR_HIGH
0000CC 94F2           00412         bcf     INTCON, TMR0IF
                      00413         restoreContext
0000CE 3814               M     swapf   temp_W, W               ; restore W first
0000D0 C013 FFD8          M     movff   temp_S, STATUS          ; restore STATUS last without affecting W
0000D4 0010           00414         retfie
                      00415 
0000D6                00416 ISR_LOW
                      00417         saveContext
0000D6 CFD8 F013          M     movff   STATUS, temp_S          ; save STATUS first
0000DA 6E14               M     movwf   temp_W                  ; save W
                      00418         ; KEYPAD INTERRUPT
0000DC A0F0           00419         btfss           INTCON3, INT1IF                 ; If KEYPAD interrupt, skip return
0000DE EF?? F???      00420         goto            END_ISR_LOW
                      00421 
                      00422         ;Check operation status
                      00423 ;       movlw           0xff                                    ; If in operation, skip return
                      00424 ;       cpfseq          InExecution
                      00425 ;       goto            END_ISR_LOW
                      00426 
                      00427         ; Process KEY
0000E2 3881           00428         swapf           PORTB, W                                ; Read PORTB<7:4> into W<3:0>
0000E4 0B0F           00429         andlw           0x0f
0000E6 6E12           00430         movwf           KEY_ISR                                 ; Put W into KEY_ISR
                      00431 ;       movlw           keyS                                    ; Put keyStar into W to compare to KEY_ISR
                      00432 ;       cpfseq          KEY_ISR                                 ; If key was '*', skip return
0000E8 EF?? F???      00433         goto            END_ISR_LOW
                      00434 
                      00435         ; Reset program counter
0000EC 6AFF           00436         clrf            TOSU
0000EE 6AFE           00437         clrf            TOSH
0000F0 6AFD           00438         clrf            TOSL
                      00439 
0000F2                00440 END_ISR_LOW
0000F2 90F0           00441         bcf                     INTCON3, INT1IF         ; Clear flag for next interrupt
                      00442         restoreContext
0000F4 3814               M     swapf   temp_W, W               ; restore W first
0000F6 C013 FFD8          M     movff   temp_S, STATUS          ; restore STATUS last without affecting W
0000FA 0010           00443         retfie
                      00444 
                      00445 ;*******************************************************************************
                      00446 ; main
                      00447 ;*******************************************************************************
0000FC                00448 INIT
                      00449         ; i/o
0000FC 0EFF           00450         movlw   b'11111111'
0000FE 6E92           00451         movwf   TRISA
000100 0EFF           00452         movlw   b'11111111'
000102 6E93           00453         movwf   TRISB               ; keypad
000104 0E00           00454         movlw   b'00000000'
000106 6E94           00455         movwf   TRISC
000108 0E00           00456         movlw   b'00000000'
00010A 6E95           00457         movwf   TRISD
00010C 0E07           00458         movlw   b'00000111'
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00010E 6E96           00459         movwf   TRISE
                      00460 
                      00461         ; analog/digital pins
000110 0E0F           00462         movlw   b'00001111'     ; Set all AN pins to Digital
000112 6EC1           00463         movwf   ADCON1
                      00464 
                      00465         ; clear ports
000114 6A89           00466         clrf    LATA
000116 6A8A           00467         clrf    LATB
                      00468 ;       bcf     TRISC, SCL
                      00469 ;       bcf     TRISC, SDA
000118 6A8B           00470         clrf    LATC
00011A 6A8C           00471         clrf    LATD
00011C 6A8D           00472         clrf    LATE
                      00473         
00011E 0E00           00474         movlw   b'00000000'
000120 6EC2           00475         movwf   ADCON0
000122 0EFF           00476         movlw   b'11111111'
000124 6EC1           00477         movwf   ADCON1
                      00478         
                      00479         ; initializations
000126 EC?? F???      00480         call    InitLCD
                      00481         ConfigLCD
00012A 0E28               M           movlw     b'00101000'    ; 4 bits, 2 lines,5X7 dots seems to work best instead of the above setting
00012C EC?? F???          M           call      WR_INS
                          M 
000130 0E0C               M           movlw     b'00001100'    ; display on/off
000132 EC?? F???          M           call      WR_INS
                          M          ; movlw     B'00000110'    ; Entry mode
                          M          ; call      WR_INS
000136 0E01               M           movlw     b'00000001'    ; Clear ram
000138 EC?? F???          M           call      WR_INS
00013C EC?? F???      00482         call    RTC_INIT
000140 EC?? F???      00483         call    Delay50ms
                      00484         COLOUR_INIT
                          M         COLOUR_WRITE    0x00, 0x01 ; Enable Register (0x00), Power ON (0x01)
000144 0E00               M         movlw   0x00
000146 6E??               M         movwf   regaddress
000148 0E01               M         movlw   0x01
00014A 6E??               M         movwf   databyte
00014C EC?? F???          M         call    WRITE_COLOUR_I2C
000150 EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x00, 0x02 ; Enable Register (0x00), RGBC enable (0x02)
000154 0E00               M         movlw   0x00
000156 6E??               M         movwf   regaddress
000158 0E02               M         movlw   0x02
00015A 6E??               M         movwf   databyte
00015C EC?? F???          M         call    WRITE_COLOUR_I2C
000160 EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x01, 0xff ; Timing Register (0x01), 2.4ms (0xff) cycle
000164 0E01               M         movlw   0x01
000166 6E??               M         movwf   regaddress
000168 0EFF               M         movlw   0xff
00016A 6E??               M         movwf   databyte
00016C EC?? F???          M         call    WRITE_COLOUR_I2C
000170 EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x0f, 0x03 ; Control Register (0x0f), 60x gain (0x03)
000174 0E0F               M         movlw   0x0f
000176 6E??               M         movwf   regaddress
000178 0E03               M         movlw   0x03
00017A 6E??               M         movwf   databyte
00017C EC?? F???          M         call    WRITE_COLOUR_I2C
000180 EC?? F???          M         call    delay5ms
000184 EC?? F???      00485         call    INIT_USART
                      00486 
                      00487         ; interrupts
000188 6AD0           00488         clrf    RCON
00018A 6AF2           00489         clrf    INTCON
00018C 6AF1           00490         clrf    INTCON2
00018E 6AF0           00491         clrf    INTCON3
000190 8ED0           00492         bsf     RCON, IPEN          ; priority mode
000192 8EF2           00493         bsf     INTCON, GIEH        ; permit global interrupts
000194 8CF2           00494         bsf     INTCON, GIEL
000196 8AF1           00495         bsf     INTCON2, INTEDG1    ; INTEDG1 on rising edge
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000198 8AF2           00496         bsf     INTCON, TMR0IE      ; clear timer0 overflow interrupt flag
00019A 84F2           00497         bsf     INTCON, TMR0IF      ; clear timer0 overflow interrupt flag
00019C 84F1           00498         bsf     INTCON2, TMR0IP     ; set to high priority
00019E 86F0           00499         bsf     INTCON3, INT1IE
0001A0 9CF0           00500         bcf     INTCON3, INT1IP
                      00501         
                      00502         ; setting up timer to sychronize with 1 second clock intervals
0001A2 9ED5           00503         bcf     T0CON, TMR0ON
0001A4 9CD5           00504         bcf     T0CON, T08BIT
0001A6 9AD5           00505         bcf     T0CON, T0CS
0001A8 98D5           00506         bcf     T0CON, T0SE
0001AA 96D5           00507         bcf     T0CON, PSA
0001AC 94D5           00508         bcf     T0CON, T0PS2        ; set prescaling to 1:16. this allows for 
0001AE 82D5           00509         bsf     T0CON, T0PS1        ; a preloading of ~50750 or 0xc63e. very
0001B0 80D5           00510         bsf     T0CON, T0PS0        ; good approximation within 3 minutes.
                      00511 
0001B2 6A21           00512         clrf    H_EE
0001B4 6A22           00513         clrf    L_EE
0001B6 6A??           00514         clrf    tens_digit
0001B8 6A??           00515         clrf    ones_digit
0001BA 6A40           00516         clrf    DETECTION_VAL
0001BC 6A41           00517         clrf    ESKA
0001BE 6A42           00518         clrf    ESKA_CAP
0001C0 6A43           00519         clrf    YOP
0001C2 6A44           00520         clrf    YOP_CAP
0001C4 6A45           00521         clrf    CLEAR+0
0001C6 6A46           00522         clrf    CLEAR+1 
0001C8 6A47           00523         clrf    RED+0
0001CA 6A48           00524         clrf    RED+1
0001CC 6A49           00525         clrf    GREEN+0
0001CE 6A4A           00526         clrf    GREEN+1
0001D0 6A4B           00527         clrf    BLUE+0
0001D2 6A4C           00528         clrf    BLUE+1
                      00529         
0001D4 0EF2           00530         movlw     b'11110010'    ; Set required keypad inputs
0001D6 6E93           00531         movwf     TRISB
                      00532         
0001D8 EC?? F???      00533         call    ClrLCD
                      00534         Display Welcome
  0000                    M         local   loop
0001DC 0E??               M         movlw   upper Welcome   ; Move Table<20:16>
0001DE 6EF8               M         movwf   TBLPTRU
0001E0 0E??               M         movlw   high Welcome    ; Move Table<15:8>
0001E2 6EF7               M         movwf   TBLPTRH
0001E4 0E??               M         movlw   low Welcome     ; Move Table<7:0>
0001E6 6EF6               M         movwf   TBLPTRL
0001E8 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0001EA 50F5               M         movf    TABLAT, W
0001EC                    M loop
0001EC EC?? F???          M         call    WR_DATA         ; write to LCD
0001F0 000B               M         tblrd+*                 ; next row in table
0001F2 50F5               M         movf    TABLAT, W
0001F4 E1??               M         bnz     loop
0001F6 EC?? F???      00535         call LCD_L2
                      00536         Display Team
  0000                    M         local   loop
0001FA 0E??               M         movlw   upper Team      ; Move Table<20:16>
0001FC 6EF8               M         movwf   TBLPTRU
0001FE 0E??               M         movlw   high Team       ; Move Table<15:8>
000200 6EF7               M         movwf   TBLPTRH
000202 0E??               M         movlw   low Team        ; Move Table<7:0>
000204 6EF6               M         movwf   TBLPTRL
000206 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000208 50F5               M         movf    TABLAT, W
00020A                    M loop
00020A EC?? F???          M         call    WR_DATA         ; write to LCD
00020E 000B               M         tblrd+*                 ; next row in table
000210 50F5               M         movf    TABLAT, W
000212 E1??               M         bnz     loop
                      00537         
                      00538         Delay50N delayR, 0x28
  0000                    M         local   loop
000214 0E28               M         movlw   0x28
000216 6E1B               M         movwf   delayR
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
000218                    M loop
000218 EC?? F???          M         call    Delay50ms
00021C 2E1B               M         decfsz  delayR
00021E EF?? F???          M         goto    loop
                      00539 
                      00540 ;*******************************************************************************
                      00541 ; standby mode
                      00542 ;*******************************************************************************
000222                00543 STANDBY
000222 EC?? F???      00544         call    ClrLCD
                      00545         Display StandBy
  0000                    M         local   loop
000226 0E??               M         movlw   upper StandBy   ; Move Table<20:16>
000228 6EF8               M         movwf   TBLPTRU
00022A 0E??               M         movlw   high StandBy    ; Move Table<15:8>
00022C 6EF7               M         movwf   TBLPTRH
00022E 0E??               M         movlw   low StandBy     ; Move Table<7:0>
000230 6EF6               M         movwf   TBLPTRL
000232 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000234 50F5               M         movf    TABLAT, W
000236                    M loop
000236 EC?? F???          M         call    WR_DATA         ; write to LCD
00023A 000B               M         tblrd+*                 ; next row in table
00023C 50F5               M         movf    TABLAT, W
00023E E1??               M         bnz     loop
                      00546 
000240                00547 HOLD_STANDBY
000240 EC?? F???      00548         call    READ_KEY_TIME
                      00549         ChangeMode  key5, COLOUR_TEST
  0000                    M         local Next, Exit
                          M 
000244 0E05               M         movlw   key5                ; poll for mode
000246 6210               M         cpfseq  KEY                 ; check this against key press
000248 EF?? F???          M         goto    Exit
                          M 
00024C                    M Next
00024C 6A89               M         clrf    LATA                ; clear pins before proceeding
00024E 6A8A               M         clrf    LATB
000250 6A8B               M         clrf    LATC
000252 6A8C               M         clrf    LATD
000254 EF?? F???          M         goto    COLOUR_TEST
                          M 
000258                    M Exit
000258 0000               M         nop
                      00550         ChangeMode  key8, STEP_TEST
  0000                    M         local Next, Exit
                          M 
00025A 0E09               M         movlw   key8                ; poll for mode
00025C 6210               M         cpfseq  KEY                 ; check this against key press
00025E EF?? F???          M         goto    Exit
                          M 
000262                    M Next
000262 6A89               M         clrf    LATA                ; clear pins before proceeding
000264 6A8A               M         clrf    LATB
000266 6A8B               M         clrf    LATC
000268 6A8C               M         clrf    LATD
00026A EF?? F???          M         goto    STEP_TEST
                          M 
00026E                    M Exit
00026E 0000               M         nop
                      00551         ChangeMode  keyA, EXECUTION
  0000                    M         local Next, Exit
                          M 
000270 0E03               M         movlw   keyA                ; poll for mode
000272 6210               M         cpfseq  KEY                 ; check this against key press
000274 EF?? F???          M         goto    Exit
                          M 
000278                    M Next
000278 6A89               M         clrf    LATA                ; clear pins before proceeding
00027A 6A8A               M         clrf    LATB
00027C 6A8B               M         clrf    LATC
00027E 6A8C               M         clrf    LATD
000280 EF?? F???          M         goto    EXECUTION
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
000284                    M Exit
000284 0000               M         nop
                      00552         ChangeMode  keyB, LOG
  0000                    M         local Next, Exit
                          M 
000286 0E07               M         movlw   keyB                ; poll for mode
000288 6210               M         cpfseq  KEY                 ; check this against key press
00028A EF?? F???          M         goto    Exit
                          M 
00028E                    M Next
00028E 6A89               M         clrf    LATA                ; clear pins before proceeding
000290 6A8A               M         clrf    LATB
000292 6A8B               M         clrf    LATC
000294 6A8C               M         clrf    LATD
000296 EF?? F???          M         goto    LOG
                          M 
00029A                    M Exit
00029A 0000               M         nop
                      00553         ChangeMode  keyC, PERM_LOG
  0000                    M         local Next, Exit
                          M 
00029C 0E0B               M         movlw   keyC                ; poll for mode
00029E 6210               M         cpfseq  KEY                 ; check this against key press
0002A0 EF?? F???          M         goto    Exit
                          M 
0002A4                    M Next
0002A4 6A89               M         clrf    LATA                ; clear pins before proceeding
0002A6 6A8A               M         clrf    LATB
0002A8 6A8B               M         clrf    LATC
0002AA 6A8C               M         clrf    LATD
0002AC EF?? F???          M         goto    PERM_LOG
                          M 
0002B0                    M Exit
0002B0 0000               M         nop
                      00554         ChangeMode  keyD, PC_MODE
  0000                    M         local Next, Exit
                          M 
0002B2 0E0F               M         movlw   keyD                ; poll for mode
0002B4 6210               M         cpfseq  KEY                 ; check this against key press
0002B6 EF?? F???          M         goto    Exit
                          M 
0002BA                    M Next
0002BA 6A89               M         clrf    LATA                ; clear pins before proceeding
0002BC 6A8A               M         clrf    LATB
0002BE 6A8B               M         clrf    LATC
0002C0 6A8C               M         clrf    LATD
0002C2 EF?? F???          M         goto    PC_MODE
                          M 
0002C6                    M Exit
0002C6 0000               M         nop
0002C8 D???           00555         bra     HOLD_STANDBY
                      00556 
                      00557 ;*******************************************************************************
                      00558 ; execution mode
                      00559 ;*******************************************************************************
                      00560         
0002CA                00561 STEP_TEST
0002CA 0E03           00562         movlw   b'00000011'
0002CC 6E83           00563         movwf   PORTD
0002CE EC?? F???      00564         call    delay5ms
                      00565         
0002D2 0E06           00566         movlw   b'00000110'
0002D4 6E83           00567         movwf   PORTD
0002D6 EC?? F???      00568         call    delay5ms
                      00569         
0002DA 0E0C           00570         movlw   b'00001100'
0002DC 6E83           00571         movwf   PORTD
0002DE EC?? F???      00572         call    delay5ms
                      00573 
0002E2 0E09           00574         movlw   b'00001001'
0002E4 6E83           00575         movwf   PORTD
0002E6 EC?? F???      00576         call    delay5ms
                      00577 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002EA D???           00578         bra STEP_TEST
                      00579         
0002EC                00580 CHECK_CLEAR
                      00581         SUB16   CLEAR, RED                  ; check first against red
  0000                    M         local   RESULTS
0002EC C048 FFE8          M         movff   RED+1, WREG ; move high y into working register
0002F0 5C46               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
0002F2 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0002F4 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0002F8 C047 FFE8          M         movff   RED+0, WREG
0002FC 5C45               M         subwf   CLEAR+0, 0 
0002FE                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0002FE A0D8           00582         btfss   STATUS, C
000300 0012           00583         return                              ; RED > CLEAR
                      00584         
                      00585         SUB16   CLEAR, GREEN                ; check against green
  0000                    M         local   RESULTS
000302 C04A FFE8          M         movff   GREEN+1, WREG ; move high y into working register
000306 5C46               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
000308 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00030A EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00030E C049 FFE8          M         movff   GREEN+0, WREG
000312 5C45               M         subwf   CLEAR+0, 0 
000314                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000314 A0D8           00586         btfss   STATUS, C
000316 0012           00587         return                              ; GREEN > CLEAR
                      00588         
                      00589         SUB16   CLEAR, BLUE                 ; check against blue
  0000                    M         local   RESULTS
000318 C04C FFE8          M         movff   BLUE+1, WREG ; move high y into working register
00031C 5C46               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
00031E A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000320 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000324 C04B FFE8          M         movff   BLUE+0, WREG
000328 5C45               M         subwf   CLEAR+0, 0 
00032A                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
00032A A0D8           00590         btfss   STATUS, C
00032C 0012           00591         return                              ; BLUE > CLEAR
                      00592         
00032E 0E63           00593         movlw   'c'                         ; CLEAR > everything else
000330 EC?? F???      00594         call    WR_DATA
000334 D???           00595         bra     LOOPING
000336                00596 CHECK_RED
                      00597         SUB16   RED, CLEAR                  ; check first against clear
  0000                    M         local   RESULTS
000336 C046 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
00033A 5C48               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
00033C A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00033E EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000342 C045 FFE8          M         movff   CLEAR+0, WREG
000346 5C47               M         subwf   RED+0, 0 
000348                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000348 A0D8           00598         btfss   STATUS, C
00034A 0012           00599         return                              ; CLEAR > RED
                      00600         
                      00601         SUB16   RED, GREEN                  ; check against green
  0000                    M         local   RESULTS
00034C C04A FFE8          M         movff   GREEN+1, WREG ; move high y into working register
000350 5C48               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
000352 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000354 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000358 C049 FFE8          M         movff   GREEN+0, WREG
00035C 5C47               M         subwf   RED+0, 0 
00035E                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
00035E A0D8           00602         btfss   STATUS, C
000360 0012           00603         return                              ; GREEN > RED
                      00604         
                      00605         SUB16   RED, BLUE                   ; check against blue
  0000                    M         local   RESULTS
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000362 C04C FFE8          M         movff   BLUE+1, WREG ; move high y into working register
000366 5C48               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
000368 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00036A EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00036E C04B FFE8          M         movff   BLUE+0, WREG
000372 5C47               M         subwf   RED+0, 0 
000374                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000374 A0D8           00606         btfss   STATUS, C
000376 0012           00607         return                              ; BLUE > RED
                      00608         
000378 0E72           00609         movlw   'r'                         ; RED > everything else
00037A EC?? F???      00610         call    WR_DATA
00037E D???           00611         bra     LOOPING
000380                00612 CHECK_GREEN
                      00613         SUB16   GREEN, CLEAR                ; check first against clear
  0000                    M         local   RESULTS
000380 C046 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
000384 5C4A               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
000386 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000388 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00038C C045 FFE8          M         movff   CLEAR+0, WREG
000390 5C49               M         subwf   GREEN+0, 0 
000392                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000392 A0D8           00614         btfss   STATUS, C
000394 0012           00615         return                              ; CLEAR > GREEN
                      00616         
                      00617         SUB16   GREEN, RED                  ; check against red
  0000                    M         local   RESULTS
000396 C048 FFE8          M         movff   RED+1, WREG ; move high y into working register
00039A 5C4A               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
00039C A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00039E EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003A2 C047 FFE8          M         movff   RED+0, WREG
0003A6 5C49               M         subwf   GREEN+0, 0 
0003A8                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003A8 A0D8           00618         btfss   STATUS, C
0003AA 0012           00619         return                              ; RED > GREEN
                      00620         
                      00621         SUB16   GREEN, BLUE                 ; check against blue
  0000                    M         local   RESULTS
0003AC C04C FFE8          M         movff   BLUE+1, WREG ; move high y into working register
0003B0 5C4A               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
0003B2 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003B4 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003B8 C04B FFE8          M         movff   BLUE+0, WREG
0003BC 5C49               M         subwf   GREEN+0, 0 
0003BE                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003BE A0D8           00622         btfss   STATUS, C
0003C0 0012           00623         return                              ; BLUE > GREEN
                      00624         
0003C2 0E67           00625         movlw   'g'                         ; GREEN > everything else
0003C4 EC?? F???      00626         call    WR_DATA
0003C8 D???           00627         bra     LOOPING
0003CA                00628 CHECK_BLUE
                      00629         SUB16   BLUE, CLEAR                 ; check first against clear
  0000                    M         local   RESULTS
0003CA C046 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
0003CE 5C4C               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
0003D0 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003D2 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003D6 C045 FFE8          M         movff   CLEAR+0, WREG
0003DA 5C4B               M         subwf   BLUE+0, 0 
0003DC                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003DC A0D8           00630         btfss   STATUS, C
0003DE 0012           00631         return                              ; CLEAR > BLUE
                      00632         
                      00633         SUB16   BLUE, RED                   ; check against red
  0000                    M         local   RESULTS
0003E0 C048 FFE8          M         movff   RED+1, WREG ; move high y into working register
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003E4 5C4C               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
0003E6 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003E8 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003EC C047 FFE8          M         movff   RED+0, WREG
0003F0 5C4B               M         subwf   BLUE+0, 0 
0003F2                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003F2 A0D8           00634         btfss   STATUS, C
0003F4 0012           00635         return                              ; RED > BLUE
                      00636 
                      00637         SUB16   BLUE, GREEN                 ; check against green
  0000                    M         local   RESULTS
0003F6 C04A FFE8          M         movff   GREEN+1, WREG ; move high y into working register
0003FA 5C4C               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
0003FC A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003FE EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000402 C049 FFE8          M         movff   GREEN+0, WREG
000406 5C4B               M         subwf   BLUE+0, 0 
000408                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000408 A0D8           00638         btfss   STATUS, C
00040A 0012           00639         return                              ; GREEN > CLEAR
                      00640         
00040C 0E62           00641         movlw   'b'                         ; BLUE > everything else
00040E EC?? F???      00642         call    WR_DATA
000412 0012           00643         return
                      00644         
000414                00645 COLOUR_TEST
                      00646 
000414                00647 LOOPING
                      00648         Delay50N delayR, 0x28
  0000                    M         local   loop
000414 0E28               M         movlw   0x28
000416 6E1B               M         movwf   delayR
                          M 
000418                    M loop
000418 EC?? F???          M         call    Delay50ms
00041C 2E1B               M         decfsz  delayR
00041E EF?? F???          M         goto    loop
000422 EC?? F???      00649         call    ClrLCD
                      00650         ARDUINO_READ    DETECTION_VAL
000426 EC?? F???          M         call    READ_ARDUINO
00042A C??? F040          M         movff   databyte, DETECTION_VAL
                      00651         
00042E 0E01           00652         movlw   d'1'
000430 6240           00653         cpfseq  DETECTION_VAL
000432 0E31           00654         movlw   '1'
000434 EC?? F???      00655         call    WR_DATA
                      00656         
                      00657 ;       COLOUR_GET_DATA CLEAR, RED, GREEN, BLUE
                      00658 ;       Delay50N delayR, 0x02
                      00659         
                      00660 ;       movlw   0x01            ;testing
                      00661 ;       movwf   CLEAR+1
                      00662 ;       movlw   0x06
                      00663 ;       movwf   GREEN+0
                      00664 ;       movlw   0x03
                      00665 ;       movwf   RED+0
                      00666 ;       movlw   0x01
                      00667 ;       movwf   BLUE+0
                      00668         
                      00669 ;       movlw   d'0'
                      00670 ;       cpfseq  RED+0
                      00671 ;       movlw   'w'
                      00672 ;       call    WR_DATA
                      00673 
                      00674         ;call   CHECK_CLEAR
                      00675 ;       call    CHECK_RED
                      00676 ;       call    CHECK_GREEN
                      00677 ;       call    CHECK_BLUE
000438 D???           00678         bra LOOPING
                      00679         
00043A                00680 EXECUTION
00043A EC?? F???      00681         call        ClearEEPROM_21
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00682         ; save the starting time
00043E EC?? F???      00683         call        SAVE_TIME
                      00684                 
                      00685         ; display
000442 681F           00686         setf        inExecution
000444 EC?? F???      00687         call        ClrLCD
                      00688         Display     Exe1
  0000                    M         local   loop
000448 0E??               M         movlw   upper Exe1      ; Move Table<20:16>
00044A 6EF8               M         movwf   TBLPTRU
00044C 0E??               M         movlw   high Exe1       ; Move Table<15:8>
00044E 6EF7               M         movwf   TBLPTRH
000450 0E??               M         movlw   low Exe1        ; Move Table<7:0>
000452 6EF6               M         movwf   TBLPTRL
000454 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000456 50F5               M         movf    TABLAT, W
000458                    M loop
000458 EC?? F???          M         call    WR_DATA         ; write to LCD
00045C 000B               M         tblrd+*                 ; next row in table
00045E 50F5               M         movf    TABLAT, W
000460 E1??               M         bnz     loop
000462 EC?? F???      00689         call        LCD_L2
000466 0EC5           00690         movlw       0xc5                    ; setting up timer
000468 6ED7           00691         movwf       TMR0H
00046A 0E44           00692         movlw       0x44    
00046C 6ED6           00693         movwf       TMR0L
                      00694         
00046E 8ED5           00695         bsf         T0CON, TMR0ON           ; turning on timer
                      00696         ; initialize variables
000470 6A18           00697         clrf        OP_sec
000472 6A19           00698         clrf        OP_INT
                      00699         
000474 6A41           00700         clrf        ESKA
000476 6A42           00701         clrf        ESKA_CAP
000478 6A43           00702         clrf        YOP
00047A 6A44           00703         clrf        YOP_CAP
                      00704         
00047C 6A45           00705         clrf        CLEAR
00047E 6A46           00706         clrf        CLEAR+1     
000480 6A47           00707         clrf        RED
000482 6A48           00708         clrf        RED+1
000484 6A49           00709         clrf        GREEN
000486 6A4A           00710         clrf        GREEN+1
000488 6A4B           00711         clrf        BLUE
00048A 6A4C           00712         clrf        BLUE+1
                      00713         
                      00714 ;COLLECTIONS_STEP
                      00715 ;       
                      00716 ;TERM_CHECK
                      00717 ;       
                      00718 ;BOTTLE_CHECK
                      00719 ;
                      00720 ;COLOUR_ONE
                      00721 ;
                      00722 ;COLOUR_TWO
                      00723 ;       
                      00724 ;BRAINS
                      00725 ;       
                      00726 ;TRAY_STEP
                      00727 ;       
                      00728 
00048C                00729 HOLD_EXE
00048C EC?? F???      00730         call        READ_KEY
                      00731         ChangeMode  keyS, EXIT_EXE
  0000                    M         local Next, Exit
                          M 
000490 0E0C               M         movlw   keyS                ; poll for mode
000492 6210               M         cpfseq  KEY                 ; check this against key press
000494 EF?? F???          M         goto    Exit
                          M 
000498                    M Next
000498 6A89               M         clrf    LATA                ; clear pins before proceeding
00049A 6A8A               M         clrf    LATB
00049C 6A8B               M         clrf    LATC
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00049E 6A8C               M         clrf    LATD
0004A0 EF?? F???          M         goto    EXIT_EXE
                          M 
0004A4                    M Exit
0004A4 0000               M         nop
0004A6 D???           00732         bra         HOLD_EXE
                      00733         
0004A8                00734 EXIT_EXE
                      00735         ; stop timer and save the execution time to eeprom
0004A8 9ED5           00736         bcf         T0CON, TMR0ON
0004AA EC?? F???      00737         call        SAVE_EXE_TIME
                      00738                 
                      00739         ; Clear inExecution flag to stop '*' interrupts
0004AE 6A1F           00740         clrf        inExecution
                      00741         
0004B0 C041 FFE8      00742         movff       ESKA, WREG
0004B4 0F30           00743         addlw       0x30
                      00744         WriteEE     WREG, H_EE, L_EE
0004B6 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
0004BA C022 FFA9          M         movff   L_EE, EEADR         ; Low address
0004BE CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
0004C2 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
0004C4 D???               M         bra     $-2
                          M 
0004C6 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
0004C8 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
0004CA 84A6               M         bsf     EECON1, WREN        ; enable write
0004CC 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
0004CE 98A1               M         bcf     PIR2, EEIF
                          M 
0004D0 0E55               M         movlw   0x55
0004D2 6EA7               M         movwf   EECON2              ; write 55h
0004D4 0EAA               M         movlw   0xaa
0004D6 6EA7               M         movwf   EECON2              ; write 0xaa
0004D8 82A6               M         bsf     EECON1, WR          ; begin write
0004DA B2A6               M         btfsc   EECON1, WR
0004DC D???               M         bra     $-2
                          M 
0004DE 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
0004E0 94A6               M         bcf     EECON1, WREN        ; disable writes
0004E2 2A22           00745         incf        L_EE
                      00746         
0004E4 C042 FFE8      00747         movff       ESKA_CAP, WREG
0004E8 0F30           00748         addlw       0x30
                      00749         WriteEE     WREG, H_EE, L_EE
0004EA C021 FFAA          M         movff   H_EE, EEADRH        ; High address
0004EE C022 FFA9          M         movff   L_EE, EEADR         ; Low address
0004F2 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
0004F6 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
0004F8 D???               M         bra     $-2
                          M 
0004FA 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
0004FC 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
0004FE 84A6               M         bsf     EECON1, WREN        ; enable write
000500 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000502 98A1               M         bcf     PIR2, EEIF
                          M 
000504 0E55               M         movlw   0x55
000506 6EA7               M         movwf   EECON2              ; write 55h
000508 0EAA               M         movlw   0xaa
00050A 6EA7               M         movwf   EECON2              ; write 0xaa
00050C 82A6               M         bsf     EECON1, WR          ; begin write
00050E B2A6               M         btfsc   EECON1, WR
000510 D???               M         bra     $-2
                          M 
000512 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000514 94A6               M         bcf     EECON1, WREN        ; disable writes
000516 2A22           00750         incf        L_EE
                      00751         
000518 C043 FFE8      00752         movff       YOP, WREG
00051C 0F30           00753         addlw       0x30
                      00754         WriteEE     WREG, H_EE, L_EE
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00051E C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000522 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000526 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
00052A B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
00052C D???               M         bra     $-2
                          M 
00052E 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000530 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000532 84A6               M         bsf     EECON1, WREN        ; enable write
000534 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000536 98A1               M         bcf     PIR2, EEIF
                          M 
000538 0E55               M         movlw   0x55
00053A 6EA7               M         movwf   EECON2              ; write 55h
00053C 0EAA               M         movlw   0xaa
00053E 6EA7               M         movwf   EECON2              ; write 0xaa
000540 82A6               M         bsf     EECON1, WR          ; begin write
000542 B2A6               M         btfsc   EECON1, WR
000544 D???               M         bra     $-2
                          M 
000546 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000548 94A6               M         bcf     EECON1, WREN        ; disable writes
00054A 2A22           00755         incf        L_EE
                      00756         
00054C C044 FFE8      00757         movff       YOP_CAP, WREG
000550 0F30           00758         addlw       0x30
                      00759         WriteEE     WREG, H_EE, L_EE
000552 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000556 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
00055A CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
00055E B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000560 D???               M         bra     $-2
                          M 
000562 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000564 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000566 84A6               M         bsf     EECON1, WREN        ; enable write
000568 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
00056A 98A1               M         bcf     PIR2, EEIF
                          M 
00056C 0E55               M         movlw   0x55
00056E 6EA7               M         movwf   EECON2              ; write 55h
000570 0EAA               M         movlw   0xaa
000572 6EA7               M         movwf   EECON2              ; write 0xaa
000574 82A6               M         bsf     EECON1, WR          ; begin write
000576 B2A6               M         btfsc   EECON1, WR
000578 D???               M         bra     $-2
                          M 
00057A 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
00057C 94A6               M         bcf     EECON1, WREN        ; disable writes
00057E 2A22           00760         incf        L_EE
                      00761         
000580 EF?? F???      00762         goto        SaveData
                      00763 
000584                00764 SaveData
000584 EC?? F???      00765         call        ClrLCD
                      00766         Display     SAVE
  0000                    M         local   loop
000588 0E??               M         movlw   upper SAVE      ; Move Table<20:16>
00058A 6EF8               M         movwf   TBLPTRU
00058C 0E??               M         movlw   high SAVE       ; Move Table<15:8>
00058E 6EF7               M         movwf   TBLPTRH
000590 0E??               M         movlw   low SAVE        ; Move Table<7:0>
000592 6EF6               M         movwf   TBLPTRL
000594 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000596 50F5               M         movf    TABLAT, W
000598                    M loop
000598 EC?? F???          M         call    WR_DATA         ; write to LCD
00059C 000B               M         tblrd+*                 ; next row in table
00059E 50F5               M         movf    TABLAT, W
0005A0 E1??               M         bnz     loop
                      00767 
0005A2 0E00           00768         movlw       d'0'
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0005A4 6E21           00769         movwf       H_EE
0005A6 0EA8           00770         movlw       d'168'              ; take d'168' as last
0005A8 6E22           00771         movwf       L_EE
0005AA 0E00           00772         movlw       d'0'
0005AC 6E24           00773         movwf       tempH_EE
0005AE 0EDC           00774         movlw       d'220'              ; temp for low constant
0005B0 6E25           00775         movwf       tempL_EE
                      00776         
0005B2 6A16           00777         clrf        counter2
0005B4 6A15           00778         clrf        counter
                      00779         
0005B6                00780 ShiftLoop
0005B6 2A15           00781         incf            counter
                      00782         READEE          REG_EE, H_EE, L_EE
0005B8 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
0005BC C022 FFA9          M         movff   L_EE, EEADR         ; read to low
0005C0 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
0005C2 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
0005C4 80A6               M         bsf     EECON1, RD          ; read EEPROM
0005C6 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
0005CA 0E15           00783         movlw           d'21'
0005CC 2622           00784         addwf           L_EE
                      00785         WriteEE         REG_EE, H_EE, L_EE
0005CE C021 FFAA          M         movff   H_EE, EEADRH        ; High address
0005D2 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
0005D6 C023 FFA8          M         movff   REG_EE, EEDATA      ; set word
                          M 
0005DA B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
0005DC D???               M         bra     $-2
                          M 
0005DE 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
0005E0 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
0005E2 84A6               M         bsf     EECON1, WREN        ; enable write
0005E4 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
0005E6 98A1               M         bcf     PIR2, EEIF
                          M 
0005E8 0E55               M         movlw   0x55
0005EA 6EA7               M         movwf   EECON2              ; write 55h
0005EC 0EAA               M         movlw   0xaa
0005EE 6EA7               M         movwf   EECON2              ; write 0xaa
0005F0 82A6               M         bsf     EECON1, WR          ; begin write
0005F2 B2A6               M         btfsc   EECON1, WR
0005F4 D???               M         bra     $-2
                          M 
0005F6 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
0005F8 94A6               M         bcf     EECON1, WREN        ; disable writes
0005FA 0E14           00786         movlw           d'20'
0005FC 5E22           00787         subwf           L_EE
0005FE 0E15           00788         movlw           d'21'
000600 6215           00789         cpfseq          counter
000602 EF?? F???      00790         goto            ShiftLoop
                      00791         
                      00792         ; Set EEPROM address to the previous 21 byte block, and reset temp address
000606 0E2A           00793         movlw           d'42'
000608 5E22           00794         subwf           L_EE
00060A 0EDC           00795         movlw           d'220'
00060C 6E25           00796         movwf           tempL_EE
00060E 6A15           00797         clrf            counter
000610 2A16           00798         incf            counter2
000612 0E09           00799         movlw           d'9'
000614 6216           00800         cpfseq          counter2        ; Skip if 9 shifts were made
000616 EF?? F???      00801         goto            ShiftLoop
                      00802 
00061A EF?? F???      00803         goto            LOG
                      00804 
                      00805 ;*******************************************************************************
                      00806 ; sorting statistics log mode
                      00807 ;*******************************************************************************
                      00808         
00061E                00809 LOG
00061E EC?? F???      00810         call    ClrLCD
                      00811         Display Log1
  0000                    M         local   loop
000622 0E??               M         movlw   upper Log1      ; Move Table<20:16>
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000624 6EF8               M         movwf   TBLPTRU
000626 0E??               M         movlw   high Log1       ; Move Table<15:8>
000628 6EF7               M         movwf   TBLPTRH
00062A 0E??               M         movlw   low Log1        ; Move Table<7:0>
00062C 6EF6               M         movwf   TBLPTRL
00062E 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000630 50F5               M         movf    TABLAT, W
000632                    M loop
000632 EC?? F???          M         call    WR_DATA         ; write to LCD
000636 000B               M         tblrd+*                 ; next row in table
000638 50F5               M         movf    TABLAT, W
00063A E1??               M         bnz     loop
                      00812 
                      00813         ; display most recent run data
00063C 0E0A           00814         movlw   d'10'
00063E 6E22           00815         movwf   L_EE
                      00816 ;       READEE  OP_sec, H_EE, L_EE
                      00817 ;       incf    L_EE
                      00818 ;       READEE  OP_INT, H_EE, L_EE
                      00819 ;       incf    L_EE
000640 EC?? F???      00820         call    DisplayExeTime
                      00821 
000644 EC?? F???      00822         call    LCD_L2
000648 6A22           00823         clrf    L_EE
00064A EC?? F???      00824         call    DispOpRTC
                      00825 
00064E                00826 HOLD_LOG
00064E EC?? F???      00827         call    READ_KEY
                      00828         ChangeMode  keyB, LOG_INFO
  0000                    M         local Next, Exit
                          M 
000652 0E07               M         movlw   keyB                ; poll for mode
000654 6210               M         cpfseq  KEY                 ; check this against key press
000656 EF?? F???          M         goto    Exit
                          M 
00065A                    M Next
00065A 6A89               M         clrf    LATA                ; clear pins before proceeding
00065C 6A8A               M         clrf    LATB
00065E 6A8B               M         clrf    LATC
000660 6A8C               M         clrf    LATD
000662 EF?? F???          M         goto    LOG_INFO
                          M 
000666                    M Exit
000666 0000               M         nop
                      00829         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
000668 0E0D               M         movlw   key0                ; poll for mode
00066A 6210               M         cpfseq  KEY                 ; check this against key press
00066C EF?? F???          M         goto    Exit
                          M 
000670                    M Next
000670 6A89               M         clrf    LATA                ; clear pins before proceeding
000672 6A8A               M         clrf    LATB
000674 6A8B               M         clrf    LATC
000676 6A8C               M         clrf    LATD
000678 EF?? F???          M         goto    STANDBY
                          M 
00067C                    M Exit
00067C 0000               M         nop
00067E D???           00830         bra     HOLD_LOG
                      00831 
000680                00832 LOG_INFO
000680 EC?? F???      00833         call    ClrLCD
                      00834         Display LogInfo1
  0000                    M         local   loop
000684 0E??               M         movlw   upper LogInfo1  ; Move Table<20:16>
000686 6EF8               M         movwf   TBLPTRU
000688 0E??               M         movlw   high LogInfo1   ; Move Table<15:8>
00068A 6EF7               M         movwf   TBLPTRH
00068C 0E??               M         movlw   low LogInfo1    ; Move Table<7:0>
00068E 6EF6               M         movwf   TBLPTRL
000690 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000692 50F5               M         movf    TABLAT, W
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000694                    M loop
000694 EC?? F???          M         call    WR_DATA         ; write to LCD
000698 000B               M         tblrd+*                 ; next row in table
00069A 50F5               M         movf    TABLAT, W
00069C E1??               M         bnz     loop
00069E EC?? F???      00835         call    LCD_L2
                      00836         Display LogInfo2
  0000                    M         local   loop
0006A2 0E??               M         movlw   upper LogInfo2  ; Move Table<20:16>
0006A4 6EF8               M         movwf   TBLPTRU
0006A6 0E??               M         movlw   high LogInfo2   ; Move Table<15:8>
0006A8 6EF7               M         movwf   TBLPTRH
0006AA 0E??               M         movlw   low LogInfo2    ; Move Table<7:0>
0006AC 6EF6               M         movwf   TBLPTRL
0006AE 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0006B0 50F5               M         movf    TABLAT, W
0006B2                    M loop
0006B2 EC?? F???          M         call    WR_DATA         ; write to LCD
0006B6 000B               M         tblrd+*                 ; next row in table
0006B8 50F5               M         movf    TABLAT, W
0006BA E1??               M         bnz     loop
0006BC 6A21           00837         clrf    H_EE
0006BE 6A22           00838         clrf    L_EE
                      00839         ;DisplayLog  H_EE, L_EE
0006C0                00840 HOLD_LOG_INFO
0006C0 EC?? F???      00841         call    READ_KEY
                      00842         ChangeMode key0, LOG
  0000                    M         local Next, Exit
                          M 
0006C4 0E0D               M         movlw   key0                ; poll for mode
0006C6 6210               M         cpfseq  KEY                 ; check this against key press
0006C8 EF?? F???          M         goto    Exit
                          M 
0006CC                    M Next
0006CC 6A89               M         clrf    LATA                ; clear pins before proceeding
0006CE 6A8A               M         clrf    LATB
0006D0 6A8B               M         clrf    LATC
0006D2 6A8C               M         clrf    LATD
0006D4 EF?? F???          M         goto    LOG
                          M 
0006D8                    M Exit
0006D8 0000               M         nop
0006DA D???           00843         bra     HOLD_LOG
                      00844         
                      00845 ;*******************************************************************************
                      00846 ; permanent logs
                      00847 ;*******************************************************************************
                      00848 
0006DC                00849 PERM_LOG
0006DC EC?? F???      00850         call    ClrLCD
                      00851         Display PermLog1
  0000                    M         local   loop
0006E0 0E??               M         movlw   upper PermLog1  ; Move Table<20:16>
0006E2 6EF8               M         movwf   TBLPTRU
0006E4 0E??               M         movlw   high PermLog1   ; Move Table<15:8>
0006E6 6EF7               M         movwf   TBLPTRH
0006E8 0E??               M         movlw   low PermLog1    ; Move Table<7:0>
0006EA 6EF6               M         movwf   TBLPTRL
0006EC 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0006EE 50F5               M         movf    TABLAT, W
0006F0                    M loop
0006F0 EC?? F???          M         call    WR_DATA         ; write to LCD
0006F4 000B               M         tblrd+*                 ; next row in table
0006F6 50F5               M         movf    TABLAT, W
0006F8 E1??               M         bnz     loop
0006FA EC?? F???      00852         call    LCD_L2
                      00853         Display PermLog2
  0000                    M         local   loop
0006FE 0E??               M         movlw   upper PermLog2  ; Move Table<20:16>
000700 6EF8               M         movwf   TBLPTRU
000702 0E??               M         movlw   high PermLog2   ; Move Table<15:8>
000704 6EF7               M         movwf   TBLPTRH
000706 0E??               M         movlw   low PermLog2    ; Move Table<7:0>
000708 6EF6               M         movwf   TBLPTRL
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00070A 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
00070C 50F5               M         movf    TABLAT, W
00070E                    M loop
00070E EC?? F???          M         call    WR_DATA         ; write to LCD
000712 000B               M         tblrd+*                 ; next row in table
000714 50F5               M         movf    TABLAT, W
000716 E1??               M         bnz     loop
                      00854         
000718                00855 HOLD_PERM_LOG
000718 EC?? F???      00856         call    READ_KEY
                      00857         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
00071C 0E0D               M         movlw   key0                ; poll for mode
00071E 6210               M         cpfseq  KEY                 ; check this against key press
000720 EF?? F???          M         goto    Exit
                          M 
000724                    M Next
000724 6A89               M         clrf    LATA                ; clear pins before proceeding
000726 6A8A               M         clrf    LATB
000728 6A8B               M         clrf    LATC
00072A 6A8C               M         clrf    LATD
00072C EF?? F???          M         goto    STANDBY
                          M 
000730                    M Exit
000730 0000               M         nop
                      00858         ChangeMode  key1, PLOG
  0000                    M         local Next, Exit
                          M 
000732 0E00               M         movlw   key1                ; poll for mode
000734 6210               M         cpfseq  KEY                 ; check this against key press
000736 EF?? F???          M         goto    Exit
                          M 
00073A                    M Next
00073A 6A89               M         clrf    LATA                ; clear pins before proceeding
00073C 6A8A               M         clrf    LATB
00073E 6A8B               M         clrf    LATC
000740 6A8C               M         clrf    LATD
000742 EF?? F???          M         goto    PLOG
                          M 
000746                    M Exit
000746 0000               M         nop
                      00859         ChangeMode  key2, PLOG
  0000                    M         local Next, Exit
                          M 
000748 0E01               M         movlw   key2                ; poll for mode
00074A 6210               M         cpfseq  KEY                 ; check this against key press
00074C EF?? F???          M         goto    Exit
                          M 
000750                    M Next
000750 6A89               M         clrf    LATA                ; clear pins before proceeding
000752 6A8A               M         clrf    LATB
000754 6A8B               M         clrf    LATC
000756 6A8C               M         clrf    LATD
000758 EF?? F???          M         goto    PLOG
                          M 
00075C                    M Exit
00075C 0000               M         nop
                      00860         ChangeMode  key3, PLOG
  0000                    M         local Next, Exit
                          M 
00075E 0E02               M         movlw   key3                ; poll for mode
000760 6210               M         cpfseq  KEY                 ; check this against key press
000762 EF?? F???          M         goto    Exit
                          M 
000766                    M Next
000766 6A89               M         clrf    LATA                ; clear pins before proceeding
000768 6A8A               M         clrf    LATB
00076A 6A8B               M         clrf    LATC
00076C 6A8C               M         clrf    LATD
00076E EF?? F???          M         goto    PLOG
                          M 
000772                    M Exit
000772 0000               M         nop
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00861         ChangeMode  key4, PLOG
  0000                    M         local Next, Exit
                          M 
000774 0E04               M         movlw   key4                ; poll for mode
000776 6210               M         cpfseq  KEY                 ; check this against key press
000778 EF?? F???          M         goto    Exit
                          M 
00077C                    M Next
00077C 6A89               M         clrf    LATA                ; clear pins before proceeding
00077E 6A8A               M         clrf    LATB
000780 6A8B               M         clrf    LATC
000782 6A8C               M         clrf    LATD
000784 EF?? F???          M         goto    PLOG
                          M 
000788                    M Exit
000788 0000               M         nop
                      00862         ChangeMode  key5, PLOG
  0000                    M         local Next, Exit
                          M 
00078A 0E05               M         movlw   key5                ; poll for mode
00078C 6210               M         cpfseq  KEY                 ; check this against key press
00078E EF?? F???          M         goto    Exit
                          M 
000792                    M Next
000792 6A89               M         clrf    LATA                ; clear pins before proceeding
000794 6A8A               M         clrf    LATB
000796 6A8B               M         clrf    LATC
000798 6A8C               M         clrf    LATD
00079A EF?? F???          M         goto    PLOG
                          M 
00079E                    M Exit
00079E 0000               M         nop
                      00863         ChangeMode  key6, PLOG
  0000                    M         local Next, Exit
                          M 
0007A0 0E06               M         movlw   key6                ; poll for mode
0007A2 6210               M         cpfseq  KEY                 ; check this against key press
0007A4 EF?? F???          M         goto    Exit
                          M 
0007A8                    M Next
0007A8 6A89               M         clrf    LATA                ; clear pins before proceeding
0007AA 6A8A               M         clrf    LATB
0007AC 6A8B               M         clrf    LATC
0007AE 6A8C               M         clrf    LATD
0007B0 EF?? F???          M         goto    PLOG
                          M 
0007B4                    M Exit
0007B4 0000               M         nop
                      00864         ChangeMode  key7, PLOG
  0000                    M         local Next, Exit
                          M 
0007B6 0E08               M         movlw   key7                ; poll for mode
0007B8 6210               M         cpfseq  KEY                 ; check this against key press
0007BA EF?? F???          M         goto    Exit
                          M 
0007BE                    M Next
0007BE 6A89               M         clrf    LATA                ; clear pins before proceeding
0007C0 6A8A               M         clrf    LATB
0007C2 6A8B               M         clrf    LATC
0007C4 6A8C               M         clrf    LATD
0007C6 EF?? F???          M         goto    PLOG
                          M 
0007CA                    M Exit
0007CA 0000               M         nop
                      00865         ChangeMode  key8, PLOG
  0000                    M         local Next, Exit
                          M 
0007CC 0E09               M         movlw   key8                ; poll for mode
0007CE 6210               M         cpfseq  KEY                 ; check this against key press
0007D0 EF?? F???          M         goto    Exit
                          M 
0007D4                    M Next
0007D4 6A89               M         clrf    LATA                ; clear pins before proceeding
0007D6 6A8A               M         clrf    LATB
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0007D8 6A8B               M         clrf    LATC
0007DA 6A8C               M         clrf    LATD
0007DC EF?? F???          M         goto    PLOG
                          M 
0007E0                    M Exit
0007E0 0000               M         nop
                      00866         ChangeMode  key9, PLOG
  0000                    M         local Next, Exit
                          M 
0007E2 0E0A               M         movlw   key9                ; poll for mode
0007E4 6210               M         cpfseq  KEY                 ; check this against key press
0007E6 EF?? F???          M         goto    Exit
                          M 
0007EA                    M Next
0007EA 6A89               M         clrf    LATA                ; clear pins before proceeding
0007EC 6A8A               M         clrf    LATB
0007EE 6A8B               M         clrf    LATC
0007F0 6A8C               M         clrf    LATD
0007F2 EF?? F???          M         goto    PLOG
                          M 
0007F6                    M Exit
0007F6 0000               M         nop
0007F8 D???           00867         bra HOLD_PERM_LOG
                      00868         
0007FA                00869 PLOG
0007FA EC?? F???      00870         call    ClrLCD
                      00871         Display PermLog1
  0000                    M         local   loop
0007FE 0E??               M         movlw   upper PermLog1  ; Move Table<20:16>
000800 6EF8               M         movwf   TBLPTRU
000802 0E??               M         movlw   high PermLog1   ; Move Table<15:8>
000804 6EF7               M         movwf   TBLPTRH
000806 0E??               M         movlw   low PermLog1    ; Move Table<7:0>
000808 6EF6               M         movwf   TBLPTRL
00080A 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
00080C 50F5               M         movf    TABLAT, W
00080E                    M loop
00080E EC?? F???          M         call    WR_DATA         ; write to LCD
000812 000B               M         tblrd+*                 ; next row in table
000814 50F5               M         movf    TABLAT, W
000816 E1??               M         bnz     loop
                      00872         
                      00873         ; find the key press value
000818 C010 FFE8      00874         movff   KEY, WREG
00081C 2AE8           00875         incf    WREG        ; W = KEY+1
00081E 6E17           00876         movwf   temp
                      00877         
000820 42E8           00878         rrncf   WREG        ; division by 4
000822 9EE8           00879         bcf     WREG, 7     ; clear last bit, overflow from rotate
000824 42E8           00880         rrncf   WREG        
000826 9EE8           00881         bcf     WREG, 7
000828 5E17           00882         subwf   temp        ; temp = (KEY+1) - (KEY+1)/4
00082A C017 FFE8      00883         movff   temp, WREG
00082E C017 F011      00884         movff   temp, temp_KEY
000832 0D15           00885         mullw   d'21'       ; indexed as mutliples of 21
                      00886 
000834                00887 displayNum
000834 C011 FFE8      00888         movff   temp_KEY, WREG
000838 0F30           00889         addlw   0x30
00083A EC?? F???      00890         call    WR_DATA
00083E 0E3A           00891         movlw   ":"
000840 EC?? F???      00892         call    WR_DATA
000844 0E20           00893         movlw   " "
000846 EC?? F???      00894         call    WR_DATA
                      00895         
00084A CFF3 F022      00896         movff   PRODL, L_EE
00084E 0E00           00897         movlw   d'0'
000850 2622           00898         addwf   L_EE
                      00899         READEE  OP_sec, H_EE, L_EE
000852 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000856 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
00085A 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
00085C 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
00085E 80A6               M         bsf     EECON1, RD          ; read EEPROM
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000860 CFA8 F018          M         movff   EEDATA, OP_sec      ; put data into file
000864 2A22           00900         incf    L_EE
                      00901         READEE  OP_INT, H_EE, L_EE
000866 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
00086A C022 FFA9          M         movff   L_EE, EEADR         ; read to low
00086E 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000870 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000872 80A6               M         bsf     EECON1, RD          ; read EEPROM
000874 CFA8 F019          M         movff   EEDATA, OP_INT      ; put data into file
000878 2A22           00902         incf    L_EE
00087A EC?? F???      00903         call    DisplayExeTime
00087E CFF3 F022      00904         movff   PRODL, L_EE
                      00905         
                      00906         ; reset eeprom to beginning
000882 EC?? F???      00907         call    LCD_L2
000886 CFF3 F022      00908         movff   PRODL, L_EE
00088A EC?? F???      00909         call    DispOpRTC
                      00910         
00088E                00911 HOLD_PLOG
00088E EC?? F???      00912         call    READ_KEY
                      00913         ChangeMode  key0, PERM_LOG      ; back to perm log menu
  0000                    M         local Next, Exit
                          M 
000892 0E0D               M         movlw   key0                ; poll for mode
000894 6210               M         cpfseq  KEY                 ; check this against key press
000896 EF?? F???          M         goto    Exit
                          M 
00089A                    M Next
00089A 6A89               M         clrf    LATA                ; clear pins before proceeding
00089C 6A8A               M         clrf    LATB
00089E 6A8B               M         clrf    LATC
0008A0 6A8C               M         clrf    LATD
0008A2 EF?? F???          M         goto    PERM_LOG
                          M 
0008A6                    M Exit
0008A6 0000               M         nop
0008A8 D???           00914         bra HOLD_PLOG
                      00915         
                      00916 ;*******************************************************************************
                      00917 ; pc interface
                      00918 ;*******************************************************************************
                      00919 
0008AA                00920 PC_MODE
0008AA EC?? F???      00921         call    ClrLCD
                      00922         Display PC1
  0000                    M         local   loop
0008AE 0E??               M         movlw   upper PC1       ; Move Table<20:16>
0008B0 6EF8               M         movwf   TBLPTRU
0008B2 0E??               M         movlw   high PC1        ; Move Table<15:8>
0008B4 6EF7               M         movwf   TBLPTRH
0008B6 0E??               M         movlw   low PC1         ; Move Table<7:0>
0008B8 6EF6               M         movwf   TBLPTRL
0008BA 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0008BC 50F5               M         movf    TABLAT, W
0008BE                    M loop
0008BE EC?? F???          M         call    WR_DATA         ; write to LCD
0008C2 000B               M         tblrd+*                 ; next row in table
0008C4 50F5               M         movf    TABLAT, W
0008C6 E1??               M         bnz     loop
0008C8 EC?? F???      00923         call    LCD_L2
                      00924         Display PC2
  0000                    M         local   loop
0008CC 0E??               M         movlw   upper PC2       ; Move Table<20:16>
0008CE 6EF8               M         movwf   TBLPTRU
0008D0 0E??               M         movlw   high PC2        ; Move Table<15:8>
0008D2 6EF7               M         movwf   TBLPTRH
0008D4 0E??               M         movlw   low PC2         ; Move Table<7:0>
0008D6 6EF6               M         movwf   TBLPTRL
0008D8 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0008DA 50F5               M         movf    TABLAT, W
0008DC                    M loop
0008DC EC?? F???          M         call    WR_DATA         ; write to LCD
0008E0 000B               M         tblrd+*                 ; next row in table
0008E2 50F5               M         movf    TABLAT, W
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0008E4 E1??               M         bnz     loop
0008E6 CFF9 F03A      00925         movff   PCL, PC_PCL
0008EA CFFA F03B      00926         movff   PCLATH, PC_PCLATH
0008EE CFFB F03C      00927         movff   PCLATU, PC_PCLATU
                      00928         
0008F2                00929 HOLD_PC
0008F2 EC?? F???      00930         call    READ_KEY
                      00931         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
0008F6 0E0D               M         movlw   key0                ; poll for mode
0008F8 6210               M         cpfseq  KEY                 ; check this against key press
0008FA EF?? F???          M         goto    Exit
                          M 
0008FE                    M Next
0008FE 6A89               M         clrf    LATA                ; clear pins before proceeding
000900 6A8A               M         clrf    LATB
000902 6A8B               M         clrf    LATC
000904 6A8C               M         clrf    LATD
000906 EF?? F???          M         goto    STANDBY
                          M 
00090A                    M Exit
00090A 0000               M         nop
                      00932         ChangeMode  keyH, PC_TRANSFER
  0000                    M         local Next, Exit
                          M 
00090C 0E0E               M         movlw   keyH                ; poll for mode
00090E 6210               M         cpfseq  KEY                 ; check this against key press
000910 EF?? F???          M         goto    Exit
                          M 
000914                    M Next
000914 6A89               M         clrf    LATA                ; clear pins before proceeding
000916 6A8A               M         clrf    LATB
000918 6A8B               M         clrf    LATC
00091A 6A8C               M         clrf    LATD
00091C EF?? F???          M         goto    PC_TRANSFER
                          M 
000920                    M Exit
000920 0000               M         nop
000922 D???           00933         bra     HOLD_PC
                      00934 
000924                00935 PC_TRANSFER
000924 6839           00936         setf    transferring
000926 EC?? F???      00937         call    ClrLCD
                      00938         Display PCTransfer
  0000                    M         local   loop
00092A 0E??               M         movlw   upper PCTransfer ; Move Table<20:16>
00092C 6EF8               M         movwf   TBLPTRU
00092E 0E??               M         movlw   high PCTransfer ; Move Table<15:8>
000930 6EF7               M         movwf   TBLPTRH
000932 0E??               M         movlw   low PCTransfer  ; Move Table<7:0>
000934 6EF6               M         movwf   TBLPTRL
000936 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000938 50F5               M         movf    TABLAT, W
00093A                    M loop
00093A EC?? F???          M         call    WR_DATA         ; write to LCD
00093E 000B               M         tblrd+*                 ; next row in table
000940 50F5               M         movf    TABLAT, W
000942 E1??               M         bnz     loop
                      00939         ;call   DataUSART
000944 6A39           00940         clrf    transferring
000946 D???           00941         bra     HOLD_PC
                      00942         
                      00943 ;*******************************************************************************
                      00944 ; subroutines
                      00945 ;*******************************************************************************
                      00946 
000948                00947 RTC_INIT
                      00948         ; set sda and scl to high
000948 9882           00949         bcf     PORTC, 4
00094A 9682           00950         bcf     PORTC, 3
00094C 8894           00951         bsf     TRISC, 4
00094E 8694           00952         bsf     TRISC, 3
                      00953         
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000950 EC?? F???      00954         call    i2c_common_setup
                      00955         ;call   SET_TIME
Warning[203]: Found opcode in column 1. (return)
000954 0012           00956 return
                      00957         
000956                00958 SAVE_TIME   
                      00959         rtc_read    0x02        ; hours
000956 0E02               M     movlw   0x02
000958 6E??               M     movwf   regaddress
00095A EC?? F???          M     call    read_rtc
00095E C??? FFE8          M     movff   datachar, WREG
000962 EC?? F???          M     call    rtc_convert
000966 EC?? F???      00960         call    WriteEE_RTC
                      00961         rtc_read    0x01        ; minutes
00096A 0E01               M     movlw   0x01
00096C 6E??               M     movwf   regaddress
00096E EC?? F???          M     call    read_rtc
000972 C??? FFE8          M     movff   datachar, WREG
000976 EC?? F???          M     call    rtc_convert
00097A EC?? F???      00962         call    WriteEE_RTC
                      00963         rtc_read    0x06        ; years
00097E 0E06               M     movlw   0x06
000980 6E??               M     movwf   regaddress
000982 EC?? F???          M     call    read_rtc
000986 C??? FFE8          M     movff   datachar, WREG
00098A EC?? F???          M     call    rtc_convert
00098E EC?? F???      00964         call    WriteEE_RTC
                      00965         rtc_read    0x05        ; months
000992 0E05               M     movlw   0x05
000994 6E??               M     movwf   regaddress
000996 EC?? F???          M     call    read_rtc
00099A C??? FFE8          M     movff   datachar, WREG
00099E EC?? F???          M     call    rtc_convert
0009A2 EC?? F???      00966         call    WriteEE_RTC
                      00967         rtc_read    0x04        ; days
0009A6 0E04               M     movlw   0x04
0009A8 6E??               M     movwf   regaddress
0009AA EC?? F???          M     call    read_rtc
0009AE C??? FFE8          M     movff   datachar, WREG
0009B2 EC?? F???          M     call    rtc_convert
0009B6 EC?? F???      00968         call    WriteEE_RTC
Warning[203]: Found opcode in column 1. (return)
0009BA 0012           00969 return
                      00970         
0009BC                00971 SAVE_EXE_TIME
                      00972         
Warning[202]: Argument out of range.  Least significant bits used.
0009BC 3818           00973         swapf   OP_sec, WREG    ; 100's seconds
0009BE 6E17           00974         movwf   temp
0009C0 0E0F           00975         movlw   0x0F
0009C2 1617           00976         andwf   temp
0009C4 C017 FFE8      00977         movff   temp, WREG
0009C8 0F30           00978         addlw   0x30    
                      00979         WriteEE WREG, H_EE, L_EE
0009CA C021 FFAA          M         movff   H_EE, EEADRH        ; High address
0009CE C022 FFA9          M         movff   L_EE, EEADR         ; Low address
0009D2 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
0009D6 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
0009D8 D???               M         bra     $-2
                          M 
0009DA 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
0009DC 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
0009DE 84A6               M         bsf     EECON1, WREN        ; enable write
0009E0 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
0009E2 98A1               M         bcf     PIR2, EEIF
                          M 
0009E4 0E55               M         movlw   0x55
0009E6 6EA7               M         movwf   EECON2              ; write 55h
0009E8 0EAA               M         movlw   0xaa
0009EA 6EA7               M         movwf   EECON2              ; write 0xaa
0009EC 82A6               M         bsf     EECON1, WR          ; begin write
0009EE B2A6               M         btfsc   EECON1, WR
0009F0 D???               M         bra     $-2
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
0009F2 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
0009F4 94A6               M         bcf     EECON1, WREN        ; disable writes
0009F6 2A22           00980         incf    L_EE
                      00981         
0009F8 C018 F017      00982         movff   OP_sec, temp    ; 10's seconds
0009FC 0E0F           00983         movlw   0x0F
0009FE 1617           00984         andwf   temp            ; Temp = lower nibble of Op_sec
000A00 C017 FFE8      00985         movff   temp, WREG      ; W = Temp
000A04 0F30           00986         addlw   0x30            ; Convert to ASCII
                      00987         WriteEE WREG, H_EE, L_EE
000A06 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000A0A C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000A0E CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000A12 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000A14 D???               M         bra     $-2
                          M 
000A16 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000A18 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000A1A 84A6               M         bsf     EECON1, WREN        ; enable write
000A1C 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000A1E 98A1               M         bcf     PIR2, EEIF
                          M 
000A20 0E55               M         movlw   0x55
000A22 6EA7               M         movwf   EECON2              ; write 55h
000A24 0EAA               M         movlw   0xaa
000A26 6EA7               M         movwf   EECON2              ; write 0xaa
000A28 82A6               M         bsf     EECON1, WR          ; begin write
000A2A B2A6               M         btfsc   EECON1, WR
000A2C D???               M         bra     $-2
                          M 
000A2E 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000A30 94A6               M         bcf     EECON1, WREN        ; disable writes
000A32 2A22           00988         incf    L_EE
                      00989         
Warning[202]: Argument out of range.  Least significant bits used.
000A34 3819           00990         swapf   OP_INT, WREG    ;1's seconds
000A36 6E17           00991         movwf   temp
000A38 0E0F           00992         movlw   0x0f
000A3A 1617           00993         andwf   temp
000A3C C017 FFE8      00994         movff   temp, WREG
000A40 0F30           00995         addlw   0x30
                      00996         WriteEE WREG, H_EE, L_EE
000A42 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000A46 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000A4A CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000A4E B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000A50 D???               M         bra     $-2
                          M 
000A52 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000A54 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000A56 84A6               M         bsf     EECON1, WREN        ; enable write
000A58 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000A5A 98A1               M         bcf     PIR2, EEIF
                          M 
000A5C 0E55               M         movlw   0x55
000A5E 6EA7               M         movwf   EECON2              ; write 55h
000A60 0EAA               M         movlw   0xaa
000A62 6EA7               M         movwf   EECON2              ; write 0xaa
000A64 82A6               M         bsf     EECON1, WR          ; begin write
000A66 B2A6               M         btfsc   EECON1, WR
000A68 D???               M         bra     $-2
                          M 
000A6A 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000A6C 94A6               M         bcf     EECON1, WREN        ; disable writes
000A6E 2A22           00997         incf    L_EE
Warning[203]: Found opcode in column 1. (return)
000A70 0012           00998 return
                      00999         
                      01000                 
000A72                01001 DISPLAY_RTC     
                      01002         ; display data in this format hh/minmin/yy yy/mm/dd
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01003         rtc_read    0x02            ; 0x02 from DS1307 - hours
000A72 0E02               M     movlw   0x02
000A74 6E??               M     movwf   regaddress
000A76 EC?? F???          M     call    read_rtc
000A7A C??? FFE8          M     movff   datachar, WREG
000A7E EC?? F???          M     call    rtc_convert
000A82 C??? FFE8      01004         movff   tens_digit,WREG
000A86 EC?? F???      01005         call    WR_DATA
000A8A C??? FFE8      01006         movff   ones_digit,WREG
000A8E EC?? F???      01007         call    WR_DATA
000A92 0E68           01008         movlw   "h"
000A94 EC?? F???      01009         call    WR_DATA
                      01010         
                      01011         rtc_read    0x01            ; 0x01 from DS1307 - minutes
000A98 0E01               M     movlw   0x01
000A9A 6E??               M     movwf   regaddress
000A9C EC?? F???          M     call    read_rtc
000AA0 C??? FFE8          M     movff   datachar, WREG
000AA4 EC?? F???          M     call    rtc_convert
000AA8 C??? FFE8      01012         movff   tens_digit,WREG
000AAC EC?? F???      01013         call    WR_DATA
000AB0 C??? FFE8      01014         movff   ones_digit,WREG
000AB4 EC?? F???      01015         call    WR_DATA
                      01016         
                      01017         rtc_read    0x00            ; 0x00 from DS1307 - seconds
000AB8 0E00               M     movlw   0x00
000ABA 6E??               M     movwf   regaddress
000ABC EC?? F???          M     call    read_rtc
000AC0 C??? FFE8          M     movff   datachar, WREG
000AC4 EC?? F???          M     call    rtc_convert
000AC8 C??? FFE8      01018         movff   tens_digit,WREG
000ACC EC?? F???      01019         call    WR_DATA
000AD0 C??? FFE8      01020         movff   ones_digit,WREG
000AD4 EC?? F???      01021         call    WR_DATA
000AD8 0E20           01022         movlw   " "
000ADA EC?? F???      01023         call    WR_DATA
                      01024         
                      01025         rtc_read    0x06            ; 0x06 from DS1307 - years
000ADE 0E06               M     movlw   0x06
000AE0 6E??               M     movwf   regaddress
000AE2 EC?? F???          M     call    read_rtc
000AE6 C??? FFE8          M     movff   datachar, WREG
000AEA EC?? F???          M     call    rtc_convert
000AEE C??? FFE8      01026         movff   tens_digit,WREG
000AF2 EC?? F???      01027         call    WR_DATA
000AF6 C??? FFE8      01028         movff   ones_digit,WREG
000AFA EC?? F???      01029         call    WR_DATA
000AFE 0E2F           01030         movlw   "/"
000B00 EC?? F???      01031         call    WR_DATA
                      01032         
                      01033         rtc_read    0x05            ; 0x05 from DS1307 - months
000B04 0E05               M     movlw   0x05
000B06 6E??               M     movwf   regaddress
000B08 EC?? F???          M     call    read_rtc
000B0C C??? FFE8          M     movff   datachar, WREG
000B10 EC?? F???          M     call    rtc_convert
000B14 C??? FFE8      01034         movff   tens_digit,WREG
000B18 EC?? F???      01035         call    WR_DATA
000B1C C??? FFE8      01036         movff   ones_digit,WREG
000B20 EC?? F???      01037         call    WR_DATA
000B24 0E2F           01038         movlw   "/"
000B26 EC?? F???      01039         call    WR_DATA
                      01040         
                      01041         rtc_read    0x04            ; 0x04 from DS1307 - days
000B2A 0E04               M     movlw   0x04
000B2C 6E??               M     movwf   regaddress
000B2E EC?? F???          M     call    read_rtc
000B32 C??? FFE8          M     movff   datachar, WREG
000B36 EC?? F???          M     call    rtc_convert
000B3A C??? FFE8      01042         movff   tens_digit,WREG
000B3E EC?? F???      01043         call    WR_DATA
000B42 C??? FFE8      01044         movff   ones_digit,WREG
000B46 EC?? F???      01045         call    WR_DATA
Warning[203]: Found opcode in column 1. (return)
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000B4A 0012           01046 return
                      01047         
000B4C                01048 SET_TIME
                      01049         rtc_resetAll
                          M 
000B4C 6A??               M     clrf    databyte
000B4E 0E06               M     movlw   6
000B50 6E??               M     movwf   regaddress ;start at 6 and go down, and set all to 0
                          M 
Warning[207]: Found label after column 1. (del_loop0)
000B52                    M     del_loop0
000B52 EC?? F???          M     call    write_rtc
000B56 2E??               M     decfsz  regaddress
000B58 D???               M     bra     del_loop0
000B5A EC?? F???          M     call    write_rtc ;sets registers 0-6 to zero
Warning[207]: Found label after column 1. (_loopknt)
  00000001                M     _loopknt set _loopknt+1
                      01050         
                      01051         rtc_set 0x00,   b'10000000'
000B5E 0E00               M     movlw   0x00
000B60 6E??               M     movwf   regaddress
000B62 0E80               M     movlw   b'10000000'
000B64 6E??               M     movwf   databyte
000B66 EC?? F???          M     call    write_rtc
                      01052 
                      01053         rtc_set 0x06,   b'00010111'             ; Year 17
000B6A 0E06               M     movlw   0x06
000B6C 6E??               M     movwf   regaddress
000B6E 0E17               M     movlw   b'00010111'
000B70 6E??               M     movwf   databyte
000B72 EC?? F???          M     call    write_rtc
                      01054         rtc_set 0x05,   b'00000010'             ; Month 2
000B76 0E05               M     movlw   0x05
000B78 6E??               M     movwf   regaddress
000B7A 0E02               M     movlw   b'00000010'
000B7C 6E??               M     movwf   databyte
000B7E EC?? F???          M     call    write_rtc
                      01055         rtc_set 0x04,   b'00011001'             ; Date 19
000B82 0E04               M     movlw   0x04
000B84 6E??               M     movwf   regaddress
000B86 0E19               M     movlw   b'00011001'
000B88 6E??               M     movwf   databyte
000B8A EC?? F???          M     call    write_rtc
                      01056         rtc_set 0x02,   b'00010001'             ; Hours 11
000B8E 0E02               M     movlw   0x02
000B90 6E??               M     movwf   regaddress
000B92 0E11               M     movlw   b'00010001'
000B94 6E??               M     movwf   databyte
000B96 EC?? F???          M     call    write_rtc
                      01057         rtc_set 0x01,   b'00111000'             ; Minutes 38
000B9A 0E01               M     movlw   0x01
000B9C 6E??               M     movwf   regaddress
000B9E 0E38               M     movlw   b'00111000'
000BA0 6E??               M     movwf   databyte
000BA2 EC?? F???          M     call    write_rtc
                      01058         rtc_set 0x00,   b'00000000'             ; Seconds 0
000BA6 0E00               M     movlw   0x00
000BA8 6E??               M     movwf   regaddress
000BAA 0E00               M     movlw   b'00000000'
000BAC 6E??               M     movwf   databyte
000BAE EC?? F???          M     call    write_rtc
Warning[203]: Found opcode in column 1. (return)
000BB2 0012           01059 return
                      01060         
000BB4                01061 INIT_USART
000BB4 0E0F           01062         movlw   15      ; baud rate 9600
000BB6 6EAF           01063         movwf   SPBRG
000BB8 6AAC           01064         clrf    TXSTA
                      01065         
000BBA 6AAB           01066         clrf    RCSTA
000BBC 8EAB           01067         bsf     RCSTA,SPEN      ; asynchronous serial port enable
000BBE 88AB           01068         bsf     RCSTA,CREN      ; continous receive
                      01069         
000BC0 8AAC           01070         bsf     TXSTA, TXEN     ; transmit enabled
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000BC2 0012           01071         return
                      01072 
                      01073 ;DataUSART
                      01074 ;       
                      01075 ;       movlw   0x02
                      01076 ;       call    USART_WAIT
                      01077 ;       movlw   0x0D
                      01078 ;       call    USART_WAIT
                      01079 ;       
                      01080 ;       movlw   d'21'       ; start of permanent logs
                      01081 ;       movff   w, L_EE
                      01082 ;       TransferTable   PCLog1
                      01083 ;       
                      01084 ;       ; display time here
                      01085 ;;      rtc_read        0x02
                      01086 ;;              movf        tens_digit, W
                      01087 ;;        andlw       b'00000001'
                      01088 ;;        addlw       0x30
                      01089 ;;        call        TransmitWaitUSART
                      01090 ;;        movf        ones_digit, W
                      01091 ;;        call        TransmitWaitUSART
                      01092 ;;              movlw           ":"
                      01093 ;;              call            TransmitWaitUSART
                      01094 ;;              ; Dispay minutes
                      01095 ;;              rtc_read        0x01
                      01096 ;;              call        SendRTC_USART
                      01097 ;;              ; Dispay AM/PM
                      01098 ;;              rtc_read        0x02
                      01099 ;;        movlw       "P"
                      01100 ;;        btfss       tens_digit, 1
                      01101 ;;        movlw       "A"
                      01102 ;;        call        TransmitWaitUSART
                      01103 ;;        movlw       "M"
                      01104 ;;        call        TransmitWaitUSART
                      01105 ;;              movlw           " "
                      01106 ;;        call        TransmitWaitUSART
                      01107 ;;              ; Display month
                      01108 ;;              rtc_read        0x05
                      01109 ;;              call        SendRTC_USART
                      01110 ;;              movlw           0x2F            ; ASCII '/'
                      01111 ;;              call            TransmitWaitUSART
                      01112 ;;              ; Display day
                      01113 ;;              rtc_read        0x04
                      01114 ;;              call        SendRTC_USART
                      01115 ;;              movlw           0x2F            ; ASCII '/'
                      01116 ;;              call            TransmitWaitUSART
                      01117 ;;              ; Display year
                      01118 ;;              rtc_read        0x06
                      01119 ;;              call        SendRTC_USART
                      01120 ;       
                      01121 ;       call    USART_LINE
                      01122 ;       call    USART_LINE
                      01123 ;       
                      01124 ;       clrf    counter
                      01125 ;       incf    counter
                      01126 ;
                      01127 ;USART_TRANSFER
                      01128 ;       movlw   d'21'
                      01129 ;       mulwf   counter
                      01130 ;       movff   PRODL, L_EE
                      01131 ;       movlw   d'9'
                      01132 ;       addwf   L_EE
                      01133 ;       READEE  OP_sec, H_EE, L_EE
                      01134 ;       incf    L_EE
                      01135 ;       READEE  OP_INT, H_EE, L_EE
                      01136 ;       incf    L_EE
                      01137 ;       ; call  TransferTime
                      01138 ;       
                      01139 ;       ; send rtc
                      01140 ;       movlw   0x09
                      01141 ;       call    USART_WAIT
                      01142 ;       movff   PRODL, L_EE
                      01143 ;       ;call   TransferRTC
                      01144 ;       call    USART_LINE
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01145 ;       
                      01146 ;       
                      01147 ;       
                      01148 ;       
                      01149 ;USART_WAIT
                      01150 ;       movwf   TXREG
                      01151 ;       btfss   TXSTA,1
                      01152 ;       goto    $-2
                      01153 ;       return
                      01154 ;
                      01155 ;USART_LINE
                      01156 ;       movlw   0x0A
                      01157 ;       call    USART_WAIT
                      01158 ;       movlw   0x0D
                      01159 ;       call    USART_WAIT
                      01160 ;       return
                      01161         
                      01162         
000BC4                01163 Delay5us
000BC4 0E78           01164         movlw   d'120'
000BC6 6E1C           01165         movwf   d5us
                      01166 
000BC8                01167 loop5us
000BC8 2E1C           01168         decfsz  d5us
000BCA EF?? F???      01169         goto    loop5us
000BCE 0000           01170         nop
000BD0 0012           01171         return
                      01172 
000BD2                01173 Delay200us
000BD2 0EA4           01174         movlw   0xA4
000BD4 6E1D           01175         movwf   d200us
                      01176 
000BD6                01177 loop200us
000BD6 2E1D           01178         decfsz  d200us
000BD8 EF?? F???      01179         goto    loop200us
000BDC 0000           01180         nop
000BDE 0012           01181         return
                      01182 
000BE0                01183 Delay50ms
000BE0 0EF9           01184         movlw   0xF9
000BE2 6E1E           01185         movwf   d50ms
                      01186 
000BE4                01187 loop50ms
000BE4 EC?? F???      01188         call    Delay200us
000BE8 2E1E           01189         decfsz  d50ms
                      01190 
000BEA                01191 Cycles
000BEA EF?? F???      01192         goto    loop50ms
000BEE EC?? F???      01193         call    Delay200us
000BF2 0012           01194         return
                      01195 
000BF4                01196 WriteEE_RTC
                      01197         WriteEE tens_digit, H_EE, L_EE
000BF4 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000BF8 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000BFC C??? FFA8          M         movff   tens_digit, EEDATA  ; set word
                          M 
000C00 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000C02 D???               M         bra     $-2
                          M 
000C04 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000C06 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000C08 84A6               M         bsf     EECON1, WREN        ; enable write
000C0A 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000C0C 98A1               M         bcf     PIR2, EEIF
                          M 
000C0E 0E55               M         movlw   0x55
000C10 6EA7               M         movwf   EECON2              ; write 55h
000C12 0EAA               M         movlw   0xaa
000C14 6EA7               M         movwf   EECON2              ; write 0xaa
000C16 82A6               M         bsf     EECON1, WR          ; begin write
000C18 B2A6               M         btfsc   EECON1, WR
000C1A D???               M         bra     $-2
                          M 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C1C 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000C1E 94A6               M         bcf     EECON1, WREN        ; disable writes
000C20 2A22           01198         incf    L_EE
                      01199         WriteEE ones_digit, H_EE, L_EE
000C22 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000C26 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000C2A C??? FFA8          M         movff   ones_digit, EEDATA  ; set word
                          M 
000C2E B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000C30 D???               M         bra     $-2
                          M 
000C32 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000C34 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000C36 84A6               M         bsf     EECON1, WREN        ; enable write
000C38 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000C3A 98A1               M         bcf     PIR2, EEIF
                          M 
000C3C 0E55               M         movlw   0x55
000C3E 6EA7               M         movwf   EECON2              ; write 55h
000C40 0EAA               M         movlw   0xaa
000C42 6EA7               M         movwf   EECON2              ; write 0xaa
000C44 82A6               M         bsf     EECON1, WR          ; begin write
000C46 B2A6               M         btfsc   EECON1, WR
000C48 D???               M         bra     $-2
                          M 
000C4A 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000C4C 94A6               M         bcf     EECON1, WREN        ; disable writes
000C4E 2A22           01200         incf    L_EE
000C50 0012           01201         return
                      01202 
000C52                01203 ClearEEPROM_21
000C52 6A21           01204         clrf    H_EE
000C54 6A22           01205         clrf    L_EE
000C56 6820           01206         setf    clear_EE
000C58 6A15           01207         clrf    counter
000C5A                01208 ClearNext
                      01209         WriteEE         clear_EE, H_EE, L_EE
000C5A C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000C5E C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000C62 C020 FFA8          M         movff   clear_EE, EEDATA    ; set word
                          M 
000C66 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000C68 D???               M         bra     $-2
                          M 
000C6A 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000C6C 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000C6E 84A6               M         bsf     EECON1, WREN        ; enable write
000C70 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000C72 98A1               M         bcf     PIR2, EEIF
                          M 
000C74 0E55               M         movlw   0x55
000C76 6EA7               M         movwf   EECON2              ; write 55h
000C78 0EAA               M         movlw   0xaa
000C7A 6EA7               M         movwf   EECON2              ; write 0xaa
000C7C 82A6               M         bsf     EECON1, WR          ; begin write
000C7E B2A6               M         btfsc   EECON1, WR
000C80 D???               M         bra     $-2
                          M 
000C82 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000C84 94A6               M         bcf     EECON1, WREN        ; disable writes
000C86 2A15           01210         incf            counter
000C88 2A22           01211         incf            L_EE
000C8A 0E15           01212         movlw           d'21'
000C8C 6215           01213         cpfseq          counter
000C8E EF?? F???      01214         goto            ClearNext
000C92 6A21           01215         clrf            H_EE
000C94 6A22           01216         clrf            L_EE
000C96 0012           01217         return
                      01218         
000C98                01219 READ_KEY
000C98 A281           01220         btfss   PORTB, 1        ; check for keypad interrupt
000C9A EF?? F???      01221         goto    READ_KEY
000C9E 3881           01222         swapf   PORTB, W
000CA0 0B0F           01223         andlw   0x0F
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000CA2 6E10           01224         movwf   KEY
000CA4 B281           01225         btfsc   PORTB, 1
000CA6 EF?? F???      01226         goto    $-2
000CAA 0012           01227         return
                      01228 
000CAC                01229 READ_KEY_TIME
000CAC EC?? F???      01230         call        LCD_L2          ; go to second line to print RTC
                      01231 
                      01232         ; display the time
000CB0 EC?? F???      01233         call    DISPLAY_RTC
                      01234 
000CB4 A281           01235         btfss       PORTB, 1    ; keypad interrupt
000CB6 EF?? F???      01236         goto        READ_KEY_TIME
000CBA 3881           01237         swapf       PORTB, W    ; copy PORTB7:4 to W3:0
000CBC 0B0F           01238         andlw       0x0F        ; only want W3:0
000CBE 6E10           01239         movwf       KEY         ; write this value to the KEY
000CC0 B281           01240         btfsc       PORTB, 1    ; wait for release
000CC2 EF?? F???      01241         goto        $-2         ; go back one instruction
000CC6 0012           01242         return
                      01243 
000CC8                01244 DisplayExeTime
                      01245         READEE  REG_EE, H_EE, L_EE
000CC8 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000CCC C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000CD0 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000CD2 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000CD4 80A6               M         bsf     EECON1, RD          ; read EEPROM
000CD6 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000CDA 0EFF           01246         movlw   0xFF
000CDC 6223           01247         cpfseq  REG_EE
000CDE EF?? F???      01248         goto    NoSkipDispExeTime
                      01249         Display NoData
  0000                    M         local   loop
000CE2 0E??               M         movlw   upper NoData    ; Move Table<20:16>
000CE4 6EF8               M         movwf   TBLPTRU
000CE6 0E??               M         movlw   high NoData     ; Move Table<15:8>
000CE8 6EF7               M         movwf   TBLPTRH
000CEA 0E??               M         movlw   low NoData      ; Move Table<7:0>
000CEC 6EF6               M         movwf   TBLPTRL
000CEE 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000CF0 50F5               M         movf    TABLAT, W
000CF2                    M loop
000CF2 EC?? F???          M         call    WR_DATA         ; write to LCD
000CF6 000B               M         tblrd+*                 ; next row in table
000CF8 50F5               M         movf    TABLAT, W
000CFA E1??               M         bnz     loop
000CFC 0EFF           01250         movlw   0xFF
000CFE 6023           01251         cpfslt  REG_EE
000D00 EF?? F???      01252         goto    SkipDispExeTime
000D04 0012           01253         return
                      01254 
000D06                01255 NoSkipDispExeTime
                      01256         READEE  WREG, H_EE, L_EE
000D06 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D0A C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D0E 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D10 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D12 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D14 CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000D18 EC?? F???      01257         call    WR_DATA
000D1C 2A22           01258         incf    L_EE
                      01259         
                      01260         READEE  WREG, H_EE, L_EE
000D1E C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D22 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D26 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D28 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D2A 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D2C CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000D30 EC?? F???      01261         call    WR_DATA
000D34 2A22           01262         incf    L_EE
                      01263         
                      01264         READEE  WREG, H_EE, L_EE
000D36 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D3A C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D3E 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D40 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D42 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D44 CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000D48 EC?? F???      01265         call    WR_DATA
000D4C 2A22           01266         incf    L_EE
                      01267 
000D4E 0E73           01268         movlw   0x73            ; Write 's'
000D50 EC?? F???      01269         call    WR_DATA
000D54 EC?? F???      01270         call    LCD_L2
000D58                01271 SkipDispExeTime
000D58 0012           01272         return
                      01273 
000D5A                01274 DispOpRTC
                      01275         READEE  REG_EE, H_EE, L_EE
000D5A C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D5E C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D62 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000D64 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000D66 80A6               M         bsf     EECON1, RD          ; read EEPROM
000D68 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000D6C 0EFF           01276         movlw   0xff
000D6E 6223           01277         cpfseq  REG_EE
000D70 EF?? F???      01278         goto    NoSkipDispOpRTC
                      01279         Display NoData
  0000                    M         local   loop
000D74 0E??               M         movlw   upper NoData    ; Move Table<20:16>
000D76 6EF8               M         movwf   TBLPTRU
000D78 0E??               M         movlw   high NoData     ; Move Table<15:8>
000D7A 6EF7               M         movwf   TBLPTRH
000D7C 0E??               M         movlw   low NoData      ; Move Table<7:0>
000D7E 6EF6               M         movwf   TBLPTRL
000D80 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000D82 50F5               M         movf    TABLAT, W
000D84                    M loop
000D84 EC?? F???          M         call    WR_DATA         ; write to LCD
000D88 000B               M         tblrd+*                 ; next row in table
000D8A 50F5               M         movf    TABLAT, W
000D8C E1??               M         bnz     loop
000D8E 0EFF           01280         movlw   0xff
000D90 6023           01281         cpfslt  REG_EE
000D92 EF?? F???      01282         goto    SkipDispOpRTC
                      01283 
000D96                01284 NoSkipDispOpRTC
                      01285         READEE  REG_EE, H_EE, L_EE
000D96 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000D9A C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000D9E 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000DA0 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000DA2 80A6               M         bsf     EECON1, RD          ; read EEPROM
000DA4 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000DA8 C023 FFE8      01286         movff   REG_EE, WREG
000DAC EC?? F???      01287         call    WR_DATA
000DB0 2A22           01288         incf    L_EE
                      01289         
                      01290         READEE  REG_EE, H_EE, L_EE
000DB2 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000DB6 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000DBA 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000DBC 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000DBE 80A6               M         bsf     EECON1, RD          ; read EEPROM
000DC0 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000DC4 C023 FFE8      01291         movff   REG_EE, WREG
000DC8 EC?? F???      01292         call    WR_DATA
000DCC 2A22           01293         incf    L_EE
                      01294 
000DCE 0E68           01295         movlw   "h"
000DD0 EC?? F???      01296         call    WR_DATA
                      01297         
000DD4 EC?? F???      01298         call    DispOpRTC_Helper
                      01299         
000DD8 0E20           01300         movlw   " "
000DDA EC?? F???      01301         call    WR_DATA
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-23-2017  11:43:45         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01302         
000DDE EC?? F???      01303         call    DispOpRTC_Helper
000DE2 0E2F           01304         movlw   "/"
000DE4 EC?? F???      01305         call    WR_DATA
                      01306 
000DE8 EC?? F???      01307         call    DispOpRTC_Helper
000DEC 0E2F           01308         movlw   "/"
000DEE EC?? F???      01309         call    WR_DATA
000DF2 EC?? F???      01310         call    DispOpRTC_Helper
000DF6                01311 SkipDispOpRTC
000DF6 0012           01312                 return
000DF8                01313 DispOpRTC_Helper
                      01314         READEE          REG_EE, H_EE, L_EE
000DF8 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000DFC C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E00 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E02 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E04 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E06 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000E0A C023 FFE8      01315         movff           REG_EE, WREG
000E0E EC?? F???      01316         call            WR_DATA
000E12 2A22           01317         incf            L_EE
                      01318         READEE          REG_EE, H_EE, L_EE
000E14 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E18 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E1C 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E1E 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E20 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E22 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000E26 C023 FFE8      01319         movff           REG_EE, WREG
000E2A EC?? F???      01320         call            WR_DATA
000E2E 2A22           01321         incf            L_EE
000E30 0012           01322         return
Warning[205]: Found directive in column 1. (end)
                      01323 end

Errors   :     0
Warnings :    43 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

