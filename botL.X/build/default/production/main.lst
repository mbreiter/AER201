MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*******************************************************************************
                      00002 ;
                      00003 ;    Filename: main.asm
                      00004 ;    Date: 2 Feb 2017
                      00005 ;    File Version: 1.0
                      00006 ;    Author: Matthew Reiter
                      00007 ;    Course: AER201
                      00008 ;    Description: botL - a pastic bottle sorting machine
                      00009  
                      00010 ;*******************************************************************************
                      00011 ; configuration settings
                      00012 ;*******************************************************************************
                      00013 
Warning[205]: Found directive in column 1. (list)
                      00014 list    P=18F4620, F=INHX32, C=160, N=80, ST=OFF, MM=OFF, R=DEC
                      00015 #include <p18f4620.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Nov 17 2016
                      00005 ;  MPASM PIC18F4620 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      01440         LIST
                      00016 #include <lcd.inc>
  0000                00001     extern      InitLCD,WrtLCD,ClrLCD,ClkLCD,WR_INS,WR_DATA,LCD_L1,LCD_L2,delay5ms
                      00002 
                      00003 
                      00004 
                      00005 
                      00006 
                      00007 
                      00017 #include <rtc.inc>
Warning[205]: Found directive in column 1. (extern)
  0000                00001 extern  write_rtc,read_rtc,rtc_convert,i2c_common_setup, regaddress, databyte, datachar,tens_digit,ones_digit
                      00002 
Warning[205]: Found directive in column 1. (variable)
  0000                00003 variable _loopknt=0
                      00004 
                      00005 rtc_resetAll macro
                      00006 
                      00007     clrf    databyte
                      00008     movlw   6
                      00009     movwf   regaddress ;start at 6 and go down, and set all to 0
                      00010 
                      00011     del_loop#v(_loopknt)
                      00012     call    write_rtc
                      00013     decfsz  regaddress
                      00014     bra     del_loop#v(_loopknt)
                      00015     call    write_rtc ;sets registers 0-6 to zero
                      00016     _loopknt set _loopknt+1
Warning[205]: Found directive in column 1. (endm)
                      00017 endm
                      00018 
                      00019 rtc_set macro addliteral,datliteral
                      00020     movlw   addliteral
                      00021     movwf   regaddress
                      00022     movlw   datliteral
                      00023     movwf   databyte
                      00024     call    write_rtc
Warning[205]: Found directive in column 1. (endm)
                      00025 endm
                      00026 
                      00027 rtc_read macro addliteral
                      00028     movlw   addliteral
                      00029     movwf   regaddress
                      00030     call    read_rtc
                      00031     movff   datachar, WREG
                      00032     call    rtc_convert
Warning[205]: Found directive in column 1. (endm)
                      00033 endm
                      00018 #include <colour.inc>
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                00001     extern      i2c_common_setup, regaddress, databyte, datachar, READ_COLOUR_I2C, WRITE_COLOUR_I2C, WR_DATA, data_colourL, data_col
                            ourH, delay5ms
                      00002 
                      00003 ;    #define TCS34725_ADDRESS          (0x29)
                      00004 ;
                      00005 ;    #define TCS34725_COMMAND_BIT      (0x80)
                      00006 ;
                      00007 ;    #define TCS34725_ENABLE           (0x00)
                      00008 ;    #define TCS34725_ENABLE_AIEN      (0x10)    /* RGBC Interrupt Enable */
                      00009 ;    #define TCS34725_ENABLE_WEN       (0x08)    /* Wait enable - Writing 1 activates the wait timer */
                      00010 ;    #define TCS34725_ENABLE_AEN       (0x02)    /* RGBC Enable - Writing 1 actives the ADC, 0 disables it */
                      00011 ;    #define TCS34725_ENABLE_PON       (0x01)    /* Power on - Writing 1 activates the internal oscillator, 0 disables it */
                      00012 ;    #define TCS34725_ATIME            (0x01)    /* Integration time */
                      00013 ;    #define TCS34725_WTIME            (0x03)    /* Wait time (if TCS34725_ENABLE_WEN is asserted) */
                      00014 ;    #define TCS34725_WTIME_2_4MS      (0xFF)    /* WLONG0 = 2.4ms   WLONG1 = 0.029s */
                      00015 ;    #define TCS34725_WTIME_204MS      (0xAB)    /* WLONG0 = 204ms   WLONG1 = 2.45s  */
                      00016 ;    #define TCS34725_WTIME_614MS      (0x00)    /* WLONG0 = 614ms   WLONG1 = 7.4s   */
                      00017 ;    #define TCS34725_AILTL            (0x04)    /* Clear channel lower interrupt threshold */
                      00018 ;    #define TCS34725_AILTH            (0x05)
                      00019 ;    #define TCS34725_AIHTL            (0x06)    /* Clear channel upper interrupt threshold */
                      00020 ;    #define TCS34725_AIHTH            (0x07)
                      00021 ;    #define TCS34725_PERS             (0x0C)    /* Persistence register - basic SW filtering mechanism for interrupts */
                      00022 ;    #define TCS34725_PERS_NONE        (0b0000)  /* Every RGBC cycle generates an interrupt                                */
                      00023 ;    #define TCS34725_PERS_1_CYCLE     (0b0001)  /* 1 clean channel value outside threshold range generates an interrupt   */
                      00024 ;    #define TCS34725_PERS_2_CYCLE     (0b0010)  /* 2 clean channel values outside threshold range generates an interrupt  */
                      00025 ;    #define TCS34725_PERS_3_CYCLE     (0b0011)  /* 3 clean channel values outside threshold range generates an interrupt  */
                      00026 ;    #define TCS34725_PERS_5_CYCLE     (0b0100)  /* 5 clean channel values outside threshold range generates an interrupt  */
                      00027 ;    #define TCS34725_PERS_10_CYCLE    (0b0101)  /* 10 clean channel values outside threshold range generates an interrupt */
                      00028 ;    #define TCS34725_PERS_15_CYCLE    (0b0110)  /* 15 clean channel values outside threshold range generates an interrupt */
                      00029 ;    #define TCS34725_PERS_20_CYCLE    (0b0111)  /* 20 clean channel values outside threshold range generates an interrupt */
                      00030 ;    #define TCS34725_PERS_25_CYCLE    (0b1000)  /* 25 clean channel values outside threshold range generates an interrupt */
                      00031 ;    #define TCS34725_PERS_30_CYCLE    (0b1001)  /* 30 clean channel values outside threshold range generates an interrupt */
                      00032 ;    #define TCS34725_PERS_35_CYCLE    (0b1010)  /* 35 clean channel values outside threshold range generates an interrupt */
                      00033 ;    #define TCS34725_PERS_40_CYCLE    (0b1011)  /* 40 clean channel values outside threshold range generates an interrupt */
                      00034 ;    #define TCS34725_PERS_45_CYCLE    (0b1100)  /* 45 clean channel values outside threshold range generates an interrupt */
                      00035 ;    #define TCS34725_PERS_50_CYCLE    (0b1101)  /* 50 clean channel values outside threshold range generates an interrupt */
                      00036 ;    #define TCS34725_PERS_55_CYCLE    (0b1110)  /* 55 clean channel values outside threshold range generates an interrupt */
                      00037 ;    #define TCS34725_PERS_60_CYCLE    (0b1111)  /* 60 clean channel values outside threshold range generates an interrupt */
                      00038 ;    #define TCS34725_CONFIG           (0x0D)
                      00039 ;    #define TCS34725_CONFIG_WLONG     (0x02)    /* Choose between short and long (12x) wait times via TCS34725_WTIME */
                      00040 ;    #define TCS34725_CONTROL          (0x0F)    /* Set the gain level for the sensor */
                      00041 ;    #define TCS34725_ID               (0x12)    /* 0x44 = TCS34721/TCS34725, 0x4D = TCS34723/TCS34727 */
                      00042 ;    #define TCS34725_STATUS           (0x13)
                      00043 ;    #define TCS34725_STATUS_AINT      (0x10)    /* RGBC Clean channel interrupt */
                      00044 ;    #define TCS34725_STATUS_AVALID    (0x01)    /* Indicates that the RGBC channels have completed an integration cycle */
                      00045 ;    #define TCS34725_CDATAL           (0x14)    /* Clear channel data */
                      00046 ;    #define TCS34725_CDATAH           (0x15)
                      00047 ;    #define TCS34725_RDATAL           (0x16)    /* Red channel data */
                      00048 ;    #define TCS34725_RDATAH           (0x17)
                      00049 ;    #define TCS34725_GDATAL           (0x18)    /* Green channel data */
                      00050 ;    #define TCS34725_GDATAH           (0x19)
                      00051 ;    #define TCS34725_BDATAL           (0x1A)    /* Blue channel data */
                      00052 ;    #define TCS34725_BDATAH           (0x1B)
                      00053 
                      00054 
Warning[207]: Found label after column 1. (COLOUR_INIT)
                      00055     COLOUR_INIT macro
                      00056         COLOUR_WRITE    0x00, 0x01 ; Enable Register (0x00), Power ON (0x01)
                      00057         call    delay5ms
                      00058         COLOUR_WRITE    0x00, 0x02 ; Enable Register (0x00), RGBC enable (0x02)
                      00059         call    delay5ms
                      00060         COLOUR_WRITE    0x01, 0xff ; Timing Register (0x01), 2.4ms (0xff) cycle
                      00061         call    delay5ms
                      00062         COLOUR_WRITE    0x0f, 0x03 ; Control Register (0x0f), 60x gain (0x03)
                      00063         call    delay5ms
                      00064     endm
                      00065     
Warning[207]: Found label after column 1. (COLOUR_READ)
                      00066     COLOUR_READ  macro  address
                      00067         movlw   address
                      00068         movwf   regaddress
                      00069         call    READ_COLOUR_I2C
                      00070     endm
                      00071     
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[207]: Found label after column 1. (COLOUR_WRITE)
                      00072     COLOUR_WRITE macro address, datliteral
                      00073         movlw   address
                      00074         movwf   regaddress
                      00075         movlw   datliteral
                      00076         movwf   databyte
                      00077         call    WRITE_COLOUR_I2C
                      00078     endm
                      00079     
Warning[207]: Found label after column 1. (COLOUR_GET_DATA)
                      00080     COLOUR_GET_DATA macro clear, red, green, blue
                      00081         call    delay5ms
                      00082         
                      00083         COLOUR_READ 0x14    ; read clear colour address low, command bits set later
                      00084         movff   databyte, clear+0
                      00085         COLOUR_READ 0x15    ; read clear colour address high, command bits set later
                      00086         movff   databyte, clear+1
                      00087                 
                      00088         COLOUR_READ 0x16    ; read red colour address low, command bits set later
                      00089         movff   databyte, red+0
                      00090         COLOUR_READ 0x17    ; read red colour address high, command bits set later
                      00091         movff   databyte, red+0
                      00092         
                      00093         COLOUR_READ 0x18    ; read green colour address low, command bits set later
                      00094         movff   databyte, green+0
                      00095         COLOUR_READ 0x19    ; read green colour address high, command bits set later
                      00096         movff   databyte, green+1
                      00097         
                      00098         COLOUR_READ 0x1a    ; read blue colour address low, command bits set later
                      00099         movff   databyte, blue+0
                      00100         COLOUR_READ 0x1b    ; read blue colour address high, command bits set later
                      00101         movff   databyte, blue+1
                      00102     endm
                      00103     
                      00019 #include <sorting.inc>
  0000                00001     extern  i2c_common_setup, regaddress, databyte, datachar, READ_ARDUINO, INIT_ARDUINO, WR_DATA, delay5ms
                      00002     
Warning[207]: Found label after column 1. (ARDUINO_READ)
                      00003     ARDUINO_READ macro bottle_sort
                      00004         call    READ_ARDUINO
                      00005         movff   WREG, bottle_sort
                      00006     endm
                      00007     
                      00008 
                      00009 
                      00010 
                      00020 
                      00021     CONFIG OSC=HS, FCMEN=OFF, IESO=OFF
                      00022     CONFIG PWRT = OFF, BOREN = SBORDIS, BORV = 3
                      00023     CONFIG WDT = OFF, WDTPS = 32768
                      00024     CONFIG MCLRE = ON, LPT1OSC = OFF, PBADEN = OFF
                      00025     CONFIG STVREN = ON, LVP = OFF, XINST = OFF
                      00026     CONFIG DEBUG = OFF
                      00027     CONFIG CP0 = OFF, CP1 = OFF, CP2 = OFF, CP3 = OFF
                      00028     CONFIG CPB = OFF, CPD = OFF
                      00029     CONFIG WRT0 = OFF, WRT1 = OFF, WRT2 = OFF, WRT3 = OFF
                      00030     CONFIG WRTB = OFF, WRTC = OFF, WRTD = OFF
                      00031     CONFIG EBTR0 = OFF, EBTR1 = OFF, EBTR2 = OFF, EBTR3 = OFF
                      00032     CONFIG EBTRB = OFF
                      00033 
                      00034 ;*******************************************************************************
                      00035 ; variable and constants
                      00036 ;*******************************************************************************
                      00037     CODE
                      00038             
                      00039     cblock 0x00
  00000000            00040         key1
  00000001            00041         key2
  00000002            00042         key3
  00000003            00043         keyA
  00000004            00044         key4
  00000005            00045         key5
  00000006            00046         key6
  00000007            00047         keyB
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000008            00048         key7
  00000009            00049         key8
  0000000A            00050         key9
  0000000B            00051         keyC
  0000000C            00052         keyS
  0000000D            00053         key0
  0000000E            00054         keyH
  0000000F            00055         keyD
  00000010            00056         KEY
  00000011            00057         temp_KEY
  00000012            00058         KEY_ISR
  00000013            00059         temp_S  
  00000014            00060         temp_W
  00000015            00061         counter
  00000016            00062         counter2
  00000017            00063         temp
  00000018            00064         OP_sec
  00000019            00065         OP_INT
  0000001A            00066         temp_ISR
  0000001B            00067         delayR
  0000001C            00068         d5us
  0000001D            00069         d200us
  0000001E            00070         d50ms
  0000001F            00071         inExecution
  00000020            00072         clear_EE
  00000021            00073         H_EE    
  00000022            00074         L_EE    
  00000023            00075         REG_EE  
  00000024            00076         tempH_EE
  00000025            00077         tempL_EE
  00000026            00078         tempL_EEC
  00000027            00079         MAX_EE   
  00000028            00080         READ_EE
  00000029            00081         last_log
  0000002A            00082         startHt
  0000002B            00083         startHo
  0000002C            00084         startMt
  0000002D            00085         startMo
  0000002E            00086         endHt
  0000002F            00087         endHo
  00000030            00088         endMt
  00000031            00089         endMo
  00000032            00090         LED_Count
  00000033            00091         SkipCount
  00000034            00092         exe_sec
  00000035            00093         exe_int
  00000036            00094         timer_H
  00000037            00095         timer_L
  00000038            00096         convert_buffer
  00000039            00097         transferring
  0000003A            00098         PC_PCL
  0000003B            00099         PC_PCLATH
  0000003C            00100         PC_PCLATU
  0000003D            00101         TIMCNT
  0000003E            00102         CPCNT
  0000003F            00103         TDATA
  00000040            00104         DETECTION_VAL
  00000041            00105         ESKA
  00000042            00106         ESKA_CAP
  00000043            00107         YOP
  00000044            00108         YOP_CAP
  00000045            00109         CLEAR:2
  00000047            00110         RED:2
  00000049            00111         GREEN:2
  0000004B            00112         BLUE:2
  0000004D            00113         temp_colour:2
                      00114     endc
                      00115     
  0000                00116     extern tens_digit, ones_digit
  0000                00117     extern READ_ARDUINO
                      00118     
                      00119 ;*******************************************************************************
                      00120 ; tables
                      00121 ;*******************************************************************************
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[207]: Found label after column 1. (Welcome)
000000 6F62 4C74 0000 00122     Welcome     db          "botL", 0
Warning[207]: Found label after column 1. (Team)
000006 726D 6820 206C 00123     Team        db          "mr hl hg", 0
       6768 0000 
Warning[207]: Found label after column 1. (StandBy)
000010 7453 6E61 6264 00124     StandBy     db          "Standby", 0
       0079 
Warning[207]: Found label after column 1. (Log1)
000018 6954 656D 003A 00125     Log1        db          "Time:",0
Warning[207]: Found label after column 1. (Log2)
00001E 3231 303A 2030 00126     Log2        db          "12:00 2/3/14", 0
       2F32 2F33 3431 
       0000 
Warning[207]: Found label after column 1. (LogInfo1)
00002C 6153 6576 3A64 00127     LogInfo1    db          "Saved:", 0
       0000 
Warning[207]: Found label after column 1. (LogInfo2)
000034 6142 6B63 3C20 00128     LogInfo2    db          "Back <0>", 0
       3E30 0000 
Warning[207]: Found label after column 1. (PermLog1)
00003E 6550 6D72 6E61 00129     PermLog1    db          "Permanent Logs", 0
       6E65 2074 6F4C 
       7367 0000 
Warning[207]: Found label after column 1. (PermLog2)
00004E 313C 203E 2E2E 00130     PermLog2    db          "<1> ... <9>", 0    
       202E 393C 003E 
Warning[207]: Found label after column 1. (Exe1)
00005A 6F53 7472 6E69 00131     Exe1        db          "Sorting...", 0
       2E67 2E2E 0000 
Warning[207]: Found label after column 1. (Exe2)
000066 4E45 2044 2A3C 00132     Exe2        db          "END <*>", 0
       003E 
Warning[207]: Found label after column 1. (PC1)
00006E 4350 4920 746E 00133     PC1         db          "PC Interface", 0
       7265 6166 6563 
       0000 
Warning[207]: Found label after column 1. (PC2)
00007C 6542 6967 206E 00134     PC2         db          "Begin <#>", 0
       233C 003E 
Warning[207]: Found label after column 1. (PCTransfer)
000086 7254 6E61 6673 00135     PCTransfer  db          "Transferring...", 0
       7265 6972 676E 
       2E2E 002E 
Warning[207]: Found label after column 1. (PCComplete)
000096 6F43 706D 656C 00136     PCComplete  db          "Complete!", 0
       6574 0021 
Warning[207]: Found label after column 1. (Stopped)
0000A0 7453 706F 6570 00137     Stopped     db          "Stopped", 0
       0064 
Warning[207]: Found label after column 1. (Exe_Time)
0000A8 6954 656D 203A 00138     Exe_Time    db          "Time: ", 0
       0000 
Warning[207]: Found label after column 1. (SAVE)
0000B0 6153 6976 676E 00139     SAVE        db          "Saving...", 0
       2E2E 002E 
Warning[207]: Found label after column 1. (Safety)
0000BA 6153 6566 7974 00140     Safety      db          "Safety check...", 0
       6320 6568 6B63 
       2E2E 002E 
Warning[207]: Found label after column 1. (NoData)
0000CA 2F4E 0041      00141     NoData      db          "N/A", 0
Warning[207]: Found label after column 1. (PCLog1)
0000CE 6954 656D 6120 00142     PCLog1      db          "Time and Date:", 0
       646E 4420 7461 
       3A65 0000 
                      00143         
                      00144 ;*******************************************************************************
                      00145 ; macros
                      00146 ;*******************************************************************************
                      00147 
                      00148 TransferTable macro table
                      00149         local loop
                      00150         
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00151         movlw   upper table
                      00152         movwf   TBLPTRU
                      00153         movlw   high table
                      00154         movwf   TBLPTRH
                      00155         movlw   low table
                      00156         movwf   TBLPTRL
                      00157         tblrd*
                      00158         movff   TABLAT, WREG
                      00159 loop
                      00160         call    USART_WAIT
                      00161         tblrd+*
                      00162         movff   TABLAT, WREG
                      00163         bnz     loop
                      00164         endm
                      00165         
                      00166 ConfigLCD   macro
                      00167           movlw     b'00101000'    ; 4 bits, 2 lines,5X7 dots seems to work best instead of the above setting
                      00168           call      WR_INS
                      00169 
                      00170           movlw     b'00001100'    ; display on/off
                      00171           call      WR_INS
                      00172          ; movlw     B'00000110'    ; Entry mode
                      00173          ; call      WR_INS
                      00174           movlw     b'00000001'    ; Clear ram
                      00175           call      WR_INS
                      00176           endm
                      00177         
                      00178 movMSB  macro   port
                      00179         andlw   0xF0
                      00180         iorwf   port, f
                      00181         iorlw   0x0F
                      00182         andwf   port, f
                      00183         endm
                      00184 
                      00185 Delay50N macro count, N
                      00186         local   loop
                      00187         movlw   N
                      00188         movwf   count
                      00189 
                      00190 loop
                      00191         call    Delay50ms
                      00192         decfsz  count
                      00193         goto    loop
                      00194         endm
                      00195 
                      00196 Display macro   Message
                      00197         local   loop
                      00198         movlw   upper Message   ; Move Table<20:16>
                      00199         movwf   TBLPTRU
                      00200         movlw   high Message    ; Move Table<15:8>
                      00201         movwf   TBLPTRH
                      00202         movlw   low Message     ; Move Table<7:0>
                      00203         movwf   TBLPTRL
                      00204         tblrd*                  ; Read byte from TBLPTRL to TABLAT
                      00205         movf    TABLAT, W
                      00206 loop
                      00207         call    WR_DATA         ; write to LCD
                      00208         tblrd+*                 ; next row in table
                      00209         movf    TABLAT, W
                      00210         bnz     loop
                      00211         endm
                      00212 
                      00213 DisplayLog  macro   addrH, addrL
                      00214             local   Again, Finish
                      00215             
                      00216             clrf    SkipCount
                      00217             clrf    MAX_EE
                      00218 
                      00219             ; Check if there is No Data first
                      00220             READEE      REG_EE, addrH, addrL
                      00221             movlw       0xFF
                      00222             cpfseq      REG_EE
                      00223             goto        Again
                      00224             Display     NoData
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00225             goto        Finish
                      00226 Again
                      00227             ; Put a space every 3 Writes
                      00228             movlw       d'3'
                      00229             cpfslt      SkipCount
                      00230             cpfslt      MAX_EE
                      00231             goto        Finish
                      00232 
                      00233             ; read EEPROM
                      00234             READEE      REG_EE, addrH, addrL
                      00235             btfsc       REG_EE, 7       ; if bit 7 set then done
                      00236             goto        Finish
                      00237 Finish
                      00238             endm
                      00239             
                      00240 ;TransferLog macro   addrH, addrL
                      00241         
                      00242 
                      00243 incf_BCD    macro   BCD
                      00244         local ones, endBCD
                      00245         movff   BCD, temp
                      00246         
                      00247         ;process ones digit
                      00248         movlw   0x0f
                      00249         andwf   temp
                      00250         movlw   d'9'
                      00251         
                      00252         ;skip if ones digit is 9
                      00253         cpfseq  temp
                      00254         goto    ones
                      00255         
                      00256         movlw   b'00010000'
                      00257         addwf   BCD
                      00258         movlw   0xf0
                      00259         andwf   BCD
                      00260         movlw   0xa0
                      00261         cpfslt  BCD
                      00262         
                      00263         clrf    BCD
                      00264         goto    endBCD
                      00265         
                      00266 ones
                      00267         incf    BCD
                      00268         goto    endBCD
                      00269 endBCD
                      00270         nop
                      00271         endm
                      00272         
                      00273 SUB16   macro   x, y        ; does not modify x nor y
                      00274         local   RESULTS
                      00275         movff   y+1, WREG   ; move high y into working register
                      00276         subwf   x+1, 0      ; do subtraction xH - yH => w
                      00277         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
                      00278         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                      00279         
                      00280         movff   y+0, WREG
                      00281         subwf   x+0, 0  
                      00282 RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
                      00283         endm
                      00284 
                      00285 WriteRTC    macro
                      00286         movff   tens_digit, WREG
                      00287         call    WR_DATA
                      00288         movff   ones_digit, WREG
                      00289         call    WR_DATA
                      00290         endm
                      00291 
                      00292 WriteEE macro   word, addH, addL
                      00293         movff   addH, EEADRH        ; High address
                      00294         movff   addL, EEADR         ; Low address
                      00295         movff   word, EEDATA        ; set word
                      00296 
                      00297         btfsc   EECON1, WR          ; test if WR=0, skip if so
                      00298         bra     $-2
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00299 
                      00300         bcf     EECON1, EEPGD       ; Point to data memory
                      00301         bcf     EECON1, CFGS        ; Access EEPROM
                      00302         bsf     EECON1, WREN        ; enable write
                      00303         bcf     INTCON, GIE         ; disable interrupts during write
                      00304         bcf     PIR2, EEIF
                      00305 
                      00306         movlw   0x55
                      00307         movwf   EECON2              ; write 55h
                      00308         movlw   0xaa
                      00309         movwf   EECON2              ; write 0xaa
                      00310         bsf     EECON1, WR          ; begin write
                      00311         btfsc   EECON1, WR
                      00312         bra     $-2
                      00313 
                      00314         bsf     INTCON, GIE         ; enable interrupts after write
                      00315         bcf     EECON1, WREN        ; disable writes
                      00316         endm
                      00317 
                      00318 READEE  macro   file, addH, addL
                      00319         movff   addH, EEADRH        ; read to high
                      00320         movff   addL, EEADR         ; read to low
                      00321         bcf     EECON1, EEPGD       ; point to data memory
                      00322         bcf     EECON1, CFGS        ; access to EEPROM
                      00323         bsf     EECON1, RD          ; read EEPROM
                      00324         movff   EEDATA, file        ; put data into file
                      00325         endm
                      00326 
                      00327 ChangeMode  macro   ModeId, NextMode
                      00328         local Next, Exit
                      00329 
                      00330         movlw   ModeId              ; poll for mode
                      00331         cpfseq  KEY                 ; check this against key press
                      00332         goto    Exit
                      00333 
                      00334 Next
                      00335         clrf    LATA                ; clear pins before proceeding
                      00336         clrf    LATB
                      00337         clrf    LATC
                      00338         clrf    LATD
                      00339         goto    NextMode
                      00340 
                      00341 Exit
                      00342         nop
                      00343         endm
                      00344 
                      00345 saveContext macro
                      00346     movff   STATUS, temp_S          ; save STATUS first
                      00347     movwf   temp_W                  ; save W
                      00348     endm
                      00349 
                      00350 restoreContext macro
                      00351     swapf   temp_W, W               ; restore W first
                      00352     movff   temp_S, STATUS          ; restore STATUS last without affecting W
                      00353     endm
                      00354 ;*******************************************************************************
                      00355 ; reset vector and isrs
                      00356 ;*******************************************************************************
                      00357         ORG     0x000               ; processor reset vector
000000 EF?? F???      00358         goto    INIT                ; go to beginning of program
                      00359 
                      00360         ORG     0x008
000008 EF?? F???      00361         goto    ISR_HIGH
                      00362 
                      00363         ORG     0x018
000018 EF?? F???      00364         goto    ISR_LOW
                      00365 
00001C                00366 ISR_HIGH
                      00367         saveContext
00001C CFD8 F013          M     movff   STATUS, temp_S          ; save STATUS first
000020 6E14               M     movwf   temp_W                  ; save W
                      00368         
                      00369         ; displaying the execution time in seconds
Warning[202]: Argument out of range.  Least significant bits used.
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000022 3818           00370         swapf   OP_sec, WREG    ; 100's seconds
000024 6E17           00371         movwf   temp
000026 0E0F           00372         movlw   0x0F
000028 1617           00373         andwf   temp
00002A C017 FFE8      00374         movff   temp, WREG
00002E 0F30           00375         addlw   0x30
000030 EC?? F???      00376         call    WR_DATA
                      00377 
000034 C018 F017      00378         movff   OP_sec, temp    ; 10's seconds
000038 0E0F           00379         movlw   0x0F
00003A 1617           00380         andwf   temp            ; Temp = lower nibble of Op_sec
00003C C017 FFE8      00381         movff   temp, WREG      ; W = Temp
000040 0F30           00382         addlw   0x30            ; Convert to ASCII
000042 EC?? F???      00383         call    WR_DATA
                      00384         
Warning[202]: Argument out of range.  Least significant bits used.
000046 3819           00385         swapf   OP_INT, WREG    ;1's seconds
000048 6E17           00386         movwf   temp
00004A 0E0F           00387         movlw   0x0f
00004C 1617           00388         andwf   temp
00004E C017 FFE8      00389         movff   temp, WREG
000052 0F30           00390         addlw   0x30
000054 EC?? F???      00391         call    WR_DATA
                      00392 
000058 0E73           00393         movlw   0x73            ; Write 's'
00005A EC?? F???      00394         call    WR_DATA
00005E EC?? F???      00395         call    LCD_L2
                      00396 
                      00397         ;reset timer 
000062 0EC6           00398         movlw   0xc6
000064 6ED7           00399         movwf   TMR0H
000066 0E3E           00400         movlw   0x3e
000068 6ED6           00401         movwf   TMR0L
                      00402                 
                      00403         ;timer interrupt
00006A A4F2           00404         btfss   INTCON, TMR0IF
00006C EF?? F???      00405         goto    END_ISR_HIGH
                      00406         
                      00407         incf_BCD    OP_INT
  0000                    M         local ones, endBCD
000070 C019 F017          M         movff   OP_INT, temp
                          M         
                          M         ;process ones digit
000074 0E0F               M         movlw   0x0f
000076 1617               M         andwf   temp
000078 0E09               M         movlw   d'9'
                          M         
                          M         ;skip if ones digit is 9
00007A 6217               M         cpfseq  temp
00007C EF?? F???          M         goto    ones
                          M         
000080 0E10               M         movlw   b'00010000'
000082 2619               M         addwf   OP_INT
000084 0EF0               M         movlw   0xf0
000086 1619               M         andwf   OP_INT
000088 0EA0               M         movlw   0xa0
00008A 6019               M         cpfslt  OP_INT
                          M         
00008C 6A19               M         clrf    OP_INT
00008E EF?? F???          M         goto    endBCD
                          M         
000092                    M ones
000092 2A19               M         incf    OP_INT
000094 EF?? F???          M         goto    endBCD
000098                    M endBCD
000098 0000               M         nop
00009A 0E00           00408         movlw   d'0'
00009C 6219           00409         cpfseq  OP_INT
00009E EF?? F???      00410         goto    END_ISR_HIGH
                      00411         incf_BCD    OP_sec
  0000                    M         local ones, endBCD
0000A2 C018 F017          M         movff   OP_sec, temp
                          M         
                          M         ;process ones digit
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000A6 0E0F               M         movlw   0x0f
0000A8 1617               M         andwf   temp
0000AA 0E09               M         movlw   d'9'
                          M         
                          M         ;skip if ones digit is 9
0000AC 6217               M         cpfseq  temp
0000AE EF?? F???          M         goto    ones
                          M         
0000B2 0E10               M         movlw   b'00010000'
0000B4 2618               M         addwf   OP_sec
0000B6 0EF0               M         movlw   0xf0
0000B8 1618               M         andwf   OP_sec
0000BA 0EA0               M         movlw   0xa0
0000BC 6018               M         cpfslt  OP_sec
                          M         
0000BE 6A18               M         clrf    OP_sec
0000C0 EF?? F???          M         goto    endBCD
                          M         
0000C4                    M ones
0000C4 2A18               M         incf    OP_sec
0000C6 EF?? F???          M         goto    endBCD
0000CA                    M endBCD
0000CA 0000               M         nop
                      00412 
0000CC                00413 END_ISR_HIGH
0000CC 94F2           00414         bcf     INTCON, TMR0IF
                      00415         restoreContext
0000CE 3814               M     swapf   temp_W, W               ; restore W first
0000D0 C013 FFD8          M     movff   temp_S, STATUS          ; restore STATUS last without affecting W
0000D4 0010           00416         retfie
                      00417 
0000D6                00418 ISR_LOW
                      00419         saveContext
0000D6 CFD8 F013          M     movff   STATUS, temp_S          ; save STATUS first
0000DA 6E14               M     movwf   temp_W                  ; save W
                      00420         ; KEYPAD INTERRUPT
0000DC A0F0           00421         btfss           INTCON3, INT1IF                 ; If KEYPAD interrupt, skip return
0000DE EF?? F???      00422         goto            END_ISR_LOW
                      00423 
                      00424         ;Check operation status
                      00425 ;       movlw           0xff                                    ; If in operation, skip return
                      00426 ;       cpfseq          InExecution
                      00427 ;       goto            END_ISR_LOW
                      00428 
                      00429         ; Process KEY
0000E2 3881           00430         swapf           PORTB, W                                ; Read PORTB<7:4> into W<3:0>
0000E4 0B0F           00431         andlw           0x0f
0000E6 6E12           00432         movwf           KEY_ISR                                 ; Put W into KEY_ISR
                      00433 ;       movlw           keyS                                    ; Put keyStar into W to compare to KEY_ISR
                      00434 ;       cpfseq          KEY_ISR                                 ; If key was '*', skip return
0000E8 EF?? F???      00435         goto            END_ISR_LOW
                      00436 
                      00437         ; Reset program counter
0000EC 6AFF           00438         clrf            TOSU
0000EE 6AFE           00439         clrf            TOSH
0000F0 6AFD           00440         clrf            TOSL
                      00441 
0000F2                00442 END_ISR_LOW
0000F2 90F0           00443         bcf                     INTCON3, INT1IF         ; Clear flag for next interrupt
                      00444         restoreContext
0000F4 3814               M     swapf   temp_W, W               ; restore W first
0000F6 C013 FFD8          M     movff   temp_S, STATUS          ; restore STATUS last without affecting W
0000FA 0010           00445         retfie
                      00446 
                      00447 ;*******************************************************************************
                      00448 ; main
                      00449 ;*******************************************************************************
0000FC                00450 INIT
                      00451         ; i/o
0000FC 0EFF           00452         movlw   b'11111111'
0000FE 6E92           00453         movwf   TRISA
000100 0EFF           00454         movlw   b'11111111'
000102 6E93           00455         movwf   TRISB               ; keypad
000104 0E00           00456         movlw   b'00000000'
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000106 6E94           00457         movwf   TRISC
000108 0E00           00458         movlw   b'00000000'
00010A 6E95           00459         movwf   TRISD
00010C 0E07           00460         movlw   b'00000111'
00010E 6E96           00461         movwf   TRISE
                      00462 
                      00463         ; analog/digital pins
000110 0E0F           00464         movlw   b'00001111'     ; Set all AN pins to Digital
000112 6EC1           00465         movwf   ADCON1
                      00466 
                      00467         ; clear ports
000114 6A89           00468         clrf    LATA
000116 6A8A           00469         clrf    LATB
000118 6A8B           00470         clrf    LATC
00011A 6A8C           00471         clrf    LATD
00011C 6A8D           00472         clrf    LATE
                      00473         
00011E 0E00           00474         movlw   b'00000000'
000120 6EC2           00475         movwf   ADCON0
                      00476 ;       movlw   b'11111111'
                      00477 ;       movwf   ADCON1
                      00478         
                      00479         ; initializations
000122 EC?? F???      00480         call    InitLCD
                      00481         ConfigLCD
000126 0E28               M           movlw     b'00101000'    ; 4 bits, 2 lines,5X7 dots seems to work best instead of the above setting
000128 EC?? F???          M           call      WR_INS
                          M 
00012C 0E0C               M           movlw     b'00001100'    ; display on/off
00012E EC?? F???          M           call      WR_INS
                          M          ; movlw     B'00000110'    ; Entry mode
                          M          ; call      WR_INS
000132 0E01               M           movlw     b'00000001'    ; Clear ram
000134 EC?? F???          M           call      WR_INS
000138 EC?? F???      00482         call    RTC_INIT
00013C EC?? F???      00483         call    Delay50ms
                      00484         COLOUR_INIT
                          M         COLOUR_WRITE    0x00, 0x01 ; Enable Register (0x00), Power ON (0x01)
000140 0E00               M         movlw   0x00
000142 6E??               M         movwf   regaddress
000144 0E01               M         movlw   0x01
000146 6E??               M         movwf   databyte
000148 EC?? F???          M         call    WRITE_COLOUR_I2C
00014C EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x00, 0x02 ; Enable Register (0x00), RGBC enable (0x02)
000150 0E00               M         movlw   0x00
000152 6E??               M         movwf   regaddress
000154 0E02               M         movlw   0x02
000156 6E??               M         movwf   databyte
000158 EC?? F???          M         call    WRITE_COLOUR_I2C
00015C EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x01, 0xff ; Timing Register (0x01), 2.4ms (0xff) cycle
000160 0E01               M         movlw   0x01
000162 6E??               M         movwf   regaddress
000164 0EFF               M         movlw   0xff
000166 6E??               M         movwf   databyte
000168 EC?? F???          M         call    WRITE_COLOUR_I2C
00016C EC?? F???          M         call    delay5ms
                          M         COLOUR_WRITE    0x0f, 0x03 ; Control Register (0x0f), 60x gain (0x03)
000170 0E0F               M         movlw   0x0f
000172 6E??               M         movwf   regaddress
000174 0E03               M         movlw   0x03
000176 6E??               M         movwf   databyte
000178 EC?? F???          M         call    WRITE_COLOUR_I2C
00017C EC?? F???          M         call    delay5ms
                      00485         ;call   INIT_USART
                      00486 
                      00487         ; interrupts
000180 6AD0           00488         clrf    RCON
000182 6AF2           00489         clrf    INTCON
000184 6AF1           00490         clrf    INTCON2
000186 6AF0           00491         clrf    INTCON3
000188 8ED0           00492         bsf     RCON, IPEN          ; priority mode
00018A 8EF2           00493         bsf     INTCON, GIEH        ; permit global interrupts
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00018C 8CF2           00494         bsf     INTCON, GIEL
00018E 8AF1           00495         bsf     INTCON2, INTEDG1    ; INTEDG1 on rising edge
000190 8AF2           00496         bsf     INTCON, TMR0IE      ; clear timer0 overflow interrupt flag
000192 84F2           00497         bsf     INTCON, TMR0IF      ; clear timer0 overflow interrupt flag
000194 84F1           00498         bsf     INTCON2, TMR0IP     ; set to high priority
000196 86F0           00499         bsf     INTCON3, INT1IE
000198 9CF0           00500         bcf     INTCON3, INT1IP
                      00501         
                      00502         ; setting up timer to sychronize with 1 second clock intervals
00019A 9ED5           00503         bcf     T0CON, TMR0ON
00019C 9CD5           00504         bcf     T0CON, T08BIT
00019E 9AD5           00505         bcf     T0CON, T0CS
0001A0 98D5           00506         bcf     T0CON, T0SE
0001A2 96D5           00507         bcf     T0CON, PSA
0001A4 94D5           00508         bcf     T0CON, T0PS2        ; set prescaling to 1:16. this allows for 
0001A6 82D5           00509         bsf     T0CON, T0PS1        ; a preloading of ~50750 or 0xc63e. very
0001A8 80D5           00510         bsf     T0CON, T0PS0        ; good approximation within 3 minutes.
                      00511 
0001AA 6A21           00512         clrf    H_EE
0001AC 6A22           00513         clrf    L_EE
0001AE 6A??           00514         clrf    tens_digit
0001B0 6A??           00515         clrf    ones_digit
0001B2 6A40           00516         clrf    DETECTION_VAL
0001B4 6A41           00517         clrf    ESKA
0001B6 6A42           00518         clrf    ESKA_CAP
0001B8 6A43           00519         clrf    YOP
0001BA 6A44           00520         clrf    YOP_CAP
0001BC 6A45           00521         clrf    CLEAR+0
0001BE 6A46           00522         clrf    CLEAR+1 
0001C0 6A47           00523         clrf    RED+0
0001C2 6A48           00524         clrf    RED+1
0001C4 6A49           00525         clrf    GREEN+0
0001C6 6A4A           00526         clrf    GREEN+1
0001C8 6A4B           00527         clrf    BLUE+0
0001CA 6A4C           00528         clrf    BLUE+1
                      00529         
0001CC 0EF2           00530         movlw     b'11110010'    ; Set required keypad inputs
0001CE 6E93           00531         movwf     TRISB
                      00532         
0001D0 EC?? F???      00533         call    ClrLCD
                      00534         Display Welcome
  0000                    M         local   loop
0001D4 0E??               M         movlw   upper Welcome   ; Move Table<20:16>
0001D6 6EF8               M         movwf   TBLPTRU
0001D8 0E??               M         movlw   high Welcome    ; Move Table<15:8>
0001DA 6EF7               M         movwf   TBLPTRH
0001DC 0E??               M         movlw   low Welcome     ; Move Table<7:0>
0001DE 6EF6               M         movwf   TBLPTRL
0001E0 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0001E2 50F5               M         movf    TABLAT, W
0001E4                    M loop
0001E4 EC?? F???          M         call    WR_DATA         ; write to LCD
0001E8 000B               M         tblrd+*                 ; next row in table
0001EA 50F5               M         movf    TABLAT, W
0001EC E1??               M         bnz     loop
0001EE EC?? F???      00535         call LCD_L2
                      00536         Display Team
  0000                    M         local   loop
0001F2 0E??               M         movlw   upper Team      ; Move Table<20:16>
0001F4 6EF8               M         movwf   TBLPTRU
0001F6 0E??               M         movlw   high Team       ; Move Table<15:8>
0001F8 6EF7               M         movwf   TBLPTRH
0001FA 0E??               M         movlw   low Team        ; Move Table<7:0>
0001FC 6EF6               M         movwf   TBLPTRL
0001FE 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000200 50F5               M         movf    TABLAT, W
000202                    M loop
000202 EC?? F???          M         call    WR_DATA         ; write to LCD
000206 000B               M         tblrd+*                 ; next row in table
000208 50F5               M         movf    TABLAT, W
00020A E1??               M         bnz     loop
                      00537         
                      00538         Delay50N delayR, 0x28
  0000                    M         local   loop
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00020C 0E28               M         movlw   0x28
00020E 6E1B               M         movwf   delayR
                          M 
000210                    M loop
000210 EC?? F???          M         call    Delay50ms
000214 2E1B               M         decfsz  delayR
000216 EF?? F???          M         goto    loop
                      00539 
                      00540 ;*******************************************************************************
                      00541 ; standby mode
                      00542 ;*******************************************************************************
00021A                00543 STANDBY
00021A EC?? F???      00544         call    ClrLCD
                      00545         Display StandBy
  0000                    M         local   loop
00021E 0E??               M         movlw   upper StandBy   ; Move Table<20:16>
000220 6EF8               M         movwf   TBLPTRU
000222 0E??               M         movlw   high StandBy    ; Move Table<15:8>
000224 6EF7               M         movwf   TBLPTRH
000226 0E??               M         movlw   low StandBy     ; Move Table<7:0>
000228 6EF6               M         movwf   TBLPTRL
00022A 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
00022C 50F5               M         movf    TABLAT, W
00022E                    M loop
00022E EC?? F???          M         call    WR_DATA         ; write to LCD
000232 000B               M         tblrd+*                 ; next row in table
000234 50F5               M         movf    TABLAT, W
000236 E1??               M         bnz     loop
                      00546 
000238                00547 HOLD_STANDBY
000238 EC?? F???      00548         call    READ_KEY_TIME
                      00549         ChangeMode  key1, COLOUR_TEST
  0000                    M         local Next, Exit
                          M 
00023C 0E00               M         movlw   key1                ; poll for mode
00023E 6210               M         cpfseq  KEY                 ; check this against key press
000240 EF?? F???          M         goto    Exit
                          M 
000244                    M Next
000244 6A89               M         clrf    LATA                ; clear pins before proceeding
000246 6A8A               M         clrf    LATB
000248 6A8B               M         clrf    LATC
00024A 6A8C               M         clrf    LATD
00024C EF?? F???          M         goto    COLOUR_TEST
                          M 
000250                    M Exit
000250 0000               M         nop
                      00550         ChangeMode  key2, STEP_TEST
  0000                    M         local Next, Exit
                          M 
000252 0E01               M         movlw   key2                ; poll for mode
000254 6210               M         cpfseq  KEY                 ; check this against key press
000256 EF?? F???          M         goto    Exit
                          M 
00025A                    M Next
00025A 6A89               M         clrf    LATA                ; clear pins before proceeding
00025C 6A8A               M         clrf    LATB
00025E 6A8B               M         clrf    LATC
000260 6A8C               M         clrf    LATD
000262 EF?? F???          M         goto    STEP_TEST
                          M 
000266                    M Exit
000266 0000               M         nop
                      00551         ChangeMode  key3, IR_TEST
  0000                    M         local Next, Exit
                          M 
000268 0E02               M         movlw   key3                ; poll for mode
00026A 6210               M         cpfseq  KEY                 ; check this against key press
00026C EF?? F???          M         goto    Exit
                          M 
000270                    M Next
000270 6A89               M         clrf    LATA                ; clear pins before proceeding
000272 6A8A               M         clrf    LATB
000274 6A8B               M         clrf    LATC
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000276 6A8C               M         clrf    LATD
000278 EF?? F???          M         goto    IR_TEST
                          M 
00027C                    M Exit
00027C 0000               M         nop
                      00552         ChangeMode  keyA, EXECUTION
  0000                    M         local Next, Exit
                          M 
00027E 0E03               M         movlw   keyA                ; poll for mode
000280 6210               M         cpfseq  KEY                 ; check this against key press
000282 EF?? F???          M         goto    Exit
                          M 
000286                    M Next
000286 6A89               M         clrf    LATA                ; clear pins before proceeding
000288 6A8A               M         clrf    LATB
00028A 6A8B               M         clrf    LATC
00028C 6A8C               M         clrf    LATD
00028E EF?? F???          M         goto    EXECUTION
                          M 
000292                    M Exit
000292 0000               M         nop
                      00553         ChangeMode  keyB, LOG
  0000                    M         local Next, Exit
                          M 
000294 0E07               M         movlw   keyB                ; poll for mode
000296 6210               M         cpfseq  KEY                 ; check this against key press
000298 EF?? F???          M         goto    Exit
                          M 
00029C                    M Next
00029C 6A89               M         clrf    LATA                ; clear pins before proceeding
00029E 6A8A               M         clrf    LATB
0002A0 6A8B               M         clrf    LATC
0002A2 6A8C               M         clrf    LATD
0002A4 EF?? F???          M         goto    LOG
                          M 
0002A8                    M Exit
0002A8 0000               M         nop
                      00554         ChangeMode  keyC, PERM_LOG
  0000                    M         local Next, Exit
                          M 
0002AA 0E0B               M         movlw   keyC                ; poll for mode
0002AC 6210               M         cpfseq  KEY                 ; check this against key press
0002AE EF?? F???          M         goto    Exit
                          M 
0002B2                    M Next
0002B2 6A89               M         clrf    LATA                ; clear pins before proceeding
0002B4 6A8A               M         clrf    LATB
0002B6 6A8B               M         clrf    LATC
0002B8 6A8C               M         clrf    LATD
0002BA EF?? F???          M         goto    PERM_LOG
                          M 
0002BE                    M Exit
0002BE 0000               M         nop
                      00555         ChangeMode  keyD, PC_MODE
  0000                    M         local Next, Exit
                          M 
0002C0 0E0F               M         movlw   keyD                ; poll for mode
0002C2 6210               M         cpfseq  KEY                 ; check this against key press
0002C4 EF?? F???          M         goto    Exit
                          M 
0002C8                    M Next
0002C8 6A89               M         clrf    LATA                ; clear pins before proceeding
0002CA 6A8A               M         clrf    LATB
0002CC 6A8B               M         clrf    LATC
0002CE 6A8C               M         clrf    LATD
0002D0 EF?? F???          M         goto    PC_MODE
                          M 
0002D4                    M Exit
0002D4 0000               M         nop
0002D6 D???           00556         bra     HOLD_STANDBY
                      00557 
                      00558 ;*******************************************************************************
                      00559 ; execution mode
                      00560 ;*******************************************************************************
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00561 
0002D8                00562 IR_TEST
0002D8 0E63           00563         movlw   'c'
0002DA B080           00564         btfsc   PORTA, 0
0002DC 0E6E           00565         movlw   'n'
0002DE EC?? F???      00566         call    WR_DATA
                      00567         Delay50N delayR, 0x14
  0000                    M         local   loop
0002E2 0E14               M         movlw   0x14
0002E4 6E1B               M         movwf   delayR
                          M 
0002E6                    M loop
0002E6 EC?? F???          M         call    Delay50ms
0002EA 2E1B               M         decfsz  delayR
0002EC EF?? F???          M         goto    loop
0002F0 EC?? F???      00568         call    ClrLCD
                      00569         Delay50N delayR, 0x14
  0000                    M         local   loop
0002F4 0E14               M         movlw   0x14
0002F6 6E1B               M         movwf   delayR
                          M 
0002F8                    M loop
0002F8 EC?? F???          M         call    Delay50ms
0002FC 2E1B               M         decfsz  delayR
0002FE EF?? F???          M         goto    loop
Warning[203]: Found opcode in column 1. (bra)
000302 D???           00570 bra IR_TEST
                      00571         
000304                00572 STEP_TEST
000304 0E03           00573         movlw   b'00000011'
000306 6E83           00574         movwf   PORTD
000308 EC?? F???      00575         call    delay5ms
                      00576         
00030C 0E06           00577         movlw   b'00000110'
00030E 6E83           00578         movwf   PORTD
000310 EC?? F???      00579         call    delay5ms
                      00580         
000314 0E0C           00581         movlw   b'00001100'
000316 6E83           00582         movwf   PORTD
000318 EC?? F???      00583         call    delay5ms
                      00584 
00031C 0E09           00585         movlw   b'00001001'
00031E 6E83           00586         movwf   PORTD
000320 EC?? F???      00587         call    delay5ms
                      00588 
000324 D???           00589         bra STEP_TEST
                      00590         
000326                00591 CHECK_CLEAR
                      00592         SUB16   CLEAR, RED                  ; check first against red
  0000                    M         local   RESULTS
000326 C048 FFE8          M         movff   RED+1, WREG ; move high y into working register
00032A 5C46               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
00032C A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00032E EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000332 C047 FFE8          M         movff   RED+0, WREG
000336 5C45               M         subwf   CLEAR+0, 0 
000338                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000338 A0D8           00593         btfss   STATUS, C
00033A 0012           00594         return                              ; RED > CLEAR
                      00595         
                      00596         SUB16   CLEAR, GREEN                ; check against green
  0000                    M         local   RESULTS
00033C C04A FFE8          M         movff   GREEN+1, WREG ; move high y into working register
000340 5C46               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
000342 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000344 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000348 C049 FFE8          M         movff   GREEN+0, WREG
00034C 5C45               M         subwf   CLEAR+0, 0 
00034E                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
00034E A0D8           00597         btfss   STATUS, C
000350 0012           00598         return                              ; GREEN > CLEAR
                      00599         
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00600         SUB16   CLEAR, BLUE                 ; check against blue
  0000                    M         local   RESULTS
000352 C04C FFE8          M         movff   BLUE+1, WREG ; move high y into working register
000356 5C46               M         subwf   CLEAR+1, 0  ; do subtraction xH - yH => w
000358 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00035A EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00035E C04B FFE8          M         movff   BLUE+0, WREG
000362 5C45               M         subwf   CLEAR+0, 0 
000364                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000364 A0D8           00601         btfss   STATUS, C
000366 0012           00602         return                              ; BLUE > CLEAR
                      00603         
000368 0E63           00604         movlw   'c'                         ; CLEAR > everything else
00036A EC?? F???      00605         call    WR_DATA
00036E D???           00606         bra     LOOPING
000370                00607 CHECK_RED
                      00608         SUB16   RED, CLEAR                  ; check first against clear
  0000                    M         local   RESULTS
000370 C046 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
000374 5C48               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
000376 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000378 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00037C C045 FFE8          M         movff   CLEAR+0, WREG
000380 5C47               M         subwf   RED+0, 0 
000382                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000382 A0D8           00609         btfss   STATUS, C
000384 0012           00610         return                              ; CLEAR > RED
                      00611         
                      00612         SUB16   RED, GREEN                  ; check against green
  0000                    M         local   RESULTS
000386 C04A FFE8          M         movff   GREEN+1, WREG ; move high y into working register
00038A 5C48               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
00038C A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00038E EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000392 C049 FFE8          M         movff   GREEN+0, WREG
000396 5C47               M         subwf   RED+0, 0 
000398                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000398 A0D8           00613         btfss   STATUS, C
00039A 0012           00614         return                              ; GREEN > RED
                      00615         
                      00616         SUB16   RED, BLUE                   ; check against blue
  0000                    M         local   RESULTS
00039C C04C FFE8          M         movff   BLUE+1, WREG ; move high y into working register
0003A0 5C48               M         subwf   RED+1, 0    ; do subtraction xH - yH => w
0003A2 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003A4 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003A8 C04B FFE8          M         movff   BLUE+0, WREG
0003AC 5C47               M         subwf   RED+0, 0 
0003AE                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003AE A0D8           00617         btfss   STATUS, C
0003B0 0012           00618         return                              ; BLUE > RED
                      00619         
0003B2 0E72           00620         movlw   'r'                         ; RED > everything else
0003B4 EC?? F???      00621         call    WR_DATA
0003B8 D???           00622         bra     LOOPING
0003BA                00623 CHECK_GREEN
                      00624         SUB16   GREEN, CLEAR                ; check first against clear
  0000                    M         local   RESULTS
0003BA C046 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
0003BE 5C4A               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
0003C0 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003C2 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003C6 C045 FFE8          M         movff   CLEAR+0, WREG
0003CA 5C49               M         subwf   GREEN+0, 0 
0003CC                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003CC A0D8           00625         btfss   STATUS, C
0003CE 0012           00626         return                              ; CLEAR > GREEN
                      00627         
                      00628         SUB16   GREEN, RED                  ; check against red
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M         local   RESULTS
0003D0 C048 FFE8          M         movff   RED+1, WREG ; move high y into working register
0003D4 5C4A               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
0003D6 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003D8 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003DC C047 FFE8          M         movff   RED+0, WREG
0003E0 5C49               M         subwf   GREEN+0, 0 
0003E2                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003E2 A0D8           00629         btfss   STATUS, C
0003E4 0012           00630         return                              ; RED > GREEN
                      00631         
                      00632         SUB16   GREEN, BLUE                 ; check against blue
  0000                    M         local   RESULTS
0003E6 C04C FFE8          M         movff   BLUE+1, WREG ; move high y into working register
0003EA 5C4A               M         subwf   GREEN+1, 0  ; do subtraction xH - yH => w
0003EC A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
0003EE EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
0003F2 C04B FFE8          M         movff   BLUE+0, WREG
0003F6 5C49               M         subwf   GREEN+0, 0 
0003F8                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
0003F8 A0D8           00633         btfss   STATUS, C
0003FA 0012           00634         return                              ; BLUE > GREEN
                      00635         
0003FC 0E67           00636         movlw   'g'                         ; GREEN > everything else
0003FE EC?? F???      00637         call    WR_DATA
000402 D???           00638         bra     LOOPING
000404                00639 CHECK_BLUE
                      00640         SUB16   BLUE, CLEAR                 ; check first against clear
  0000                    M         local   RESULTS
000404 C046 FFE8          M         movff   CLEAR+1, WREG ; move high y into working register
000408 5C4C               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
00040A A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
00040C EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000410 C045 FFE8          M         movff   CLEAR+0, WREG
000414 5C4B               M         subwf   BLUE+0, 0 
000416                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000416 A0D8           00641         btfss   STATUS, C
000418 0012           00642         return                              ; CLEAR > BLUE
                      00643         
                      00644         SUB16   BLUE, RED                   ; check against red
  0000                    M         local   RESULTS
00041A C048 FFE8          M         movff   RED+1, WREG ; move high y into working register
00041E 5C4C               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
000420 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000422 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
000426 C047 FFE8          M         movff   RED+0, WREG
00042A 5C4B               M         subwf   BLUE+0, 0 
00042C                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
00042C A0D8           00645         btfss   STATUS, C
00042E 0012           00646         return                              ; RED > BLUE
                      00647 
                      00648         SUB16   BLUE, GREEN                 ; check against green
  0000                    M         local   RESULTS
000430 C04A FFE8          M         movff   GREEN+1, WREG ; move high y into working register
000434 5C4C               M         subwf   BLUE+1, 0   ; do subtraction xH - yH => w
000436 A4D8               M         btfss   STATUS, Z   ; check if subtraction is zero (if Z=1)
000438 EF?? F???          M         goto    RESULTS     ; if it is, need to check lower bytes (so skip this)
                          M         
00043C C049 FFE8          M         movff   GREEN+0, WREG
000440 5C4B               M         subwf   BLUE+0, 0 
000442                    M RESULTS                     ; if... x=y => z=1, x<y => c=0, x>=y => c=1
000442 A0D8           00649         btfss   STATUS, C
000444 0012           00650         return                              ; GREEN > CLEAR
                      00651         
000446 0E62           00652         movlw   'b'                         ; BLUE > everything else
000448 EC?? F???      00653         call    WR_DATA
00044C 0012           00654         return
                      00655         
00044E                00656 COLOUR_TEST
                      00657 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00044E                00658 LOOPING
                      00659         Delay50N delayR, 0x28
  0000                    M         local   loop
00044E 0E28               M         movlw   0x28
000450 6E1B               M         movwf   delayR
                          M 
000452                    M loop
000452 EC?? F???          M         call    Delay50ms
000456 2E1B               M         decfsz  delayR
000458 EF?? F???          M         goto    loop
00045C EC?? F???      00660         call    ClrLCD
000460 0E77           00661         movlw   'w'
000462 EC?? F???      00662         call    WR_DATA
                      00663         Delay50N delayR, 0x28
  0000                    M         local   loop
000466 0E28               M         movlw   0x28
000468 6E1B               M         movwf   delayR
                          M 
00046A                    M loop
00046A EC?? F???          M         call    Delay50ms
00046E 2E1B               M         decfsz  delayR
000470 EF?? F???          M         goto    loop
000474 EC?? F???      00664         call    ClrLCD
                      00665         
000478 EC?? F???      00666         call READ_ARDUINO
00047C EC?? F???      00667         call    WR_DATA
                      00668         
                      00669 ;       COLOUR_GET_DATA CLEAR, RED, GREEN, BLUE
                      00670 ;       Delay50N delayR, 0x02
                      00671         
                      00672 ;       movlw   0x01            ;testing
                      00673 ;       movwf   CLEAR+1
                      00674 ;       movlw   0x06
                      00675 ;       movwf   GREEN+0
                      00676 ;       movlw   0x03
                      00677 ;       movwf   RED+0
                      00678 ;       movlw   0x01
                      00679 ;       movwf   BLUE+0
                      00680         
                      00681 ;       movlw   d'0'
                      00682 ;       cpfseq  RED+0
                      00683 ;       movlw   'w'
                      00684 ;       call    WR_DATA
                      00685 
                      00686         ;call   CHECK_CLEAR
                      00687 ;       call    CHECK_RED
                      00688 ;       call    CHECK_GREEN
                      00689 ;       call    CHECK_BLUE
000480 D???           00690         bra LOOPING
                      00691         
000482                00692 EXECUTION
000482 EC?? F???      00693         call        ClearEEPROM_21
                      00694         ; save the starting time
000486 EC?? F???      00695         call        SAVE_TIME
                      00696                 
                      00697         ; display
00048A 681F           00698         setf        inExecution
00048C EC?? F???      00699         call        ClrLCD
                      00700         Display     Exe1
  0000                    M         local   loop
000490 0E??               M         movlw   upper Exe1      ; Move Table<20:16>
000492 6EF8               M         movwf   TBLPTRU
000494 0E??               M         movlw   high Exe1       ; Move Table<15:8>
000496 6EF7               M         movwf   TBLPTRH
000498 0E??               M         movlw   low Exe1        ; Move Table<7:0>
00049A 6EF6               M         movwf   TBLPTRL
00049C 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
00049E 50F5               M         movf    TABLAT, W
0004A0                    M loop
0004A0 EC?? F???          M         call    WR_DATA         ; write to LCD
0004A4 000B               M         tblrd+*                 ; next row in table
0004A6 50F5               M         movf    TABLAT, W
0004A8 E1??               M         bnz     loop
0004AA EC?? F???      00701         call        LCD_L2
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0004AE 0EC5           00702         movlw       0xc5                    ; setting up timer
0004B0 6ED7           00703         movwf       TMR0H
0004B2 0E44           00704         movlw       0x44    
0004B4 6ED6           00705         movwf       TMR0L
                      00706         
0004B6 8ED5           00707         bsf         T0CON, TMR0ON           ; turning on timer
                      00708         ; initialize variables
0004B8 6A18           00709         clrf        OP_sec
0004BA 6A19           00710         clrf        OP_INT
                      00711         
0004BC 6A41           00712         clrf        ESKA
0004BE 6A42           00713         clrf        ESKA_CAP
0004C0 6A43           00714         clrf        YOP
0004C2 6A44           00715         clrf        YOP_CAP
                      00716         
0004C4 6A45           00717         clrf        CLEAR
0004C6 6A46           00718         clrf        CLEAR+1     
0004C8 6A47           00719         clrf        RED
0004CA 6A48           00720         clrf        RED+1
0004CC 6A49           00721         clrf        GREEN
0004CE 6A4A           00722         clrf        GREEN+1
0004D0 6A4B           00723         clrf        BLUE
0004D2 6A4C           00724         clrf        BLUE+1
                      00725         
                      00726 ;COLLECTIONS_STEP
                      00727 ;       
                      00728 ;TERM_CHECK
                      00729 ;       
                      00730 ;BOTTLE_CHECK
                      00731 ;
                      00732 ;COLOUR_ONE
                      00733 ;
                      00734 ;COLOUR_TWO
                      00735 ;       
                      00736 ;BRAINS
                      00737 ;       
                      00738 ;TRAY_STEP
                      00739 ;       
                      00740 
0004D4                00741 HOLD_EXE
0004D4 EC?? F???      00742         call        READ_KEY
                      00743         ChangeMode  keyS, EXIT_EXE
  0000                    M         local Next, Exit
                          M 
0004D8 0E0C               M         movlw   keyS                ; poll for mode
0004DA 6210               M         cpfseq  KEY                 ; check this against key press
0004DC EF?? F???          M         goto    Exit
                          M 
0004E0                    M Next
0004E0 6A89               M         clrf    LATA                ; clear pins before proceeding
0004E2 6A8A               M         clrf    LATB
0004E4 6A8B               M         clrf    LATC
0004E6 6A8C               M         clrf    LATD
0004E8 EF?? F???          M         goto    EXIT_EXE
                          M 
0004EC                    M Exit
0004EC 0000               M         nop
0004EE D???           00744         bra         HOLD_EXE
                      00745         
0004F0                00746 EXIT_EXE
                      00747         ; stop timer and save the execution time to eeprom
0004F0 9ED5           00748         bcf         T0CON, TMR0ON
0004F2 EC?? F???      00749         call        SAVE_EXE_TIME
                      00750                 
                      00751         ; Clear inExecution flag to stop '*' interrupts
0004F6 6A1F           00752         clrf        inExecution
                      00753         
0004F8 C041 FFE8      00754         movff       ESKA, WREG
0004FC 0F30           00755         addlw       0x30
                      00756         WriteEE     WREG, H_EE, L_EE
0004FE C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000502 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000506 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00050A B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
00050C D???               M         bra     $-2
                          M 
00050E 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000510 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000512 84A6               M         bsf     EECON1, WREN        ; enable write
000514 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000516 98A1               M         bcf     PIR2, EEIF
                          M 
000518 0E55               M         movlw   0x55
00051A 6EA7               M         movwf   EECON2              ; write 55h
00051C 0EAA               M         movlw   0xaa
00051E 6EA7               M         movwf   EECON2              ; write 0xaa
000520 82A6               M         bsf     EECON1, WR          ; begin write
000522 B2A6               M         btfsc   EECON1, WR
000524 D???               M         bra     $-2
                          M 
000526 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000528 94A6               M         bcf     EECON1, WREN        ; disable writes
00052A 2A22           00757         incf        L_EE
                      00758         
00052C C042 FFE8      00759         movff       ESKA_CAP, WREG
000530 0F30           00760         addlw       0x30
                      00761         WriteEE     WREG, H_EE, L_EE
000532 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000536 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
00053A CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
00053E B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000540 D???               M         bra     $-2
                          M 
000542 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000544 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000546 84A6               M         bsf     EECON1, WREN        ; enable write
000548 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
00054A 98A1               M         bcf     PIR2, EEIF
                          M 
00054C 0E55               M         movlw   0x55
00054E 6EA7               M         movwf   EECON2              ; write 55h
000550 0EAA               M         movlw   0xaa
000552 6EA7               M         movwf   EECON2              ; write 0xaa
000554 82A6               M         bsf     EECON1, WR          ; begin write
000556 B2A6               M         btfsc   EECON1, WR
000558 D???               M         bra     $-2
                          M 
00055A 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
00055C 94A6               M         bcf     EECON1, WREN        ; disable writes
00055E 2A22           00762         incf        L_EE
                      00763         
000560 C043 FFE8      00764         movff       YOP, WREG
000564 0F30           00765         addlw       0x30
                      00766         WriteEE     WREG, H_EE, L_EE
000566 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
00056A C022 FFA9          M         movff   L_EE, EEADR         ; Low address
00056E CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000572 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000574 D???               M         bra     $-2
                          M 
000576 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000578 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
00057A 84A6               M         bsf     EECON1, WREN        ; enable write
00057C 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
00057E 98A1               M         bcf     PIR2, EEIF
                          M 
000580 0E55               M         movlw   0x55
000582 6EA7               M         movwf   EECON2              ; write 55h
000584 0EAA               M         movlw   0xaa
000586 6EA7               M         movwf   EECON2              ; write 0xaa
000588 82A6               M         bsf     EECON1, WR          ; begin write
00058A B2A6               M         btfsc   EECON1, WR
00058C D???               M         bra     $-2
                          M 
00058E 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000590 94A6               M         bcf     EECON1, WREN        ; disable writes
000592 2A22           00767         incf        L_EE
                      00768         
000594 C044 FFE8      00769         movff       YOP_CAP, WREG
000598 0F30           00770         addlw       0x30
                      00771         WriteEE     WREG, H_EE, L_EE
00059A C021 FFAA          M         movff   H_EE, EEADRH        ; High address
00059E C022 FFA9          M         movff   L_EE, EEADR         ; Low address
0005A2 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
0005A6 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
0005A8 D???               M         bra     $-2
                          M 
0005AA 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
0005AC 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
0005AE 84A6               M         bsf     EECON1, WREN        ; enable write
0005B0 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
0005B2 98A1               M         bcf     PIR2, EEIF
                          M 
0005B4 0E55               M         movlw   0x55
0005B6 6EA7               M         movwf   EECON2              ; write 55h
0005B8 0EAA               M         movlw   0xaa
0005BA 6EA7               M         movwf   EECON2              ; write 0xaa
0005BC 82A6               M         bsf     EECON1, WR          ; begin write
0005BE B2A6               M         btfsc   EECON1, WR
0005C0 D???               M         bra     $-2
                          M 
0005C2 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
0005C4 94A6               M         bcf     EECON1, WREN        ; disable writes
0005C6 2A22           00772         incf        L_EE
                      00773         
0005C8 EF?? F???      00774         goto        SaveData
                      00775 
0005CC                00776 SaveData
0005CC EC?? F???      00777         call        ClrLCD
                      00778         Display     SAVE
  0000                    M         local   loop
0005D0 0E??               M         movlw   upper SAVE      ; Move Table<20:16>
0005D2 6EF8               M         movwf   TBLPTRU
0005D4 0E??               M         movlw   high SAVE       ; Move Table<15:8>
0005D6 6EF7               M         movwf   TBLPTRH
0005D8 0E??               M         movlw   low SAVE        ; Move Table<7:0>
0005DA 6EF6               M         movwf   TBLPTRL
0005DC 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0005DE 50F5               M         movf    TABLAT, W
0005E0                    M loop
0005E0 EC?? F???          M         call    WR_DATA         ; write to LCD
0005E4 000B               M         tblrd+*                 ; next row in table
0005E6 50F5               M         movf    TABLAT, W
0005E8 E1??               M         bnz     loop
                      00779 
0005EA 0E00           00780         movlw       d'0'
0005EC 6E21           00781         movwf       H_EE
0005EE 0EA8           00782         movlw       d'168'              ; take d'168' as last
0005F0 6E22           00783         movwf       L_EE
0005F2 0E00           00784         movlw       d'0'
0005F4 6E24           00785         movwf       tempH_EE
0005F6 0EDC           00786         movlw       d'220'              ; temp for low constant
0005F8 6E25           00787         movwf       tempL_EE
                      00788         
0005FA 6A16           00789         clrf        counter2
0005FC 6A15           00790         clrf        counter
                      00791         
0005FE                00792 ShiftLoop
0005FE 2A15           00793         incf            counter
                      00794         READEE          REG_EE, H_EE, L_EE
000600 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000604 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000608 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
00060A 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
00060C 80A6               M         bsf     EECON1, RD          ; read EEPROM
00060E CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000612 0E15           00795         movlw           d'21'
000614 2622           00796         addwf           L_EE
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00797         WriteEE         REG_EE, H_EE, L_EE
000616 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
00061A C022 FFA9          M         movff   L_EE, EEADR         ; Low address
00061E C023 FFA8          M         movff   REG_EE, EEDATA      ; set word
                          M 
000622 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000624 D???               M         bra     $-2
                          M 
000626 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000628 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
00062A 84A6               M         bsf     EECON1, WREN        ; enable write
00062C 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
00062E 98A1               M         bcf     PIR2, EEIF
                          M 
000630 0E55               M         movlw   0x55
000632 6EA7               M         movwf   EECON2              ; write 55h
000634 0EAA               M         movlw   0xaa
000636 6EA7               M         movwf   EECON2              ; write 0xaa
000638 82A6               M         bsf     EECON1, WR          ; begin write
00063A B2A6               M         btfsc   EECON1, WR
00063C D???               M         bra     $-2
                          M 
00063E 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000640 94A6               M         bcf     EECON1, WREN        ; disable writes
000642 0E14           00798         movlw           d'20'
000644 5E22           00799         subwf           L_EE
000646 0E15           00800         movlw           d'21'
000648 6215           00801         cpfseq          counter
00064A EF?? F???      00802         goto            ShiftLoop
                      00803         
                      00804         ; Set EEPROM address to the previous 21 byte block, and reset temp address
00064E 0E2A           00805         movlw           d'42'
000650 5E22           00806         subwf           L_EE
000652 0EDC           00807         movlw           d'220'
000654 6E25           00808         movwf           tempL_EE
000656 6A15           00809         clrf            counter
000658 2A16           00810         incf            counter2
00065A 0E09           00811         movlw           d'9'
00065C 6216           00812         cpfseq          counter2        ; Skip if 9 shifts were made
00065E EF?? F???      00813         goto            ShiftLoop
                      00814 
000662 EF?? F???      00815         goto            LOG
                      00816 
                      00817 ;*******************************************************************************
                      00818 ; sorting statistics log mode
                      00819 ;*******************************************************************************
                      00820         
000666                00821 LOG
000666 EC?? F???      00822         call    ClrLCD
                      00823         Display Log1
  0000                    M         local   loop
00066A 0E??               M         movlw   upper Log1      ; Move Table<20:16>
00066C 6EF8               M         movwf   TBLPTRU
00066E 0E??               M         movlw   high Log1       ; Move Table<15:8>
000670 6EF7               M         movwf   TBLPTRH
000672 0E??               M         movlw   low Log1        ; Move Table<7:0>
000674 6EF6               M         movwf   TBLPTRL
000676 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000678 50F5               M         movf    TABLAT, W
00067A                    M loop
00067A EC?? F???          M         call    WR_DATA         ; write to LCD
00067E 000B               M         tblrd+*                 ; next row in table
000680 50F5               M         movf    TABLAT, W
000682 E1??               M         bnz     loop
                      00824 
                      00825         ; display most recent run data
000684 0E0A           00826         movlw   d'10'
000686 6E22           00827         movwf   L_EE
                      00828 ;       READEE  OP_sec, H_EE, L_EE
                      00829 ;       incf    L_EE
                      00830 ;       READEE  OP_INT, H_EE, L_EE
                      00831 ;       incf    L_EE
000688 EC?? F???      00832         call    DisplayExeTime
                      00833 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00068C EC?? F???      00834         call    LCD_L2
000690 6A22           00835         clrf    L_EE
000692 EC?? F???      00836         call    DispOpRTC
                      00837 
000696                00838 HOLD_LOG
000696 EC?? F???      00839         call    READ_KEY
                      00840         ChangeMode  keyB, LOG_INFO
  0000                    M         local Next, Exit
                          M 
00069A 0E07               M         movlw   keyB                ; poll for mode
00069C 6210               M         cpfseq  KEY                 ; check this against key press
00069E EF?? F???          M         goto    Exit
                          M 
0006A2                    M Next
0006A2 6A89               M         clrf    LATA                ; clear pins before proceeding
0006A4 6A8A               M         clrf    LATB
0006A6 6A8B               M         clrf    LATC
0006A8 6A8C               M         clrf    LATD
0006AA EF?? F???          M         goto    LOG_INFO
                          M 
0006AE                    M Exit
0006AE 0000               M         nop
                      00841         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
0006B0 0E0D               M         movlw   key0                ; poll for mode
0006B2 6210               M         cpfseq  KEY                 ; check this against key press
0006B4 EF?? F???          M         goto    Exit
                          M 
0006B8                    M Next
0006B8 6A89               M         clrf    LATA                ; clear pins before proceeding
0006BA 6A8A               M         clrf    LATB
0006BC 6A8B               M         clrf    LATC
0006BE 6A8C               M         clrf    LATD
0006C0 EF?? F???          M         goto    STANDBY
                          M 
0006C4                    M Exit
0006C4 0000               M         nop
0006C6 D???           00842         bra     HOLD_LOG
                      00843 
0006C8                00844 LOG_INFO
0006C8 EC?? F???      00845         call    ClrLCD
                      00846         Display LogInfo1
  0000                    M         local   loop
0006CC 0E??               M         movlw   upper LogInfo1  ; Move Table<20:16>
0006CE 6EF8               M         movwf   TBLPTRU
0006D0 0E??               M         movlw   high LogInfo1   ; Move Table<15:8>
0006D2 6EF7               M         movwf   TBLPTRH
0006D4 0E??               M         movlw   low LogInfo1    ; Move Table<7:0>
0006D6 6EF6               M         movwf   TBLPTRL
0006D8 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0006DA 50F5               M         movf    TABLAT, W
0006DC                    M loop
0006DC EC?? F???          M         call    WR_DATA         ; write to LCD
0006E0 000B               M         tblrd+*                 ; next row in table
0006E2 50F5               M         movf    TABLAT, W
0006E4 E1??               M         bnz     loop
0006E6 EC?? F???      00847         call    LCD_L2
                      00848         Display LogInfo2
  0000                    M         local   loop
0006EA 0E??               M         movlw   upper LogInfo2  ; Move Table<20:16>
0006EC 6EF8               M         movwf   TBLPTRU
0006EE 0E??               M         movlw   high LogInfo2   ; Move Table<15:8>
0006F0 6EF7               M         movwf   TBLPTRH
0006F2 0E??               M         movlw   low LogInfo2    ; Move Table<7:0>
0006F4 6EF6               M         movwf   TBLPTRL
0006F6 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
0006F8 50F5               M         movf    TABLAT, W
0006FA                    M loop
0006FA EC?? F???          M         call    WR_DATA         ; write to LCD
0006FE 000B               M         tblrd+*                 ; next row in table
000700 50F5               M         movf    TABLAT, W
000702 E1??               M         bnz     loop
000704 6A21           00849         clrf    H_EE
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000706 6A22           00850         clrf    L_EE
                      00851         ;DisplayLog  H_EE, L_EE
000708                00852 HOLD_LOG_INFO
000708 EC?? F???      00853         call    READ_KEY
                      00854         ChangeMode key0, LOG
  0000                    M         local Next, Exit
                          M 
00070C 0E0D               M         movlw   key0                ; poll for mode
00070E 6210               M         cpfseq  KEY                 ; check this against key press
000710 EF?? F???          M         goto    Exit
                          M 
000714                    M Next
000714 6A89               M         clrf    LATA                ; clear pins before proceeding
000716 6A8A               M         clrf    LATB
000718 6A8B               M         clrf    LATC
00071A 6A8C               M         clrf    LATD
00071C EF?? F???          M         goto    LOG
                          M 
000720                    M Exit
000720 0000               M         nop
000722 D???           00855         bra     HOLD_LOG
                      00856         
                      00857 ;*******************************************************************************
                      00858 ; permanent logs
                      00859 ;*******************************************************************************
                      00860 
000724                00861 PERM_LOG
000724 EC?? F???      00862         call    ClrLCD
                      00863         Display PermLog1
  0000                    M         local   loop
000728 0E??               M         movlw   upper PermLog1  ; Move Table<20:16>
00072A 6EF8               M         movwf   TBLPTRU
00072C 0E??               M         movlw   high PermLog1   ; Move Table<15:8>
00072E 6EF7               M         movwf   TBLPTRH
000730 0E??               M         movlw   low PermLog1    ; Move Table<7:0>
000732 6EF6               M         movwf   TBLPTRL
000734 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000736 50F5               M         movf    TABLAT, W
000738                    M loop
000738 EC?? F???          M         call    WR_DATA         ; write to LCD
00073C 000B               M         tblrd+*                 ; next row in table
00073E 50F5               M         movf    TABLAT, W
000740 E1??               M         bnz     loop
000742 EC?? F???      00864         call    LCD_L2
                      00865         Display PermLog2
  0000                    M         local   loop
000746 0E??               M         movlw   upper PermLog2  ; Move Table<20:16>
000748 6EF8               M         movwf   TBLPTRU
00074A 0E??               M         movlw   high PermLog2   ; Move Table<15:8>
00074C 6EF7               M         movwf   TBLPTRH
00074E 0E??               M         movlw   low PermLog2    ; Move Table<7:0>
000750 6EF6               M         movwf   TBLPTRL
000752 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000754 50F5               M         movf    TABLAT, W
000756                    M loop
000756 EC?? F???          M         call    WR_DATA         ; write to LCD
00075A 000B               M         tblrd+*                 ; next row in table
00075C 50F5               M         movf    TABLAT, W
00075E E1??               M         bnz     loop
                      00866         
000760                00867 HOLD_PERM_LOG
000760 EC?? F???      00868         call    READ_KEY
                      00869         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
000764 0E0D               M         movlw   key0                ; poll for mode
000766 6210               M         cpfseq  KEY                 ; check this against key press
000768 EF?? F???          M         goto    Exit
                          M 
00076C                    M Next
00076C 6A89               M         clrf    LATA                ; clear pins before proceeding
00076E 6A8A               M         clrf    LATB
000770 6A8B               M         clrf    LATC
000772 6A8C               M         clrf    LATD
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000774 EF?? F???          M         goto    STANDBY
                          M 
000778                    M Exit
000778 0000               M         nop
                      00870         ChangeMode  key1, PLOG
  0000                    M         local Next, Exit
                          M 
00077A 0E00               M         movlw   key1                ; poll for mode
00077C 6210               M         cpfseq  KEY                 ; check this against key press
00077E EF?? F???          M         goto    Exit
                          M 
000782                    M Next
000782 6A89               M         clrf    LATA                ; clear pins before proceeding
000784 6A8A               M         clrf    LATB
000786 6A8B               M         clrf    LATC
000788 6A8C               M         clrf    LATD
00078A EF?? F???          M         goto    PLOG
                          M 
00078E                    M Exit
00078E 0000               M         nop
                      00871         ChangeMode  key2, PLOG
  0000                    M         local Next, Exit
                          M 
000790 0E01               M         movlw   key2                ; poll for mode
000792 6210               M         cpfseq  KEY                 ; check this against key press
000794 EF?? F???          M         goto    Exit
                          M 
000798                    M Next
000798 6A89               M         clrf    LATA                ; clear pins before proceeding
00079A 6A8A               M         clrf    LATB
00079C 6A8B               M         clrf    LATC
00079E 6A8C               M         clrf    LATD
0007A0 EF?? F???          M         goto    PLOG
                          M 
0007A4                    M Exit
0007A4 0000               M         nop
                      00872         ChangeMode  key3, PLOG
  0000                    M         local Next, Exit
                          M 
0007A6 0E02               M         movlw   key3                ; poll for mode
0007A8 6210               M         cpfseq  KEY                 ; check this against key press
0007AA EF?? F???          M         goto    Exit
                          M 
0007AE                    M Next
0007AE 6A89               M         clrf    LATA                ; clear pins before proceeding
0007B0 6A8A               M         clrf    LATB
0007B2 6A8B               M         clrf    LATC
0007B4 6A8C               M         clrf    LATD
0007B6 EF?? F???          M         goto    PLOG
                          M 
0007BA                    M Exit
0007BA 0000               M         nop
                      00873         ChangeMode  key4, PLOG
  0000                    M         local Next, Exit
                          M 
0007BC 0E04               M         movlw   key4                ; poll for mode
0007BE 6210               M         cpfseq  KEY                 ; check this against key press
0007C0 EF?? F???          M         goto    Exit
                          M 
0007C4                    M Next
0007C4 6A89               M         clrf    LATA                ; clear pins before proceeding
0007C6 6A8A               M         clrf    LATB
0007C8 6A8B               M         clrf    LATC
0007CA 6A8C               M         clrf    LATD
0007CC EF?? F???          M         goto    PLOG
                          M 
0007D0                    M Exit
0007D0 0000               M         nop
                      00874         ChangeMode  key5, PLOG
  0000                    M         local Next, Exit
                          M 
0007D2 0E05               M         movlw   key5                ; poll for mode
0007D4 6210               M         cpfseq  KEY                 ; check this against key press
0007D6 EF?? F???          M         goto    Exit
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
0007DA                    M Next
0007DA 6A89               M         clrf    LATA                ; clear pins before proceeding
0007DC 6A8A               M         clrf    LATB
0007DE 6A8B               M         clrf    LATC
0007E0 6A8C               M         clrf    LATD
0007E2 EF?? F???          M         goto    PLOG
                          M 
0007E6                    M Exit
0007E6 0000               M         nop
                      00875         ChangeMode  key6, PLOG
  0000                    M         local Next, Exit
                          M 
0007E8 0E06               M         movlw   key6                ; poll for mode
0007EA 6210               M         cpfseq  KEY                 ; check this against key press
0007EC EF?? F???          M         goto    Exit
                          M 
0007F0                    M Next
0007F0 6A89               M         clrf    LATA                ; clear pins before proceeding
0007F2 6A8A               M         clrf    LATB
0007F4 6A8B               M         clrf    LATC
0007F6 6A8C               M         clrf    LATD
0007F8 EF?? F???          M         goto    PLOG
                          M 
0007FC                    M Exit
0007FC 0000               M         nop
                      00876         ChangeMode  key7, PLOG
  0000                    M         local Next, Exit
                          M 
0007FE 0E08               M         movlw   key7                ; poll for mode
000800 6210               M         cpfseq  KEY                 ; check this against key press
000802 EF?? F???          M         goto    Exit
                          M 
000806                    M Next
000806 6A89               M         clrf    LATA                ; clear pins before proceeding
000808 6A8A               M         clrf    LATB
00080A 6A8B               M         clrf    LATC
00080C 6A8C               M         clrf    LATD
00080E EF?? F???          M         goto    PLOG
                          M 
000812                    M Exit
000812 0000               M         nop
                      00877         ChangeMode  key8, PLOG
  0000                    M         local Next, Exit
                          M 
000814 0E09               M         movlw   key8                ; poll for mode
000816 6210               M         cpfseq  KEY                 ; check this against key press
000818 EF?? F???          M         goto    Exit
                          M 
00081C                    M Next
00081C 6A89               M         clrf    LATA                ; clear pins before proceeding
00081E 6A8A               M         clrf    LATB
000820 6A8B               M         clrf    LATC
000822 6A8C               M         clrf    LATD
000824 EF?? F???          M         goto    PLOG
                          M 
000828                    M Exit
000828 0000               M         nop
                      00878         ChangeMode  key9, PLOG
  0000                    M         local Next, Exit
                          M 
00082A 0E0A               M         movlw   key9                ; poll for mode
00082C 6210               M         cpfseq  KEY                 ; check this against key press
00082E EF?? F???          M         goto    Exit
                          M 
000832                    M Next
000832 6A89               M         clrf    LATA                ; clear pins before proceeding
000834 6A8A               M         clrf    LATB
000836 6A8B               M         clrf    LATC
000838 6A8C               M         clrf    LATD
00083A EF?? F???          M         goto    PLOG
                          M 
00083E                    M Exit
00083E 0000               M         nop
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000840 D???           00879         bra HOLD_PERM_LOG
                      00880         
000842                00881 PLOG
000842 EC?? F???      00882         call    ClrLCD
                      00883         Display PermLog1
  0000                    M         local   loop
000846 0E??               M         movlw   upper PermLog1  ; Move Table<20:16>
000848 6EF8               M         movwf   TBLPTRU
00084A 0E??               M         movlw   high PermLog1   ; Move Table<15:8>
00084C 6EF7               M         movwf   TBLPTRH
00084E 0E??               M         movlw   low PermLog1    ; Move Table<7:0>
000850 6EF6               M         movwf   TBLPTRL
000852 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000854 50F5               M         movf    TABLAT, W
000856                    M loop
000856 EC?? F???          M         call    WR_DATA         ; write to LCD
00085A 000B               M         tblrd+*                 ; next row in table
00085C 50F5               M         movf    TABLAT, W
00085E E1??               M         bnz     loop
                      00884         
                      00885         ; find the key press value
000860 C010 FFE8      00886         movff   KEY, WREG
000864 2AE8           00887         incf    WREG        ; W = KEY+1
000866 6E17           00888         movwf   temp
                      00889         
000868 42E8           00890         rrncf   WREG        ; division by 4
00086A 9EE8           00891         bcf     WREG, 7     ; clear last bit, overflow from rotate
00086C 42E8           00892         rrncf   WREG        
00086E 9EE8           00893         bcf     WREG, 7
000870 5E17           00894         subwf   temp        ; temp = (KEY+1) - (KEY+1)/4
000872 C017 FFE8      00895         movff   temp, WREG
000876 C017 F011      00896         movff   temp, temp_KEY
00087A 0D15           00897         mullw   d'21'       ; indexed as mutliples of 21
                      00898 
00087C                00899 displayNum
00087C C011 FFE8      00900         movff   temp_KEY, WREG
000880 0F30           00901         addlw   0x30
000882 EC?? F???      00902         call    WR_DATA
000886 0E3A           00903         movlw   ":"
000888 EC?? F???      00904         call    WR_DATA
00088C 0E20           00905         movlw   " "
00088E EC?? F???      00906         call    WR_DATA
                      00907         
000892 CFF3 F022      00908         movff   PRODL, L_EE
000896 0E00           00909         movlw   d'0'
000898 2622           00910         addwf   L_EE
                      00911         READEE  OP_sec, H_EE, L_EE
00089A C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
00089E C022 FFA9          M         movff   L_EE, EEADR         ; read to low
0008A2 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
0008A4 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
0008A6 80A6               M         bsf     EECON1, RD          ; read EEPROM
0008A8 CFA8 F018          M         movff   EEDATA, OP_sec      ; put data into file
0008AC 2A22           00912         incf    L_EE
                      00913         READEE  OP_INT, H_EE, L_EE
0008AE C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
0008B2 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
0008B6 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
0008B8 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
0008BA 80A6               M         bsf     EECON1, RD          ; read EEPROM
0008BC CFA8 F019          M         movff   EEDATA, OP_INT      ; put data into file
0008C0 2A22           00914         incf    L_EE
0008C2 EC?? F???      00915         call    DisplayExeTime
0008C6 CFF3 F022      00916         movff   PRODL, L_EE
                      00917         
                      00918         ; reset eeprom to beginning
0008CA EC?? F???      00919         call    LCD_L2
0008CE CFF3 F022      00920         movff   PRODL, L_EE
0008D2 EC?? F???      00921         call    DispOpRTC
                      00922         
0008D6                00923 HOLD_PLOG
0008D6 EC?? F???      00924         call    READ_KEY
                      00925         ChangeMode  key0, PERM_LOG      ; back to perm log menu
  0000                    M         local Next, Exit
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
0008DA 0E0D               M         movlw   key0                ; poll for mode
0008DC 6210               M         cpfseq  KEY                 ; check this against key press
0008DE EF?? F???          M         goto    Exit
                          M 
0008E2                    M Next
0008E2 6A89               M         clrf    LATA                ; clear pins before proceeding
0008E4 6A8A               M         clrf    LATB
0008E6 6A8B               M         clrf    LATC
0008E8 6A8C               M         clrf    LATD
0008EA EF?? F???          M         goto    PERM_LOG
                          M 
0008EE                    M Exit
0008EE 0000               M         nop
0008F0 D???           00926         bra HOLD_PLOG
                      00927         
                      00928 ;*******************************************************************************
                      00929 ; pc interface
                      00930 ;*******************************************************************************
                      00931 
0008F2                00932 PC_MODE
0008F2 EC?? F???      00933         call    ClrLCD
                      00934         Display PC1
  0000                    M         local   loop
0008F6 0E??               M         movlw   upper PC1       ; Move Table<20:16>
0008F8 6EF8               M         movwf   TBLPTRU
0008FA 0E??               M         movlw   high PC1        ; Move Table<15:8>
0008FC 6EF7               M         movwf   TBLPTRH
0008FE 0E??               M         movlw   low PC1         ; Move Table<7:0>
000900 6EF6               M         movwf   TBLPTRL
000902 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000904 50F5               M         movf    TABLAT, W
000906                    M loop
000906 EC?? F???          M         call    WR_DATA         ; write to LCD
00090A 000B               M         tblrd+*                 ; next row in table
00090C 50F5               M         movf    TABLAT, W
00090E E1??               M         bnz     loop
000910 EC?? F???      00935         call    LCD_L2
                      00936         Display PC2
  0000                    M         local   loop
000914 0E??               M         movlw   upper PC2       ; Move Table<20:16>
000916 6EF8               M         movwf   TBLPTRU
000918 0E??               M         movlw   high PC2        ; Move Table<15:8>
00091A 6EF7               M         movwf   TBLPTRH
00091C 0E??               M         movlw   low PC2         ; Move Table<7:0>
00091E 6EF6               M         movwf   TBLPTRL
000920 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000922 50F5               M         movf    TABLAT, W
000924                    M loop
000924 EC?? F???          M         call    WR_DATA         ; write to LCD
000928 000B               M         tblrd+*                 ; next row in table
00092A 50F5               M         movf    TABLAT, W
00092C E1??               M         bnz     loop
00092E CFF9 F03A      00937         movff   PCL, PC_PCL
000932 CFFA F03B      00938         movff   PCLATH, PC_PCLATH
000936 CFFB F03C      00939         movff   PCLATU, PC_PCLATU
                      00940         
00093A                00941 HOLD_PC
00093A EC?? F???      00942         call    READ_KEY
                      00943         ChangeMode  key0, STANDBY
  0000                    M         local Next, Exit
                          M 
00093E 0E0D               M         movlw   key0                ; poll for mode
000940 6210               M         cpfseq  KEY                 ; check this against key press
000942 EF?? F???          M         goto    Exit
                          M 
000946                    M Next
000946 6A89               M         clrf    LATA                ; clear pins before proceeding
000948 6A8A               M         clrf    LATB
00094A 6A8B               M         clrf    LATC
00094C 6A8C               M         clrf    LATD
00094E EF?? F???          M         goto    STANDBY
                          M 
000952                    M Exit
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000952 0000               M         nop
                      00944         ChangeMode  keyH, PC_TRANSFER
  0000                    M         local Next, Exit
                          M 
000954 0E0E               M         movlw   keyH                ; poll for mode
000956 6210               M         cpfseq  KEY                 ; check this against key press
000958 EF?? F???          M         goto    Exit
                          M 
00095C                    M Next
00095C 6A89               M         clrf    LATA                ; clear pins before proceeding
00095E 6A8A               M         clrf    LATB
000960 6A8B               M         clrf    LATC
000962 6A8C               M         clrf    LATD
000964 EF?? F???          M         goto    PC_TRANSFER
                          M 
000968                    M Exit
000968 0000               M         nop
00096A D???           00945         bra     HOLD_PC
                      00946 
00096C                00947 PC_TRANSFER
00096C 6839           00948         setf    transferring
00096E EC?? F???      00949         call    ClrLCD
                      00950         Display PCTransfer
  0000                    M         local   loop
000972 0E??               M         movlw   upper PCTransfer ; Move Table<20:16>
000974 6EF8               M         movwf   TBLPTRU
000976 0E??               M         movlw   high PCTransfer ; Move Table<15:8>
000978 6EF7               M         movwf   TBLPTRH
00097A 0E??               M         movlw   low PCTransfer  ; Move Table<7:0>
00097C 6EF6               M         movwf   TBLPTRL
00097E 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000980 50F5               M         movf    TABLAT, W
000982                    M loop
000982 EC?? F???          M         call    WR_DATA         ; write to LCD
000986 000B               M         tblrd+*                 ; next row in table
000988 50F5               M         movf    TABLAT, W
00098A E1??               M         bnz     loop
00098C EC?? F???      00951         call    DataUSART
000990 6A39           00952         clrf    transferring
000992 D???           00953         bra     STANDBY
                      00954         
                      00955 ;*******************************************************************************
                      00956 ; subroutines
                      00957 ;*******************************************************************************
                      00958 
000994                00959 RTC_INIT
                      00960         ; set sda and scl to high
000994 9882           00961         bcf     PORTC, 4
000996 9682           00962         bcf     PORTC, 3
000998 8894           00963         bsf     TRISC, 4
00099A 8694           00964         bsf     TRISC, 3
                      00965         
00099C EC?? F???      00966         call    i2c_common_setup
                      00967         ;call   SET_TIME
Warning[203]: Found opcode in column 1. (return)
0009A0 0012           00968 return
                      00969         
0009A2                00970 SAVE_TIME   
                      00971         rtc_read    0x02        ; hours
0009A2 0E02               M     movlw   0x02
0009A4 6E??               M     movwf   regaddress
0009A6 EC?? F???          M     call    read_rtc
0009AA C??? FFE8          M     movff   datachar, WREG
0009AE EC?? F???          M     call    rtc_convert
0009B2 EC?? F???      00972         call    WriteEE_RTC
                      00973         rtc_read    0x01        ; minutes
0009B6 0E01               M     movlw   0x01
0009B8 6E??               M     movwf   regaddress
0009BA EC?? F???          M     call    read_rtc
0009BE C??? FFE8          M     movff   datachar, WREG
0009C2 EC?? F???          M     call    rtc_convert
0009C6 EC?? F???      00974         call    WriteEE_RTC
                      00975         rtc_read    0x06        ; years
0009CA 0E06               M     movlw   0x06
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0009CC 6E??               M     movwf   regaddress
0009CE EC?? F???          M     call    read_rtc
0009D2 C??? FFE8          M     movff   datachar, WREG
0009D6 EC?? F???          M     call    rtc_convert
0009DA EC?? F???      00976         call    WriteEE_RTC
                      00977         rtc_read    0x05        ; months
0009DE 0E05               M     movlw   0x05
0009E0 6E??               M     movwf   regaddress
0009E2 EC?? F???          M     call    read_rtc
0009E6 C??? FFE8          M     movff   datachar, WREG
0009EA EC?? F???          M     call    rtc_convert
0009EE EC?? F???      00978         call    WriteEE_RTC
                      00979         rtc_read    0x04        ; days
0009F2 0E04               M     movlw   0x04
0009F4 6E??               M     movwf   regaddress
0009F6 EC?? F???          M     call    read_rtc
0009FA C??? FFE8          M     movff   datachar, WREG
0009FE EC?? F???          M     call    rtc_convert
000A02 EC?? F???      00980         call    WriteEE_RTC
Warning[203]: Found opcode in column 1. (return)
000A06 0012           00981 return
                      00982         
000A08                00983 SAVE_EXE_TIME
                      00984         
Warning[202]: Argument out of range.  Least significant bits used.
000A08 3818           00985         swapf   OP_sec, WREG    ; 100's seconds
000A0A 6E17           00986         movwf   temp
000A0C 0E0F           00987         movlw   0x0F
000A0E 1617           00988         andwf   temp
000A10 C017 FFE8      00989         movff   temp, WREG
000A14 0F30           00990         addlw   0x30    
                      00991         WriteEE WREG, H_EE, L_EE
000A16 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000A1A C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000A1E CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000A22 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000A24 D???               M         bra     $-2
                          M 
000A26 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000A28 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000A2A 84A6               M         bsf     EECON1, WREN        ; enable write
000A2C 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000A2E 98A1               M         bcf     PIR2, EEIF
                          M 
000A30 0E55               M         movlw   0x55
000A32 6EA7               M         movwf   EECON2              ; write 55h
000A34 0EAA               M         movlw   0xaa
000A36 6EA7               M         movwf   EECON2              ; write 0xaa
000A38 82A6               M         bsf     EECON1, WR          ; begin write
000A3A B2A6               M         btfsc   EECON1, WR
000A3C D???               M         bra     $-2
                          M 
000A3E 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000A40 94A6               M         bcf     EECON1, WREN        ; disable writes
000A42 2A22           00992         incf    L_EE
                      00993         
000A44 C018 F017      00994         movff   OP_sec, temp    ; 10's seconds
000A48 0E0F           00995         movlw   0x0F
000A4A 1617           00996         andwf   temp            ; Temp = lower nibble of Op_sec
000A4C C017 FFE8      00997         movff   temp, WREG      ; W = Temp
000A50 0F30           00998         addlw   0x30            ; Convert to ASCII
                      00999         WriteEE WREG, H_EE, L_EE
000A52 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000A56 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000A5A CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000A5E B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000A60 D???               M         bra     $-2
                          M 
000A62 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000A64 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000A66 84A6               M         bsf     EECON1, WREN        ; enable write
000A68 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A6A 98A1               M         bcf     PIR2, EEIF
                          M 
000A6C 0E55               M         movlw   0x55
000A6E 6EA7               M         movwf   EECON2              ; write 55h
000A70 0EAA               M         movlw   0xaa
000A72 6EA7               M         movwf   EECON2              ; write 0xaa
000A74 82A6               M         bsf     EECON1, WR          ; begin write
000A76 B2A6               M         btfsc   EECON1, WR
000A78 D???               M         bra     $-2
                          M 
000A7A 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000A7C 94A6               M         bcf     EECON1, WREN        ; disable writes
000A7E 2A22           01000         incf    L_EE
                      01001         
Warning[202]: Argument out of range.  Least significant bits used.
000A80 3819           01002         swapf   OP_INT, WREG    ;1's seconds
000A82 6E17           01003         movwf   temp
000A84 0E0F           01004         movlw   0x0f
000A86 1617           01005         andwf   temp
000A88 C017 FFE8      01006         movff   temp, WREG
000A8C 0F30           01007         addlw   0x30
                      01008         WriteEE WREG, H_EE, L_EE
000A8E C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000A92 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000A96 CFE8 FFA8          M         movff   WREG, EEDATA        ; set word
                          M 
000A9A B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000A9C D???               M         bra     $-2
                          M 
000A9E 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000AA0 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000AA2 84A6               M         bsf     EECON1, WREN        ; enable write
000AA4 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000AA6 98A1               M         bcf     PIR2, EEIF
                          M 
000AA8 0E55               M         movlw   0x55
000AAA 6EA7               M         movwf   EECON2              ; write 55h
000AAC 0EAA               M         movlw   0xaa
000AAE 6EA7               M         movwf   EECON2              ; write 0xaa
000AB0 82A6               M         bsf     EECON1, WR          ; begin write
000AB2 B2A6               M         btfsc   EECON1, WR
000AB4 D???               M         bra     $-2
                          M 
000AB6 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000AB8 94A6               M         bcf     EECON1, WREN        ; disable writes
000ABA 2A22           01009         incf    L_EE
Warning[203]: Found opcode in column 1. (return)
000ABC 0012           01010 return
                      01011         
                      01012                 
000ABE                01013 DISPLAY_RTC     
                      01014         ; display data in this format hh/minmin/yy yy/mm/dd
                      01015         rtc_read    0x02            ; 0x02 from DS1307 - hours
000ABE 0E02               M     movlw   0x02
000AC0 6E??               M     movwf   regaddress
000AC2 EC?? F???          M     call    read_rtc
000AC6 C??? FFE8          M     movff   datachar, WREG
000ACA EC?? F???          M     call    rtc_convert
000ACE C??? FFE8      01016         movff   tens_digit,WREG
000AD2 EC?? F???      01017         call    WR_DATA
000AD6 C??? FFE8      01018         movff   ones_digit,WREG
000ADA EC?? F???      01019         call    WR_DATA
000ADE 0E68           01020         movlw   "h"
000AE0 EC?? F???      01021         call    WR_DATA
                      01022         
                      01023         rtc_read    0x01            ; 0x01 from DS1307 - minutes
000AE4 0E01               M     movlw   0x01
000AE6 6E??               M     movwf   regaddress
000AE8 EC?? F???          M     call    read_rtc
000AEC C??? FFE8          M     movff   datachar, WREG
000AF0 EC?? F???          M     call    rtc_convert
000AF4 C??? FFE8      01024         movff   tens_digit,WREG
000AF8 EC?? F???      01025         call    WR_DATA
000AFC C??? FFE8      01026         movff   ones_digit,WREG
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000B00 EC?? F???      01027         call    WR_DATA
                      01028         
                      01029         rtc_read    0x00            ; 0x00 from DS1307 - seconds
000B04 0E00               M     movlw   0x00
000B06 6E??               M     movwf   regaddress
000B08 EC?? F???          M     call    read_rtc
000B0C C??? FFE8          M     movff   datachar, WREG
000B10 EC?? F???          M     call    rtc_convert
000B14 C??? FFE8      01030         movff   tens_digit,WREG
000B18 EC?? F???      01031         call    WR_DATA
000B1C C??? FFE8      01032         movff   ones_digit,WREG
000B20 EC?? F???      01033         call    WR_DATA
000B24 0E20           01034         movlw   " "
000B26 EC?? F???      01035         call    WR_DATA
                      01036         
                      01037         rtc_read    0x06            ; 0x06 from DS1307 - years
000B2A 0E06               M     movlw   0x06
000B2C 6E??               M     movwf   regaddress
000B2E EC?? F???          M     call    read_rtc
000B32 C??? FFE8          M     movff   datachar, WREG
000B36 EC?? F???          M     call    rtc_convert
000B3A C??? FFE8      01038         movff   tens_digit,WREG
000B3E EC?? F???      01039         call    WR_DATA
000B42 C??? FFE8      01040         movff   ones_digit,WREG
000B46 EC?? F???      01041         call    WR_DATA
000B4A 0E2F           01042         movlw   "/"
000B4C EC?? F???      01043         call    WR_DATA
                      01044         
                      01045         rtc_read    0x05            ; 0x05 from DS1307 - months
000B50 0E05               M     movlw   0x05
000B52 6E??               M     movwf   regaddress
000B54 EC?? F???          M     call    read_rtc
000B58 C??? FFE8          M     movff   datachar, WREG
000B5C EC?? F???          M     call    rtc_convert
000B60 C??? FFE8      01046         movff   tens_digit,WREG
000B64 EC?? F???      01047         call    WR_DATA
000B68 C??? FFE8      01048         movff   ones_digit,WREG
000B6C EC?? F???      01049         call    WR_DATA
000B70 0E2F           01050         movlw   "/"
000B72 EC?? F???      01051         call    WR_DATA
                      01052         
                      01053         rtc_read    0x04            ; 0x04 from DS1307 - days
000B76 0E04               M     movlw   0x04
000B78 6E??               M     movwf   regaddress
000B7A EC?? F???          M     call    read_rtc
000B7E C??? FFE8          M     movff   datachar, WREG
000B82 EC?? F???          M     call    rtc_convert
000B86 C??? FFE8      01054         movff   tens_digit,WREG
000B8A EC?? F???      01055         call    WR_DATA
000B8E C??? FFE8      01056         movff   ones_digit,WREG
000B92 EC?? F???      01057         call    WR_DATA
Warning[203]: Found opcode in column 1. (return)
000B96 0012           01058 return
                      01059         
000B98                01060 SET_TIME
                      01061         rtc_resetAll
                          M 
000B98 6A??               M     clrf    databyte
000B9A 0E06               M     movlw   6
000B9C 6E??               M     movwf   regaddress ;start at 6 and go down, and set all to 0
                          M 
Warning[207]: Found label after column 1. (del_loop0)
000B9E                    M     del_loop0
000B9E EC?? F???          M     call    write_rtc
000BA2 2E??               M     decfsz  regaddress
000BA4 D???               M     bra     del_loop0
000BA6 EC?? F???          M     call    write_rtc ;sets registers 0-6 to zero
Warning[207]: Found label after column 1. (_loopknt)
  00000001                M     _loopknt set _loopknt+1
                      01062         
                      01063         rtc_set 0x00,   b'10000000'
000BAA 0E00               M     movlw   0x00
000BAC 6E??               M     movwf   regaddress
000BAE 0E80               M     movlw   b'10000000'
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000BB0 6E??               M     movwf   databyte
000BB2 EC?? F???          M     call    write_rtc
                      01064 
                      01065         rtc_set 0x06,   b'00010111'             ; Year 17
000BB6 0E06               M     movlw   0x06
000BB8 6E??               M     movwf   regaddress
000BBA 0E17               M     movlw   b'00010111'
000BBC 6E??               M     movwf   databyte
000BBE EC?? F???          M     call    write_rtc
                      01066         rtc_set 0x05,   b'00000010'             ; Month 2
000BC2 0E05               M     movlw   0x05
000BC4 6E??               M     movwf   regaddress
000BC6 0E02               M     movlw   b'00000010'
000BC8 6E??               M     movwf   databyte
000BCA EC?? F???          M     call    write_rtc
                      01067         rtc_set 0x04,   b'00011001'             ; Date 19
000BCE 0E04               M     movlw   0x04
000BD0 6E??               M     movwf   regaddress
000BD2 0E19               M     movlw   b'00011001'
000BD4 6E??               M     movwf   databyte
000BD6 EC?? F???          M     call    write_rtc
                      01068         rtc_set 0x02,   b'00010001'             ; Hours 11
000BDA 0E02               M     movlw   0x02
000BDC 6E??               M     movwf   regaddress
000BDE 0E11               M     movlw   b'00010001'
000BE0 6E??               M     movwf   databyte
000BE2 EC?? F???          M     call    write_rtc
                      01069         rtc_set 0x01,   b'00111000'             ; Minutes 38
000BE6 0E01               M     movlw   0x01
000BE8 6E??               M     movwf   regaddress
000BEA 0E38               M     movlw   b'00111000'
000BEC 6E??               M     movwf   databyte
000BEE EC?? F???          M     call    write_rtc
                      01070         rtc_set 0x00,   b'00000000'             ; Seconds 0
000BF2 0E00               M     movlw   0x00
000BF4 6E??               M     movwf   regaddress
000BF6 0E00               M     movlw   b'00000000'
000BF8 6E??               M     movwf   databyte
000BFA EC?? F???          M     call    write_rtc
Warning[203]: Found opcode in column 1. (return)
000BFE 0012           01071 return
                      01072         
000C00                01073 INIT_USART
                      01074         
000C00 8E94           01075         bsf     TRISC, 7        ; set RC7=USART RC
000C02 9C94           01076         bcf     TRISC, 6        ; clear RC6=USART TX
                      01077 
000C04 0E0F           01078         movlw   15              ; baud rate 9600
000C06 6EAF           01079         movwf   SPBRG
000C08 6AAC           01080         clrf    TXSTA
                      01081         
000C0A 6AAB           01082         clrf    RCSTA
000C0C 8EAB           01083         bsf     RCSTA,SPEN      ; asynchronous serial port enable
000C0E 88AB           01084         bsf     RCSTA,CREN      ; continous receive
                      01085         
000C10 8AAC           01086         bsf     TXSTA, TXEN     ; transmit enabled
000C12 0012           01087         return
                      01088 
000C14                01089 DataUSART
000C14 0E02           01090         movlw   0x02
000C16 EC?? F???      01091         call    USART_WAIT
000C1A 0E0D           01092         movlw   0x0D
000C1C EC?? F???      01093         call    USART_WAIT
                      01094         
000C20 6A15           01095         clrf    counter         ; used to cycle through past 9 eeprom logs
000C22 6A16           01096         clrf    counter2        ; used to transmit all 18 bits of saved data
                      01097         
000C24                01098 TRANSFER_LOGS
000C24 0E15           01099         movlw   d'21'           ; logs are 21 bits apart
000C26 0215           01100         mulwf   counter         ; log number one starts at eeprom address 0
000C28 CFF3 F022      01101         movff   PRODL, L_EE     ; low address now points to count X 21
000C2C 6A16           01102         clrf    counter2
                      01103         
000C2E                01104 TRANSFER_DATA   
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01105         READEE  WREG, H_EE, L_EE
000C2E C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000C32 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000C36 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000C38 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000C3A 80A6               M         bsf     EECON1, RD          ; read EEPROM
000C3C CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000C40 EC?? F???      01106         call    USART_WAIT      ; transfer bit
000C44 2A22           01107         incf    L_EE
                      01108         
000C46 2A16           01109         incf    counter2
000C48 0E12           01110         movlw   d'18'           ; each perm log has 18 bits of saved data, so 
000C4A 6216           01111         cpfseq  counter2        ; see if we're at 18. if so, we're done reading
000C4C D???           01112         bra TRANSFER_DATA       ; this permanent log and onto next.
                      01113         
000C4E EC?? F???      01114         call    USART_LINE      ; new line because a e s t h e t i c
                      01115         
000C52 2A15           01116         incf    counter
000C54 0E08           01117         movlw   d'8'            ; we save up to the last 9 permanent logs
000C56 6215           01118         cpfseq  counter
000C58 D???           01119         bra     TRANSFER_LOGS
                      01120         
000C5A EC?? F???      01121         call    LCD_L2
                      01122         Display PCComplete
  0000                    M         local   loop
000C5E 0E??               M         movlw   upper PCComplete ; Move Table<20:16>
000C60 6EF8               M         movwf   TBLPTRU
000C62 0E??               M         movlw   high PCComplete ; Move Table<15:8>
000C64 6EF7               M         movwf   TBLPTRH
000C66 0E??               M         movlw   low PCComplete  ; Move Table<7:0>
000C68 6EF6               M         movwf   TBLPTRL
000C6A 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000C6C 50F5               M         movf    TABLAT, W
000C6E                    M loop
000C6E EC?? F???          M         call    WR_DATA         ; write to LCD
000C72 000B               M         tblrd+*                 ; next row in table
000C74 50F5               M         movf    TABLAT, W
000C76 E1??               M         bnz     loop
                      01123         Delay50N delayR, 0x28   
  0000                    M         local   loop
000C78 0E28               M         movlw   0x28
000C7A 6E1B               M         movwf   delayR
                          M 
000C7C                    M loop
000C7C EC?? F???          M         call    Delay50ms
000C80 2E1B               M         decfsz  delayR
000C82 EF?? F???          M         goto    loop
000C86 0012           01124         return                  ; done transmitting data
                      01125         
000C88                01126 USART_WAIT
000C88 6EAD           01127         movwf   TXREG
000C8A A2AC           01128         btfss   TXSTA,1
000C8C EF?? F???      01129         goto    $-2
000C90 0012           01130         return
                      01131 
000C92                01132 USART_LINE
000C92 0E0A           01133         movlw   0x0A
000C94 EC?? F???      01134         call    USART_WAIT
000C98 0E0D           01135         movlw   0x0D
000C9A EC?? F???      01136         call    USART_WAIT
000C9E 0012           01137         return
                      01138         
000CA0                01139 Delay5us
000CA0 0E78           01140         movlw   d'120'
000CA2 6E1C           01141         movwf   d5us
                      01142 
000CA4                01143 loop5us
000CA4 2E1C           01144         decfsz  d5us
000CA6 EF?? F???      01145         goto    loop5us
000CAA 0000           01146         nop
000CAC 0012           01147         return
                      01148 
000CAE                01149 Delay200us
000CAE 0EA4           01150         movlw   0xA4
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000CB0 6E1D           01151         movwf   d200us
                      01152 
000CB2                01153 loop200us
000CB2 2E1D           01154         decfsz  d200us
000CB4 EF?? F???      01155         goto    loop200us
000CB8 0000           01156         nop
000CBA 0012           01157         return
                      01158 
000CBC                01159 Delay50ms
000CBC 0EF9           01160         movlw   0xF9
000CBE 6E1E           01161         movwf   d50ms
                      01162 
000CC0                01163 loop50ms
000CC0 EC?? F???      01164         call    Delay200us
000CC4 2E1E           01165         decfsz  d50ms
                      01166 
000CC6                01167 Cycles
000CC6 EF?? F???      01168         goto    loop50ms
000CCA EC?? F???      01169         call    Delay200us
000CCE 0012           01170         return
                      01171 
000CD0                01172 WriteEE_RTC
                      01173         WriteEE tens_digit, H_EE, L_EE
000CD0 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000CD4 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000CD8 C??? FFA8          M         movff   tens_digit, EEDATA  ; set word
                          M 
000CDC B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000CDE D???               M         bra     $-2
                          M 
000CE0 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000CE2 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000CE4 84A6               M         bsf     EECON1, WREN        ; enable write
000CE6 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000CE8 98A1               M         bcf     PIR2, EEIF
                          M 
000CEA 0E55               M         movlw   0x55
000CEC 6EA7               M         movwf   EECON2              ; write 55h
000CEE 0EAA               M         movlw   0xaa
000CF0 6EA7               M         movwf   EECON2              ; write 0xaa
000CF2 82A6               M         bsf     EECON1, WR          ; begin write
000CF4 B2A6               M         btfsc   EECON1, WR
000CF6 D???               M         bra     $-2
                          M 
000CF8 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000CFA 94A6               M         bcf     EECON1, WREN        ; disable writes
000CFC 2A22           01174         incf    L_EE
                      01175         WriteEE ones_digit, H_EE, L_EE
000CFE C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000D02 C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000D06 C??? FFA8          M         movff   ones_digit, EEDATA  ; set word
                          M 
000D0A B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000D0C D???               M         bra     $-2
                          M 
000D0E 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000D10 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000D12 84A6               M         bsf     EECON1, WREN        ; enable write
000D14 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000D16 98A1               M         bcf     PIR2, EEIF
                          M 
000D18 0E55               M         movlw   0x55
000D1A 6EA7               M         movwf   EECON2              ; write 55h
000D1C 0EAA               M         movlw   0xaa
000D1E 6EA7               M         movwf   EECON2              ; write 0xaa
000D20 82A6               M         bsf     EECON1, WR          ; begin write
000D22 B2A6               M         btfsc   EECON1, WR
000D24 D???               M         bra     $-2
                          M 
000D26 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000D28 94A6               M         bcf     EECON1, WREN        ; disable writes
000D2A 2A22           01176         incf    L_EE
000D2C 0012           01177         return
                      01178 
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D2E                01179 ClearEEPROM_21
000D2E 6A21           01180         clrf    H_EE
000D30 6A22           01181         clrf    L_EE
000D32 6820           01182         setf    clear_EE
000D34 6A15           01183         clrf    counter
000D36                01184 ClearNext
                      01185         WriteEE         clear_EE, H_EE, L_EE
000D36 C021 FFAA          M         movff   H_EE, EEADRH        ; High address
000D3A C022 FFA9          M         movff   L_EE, EEADR         ; Low address
000D3E C020 FFA8          M         movff   clear_EE, EEDATA    ; set word
                          M 
000D42 B2A6               M         btfsc   EECON1, WR          ; test if WR=0, skip if so
000D44 D???               M         bra     $-2
                          M 
000D46 9EA6               M         bcf     EECON1, EEPGD       ; Point to data memory
000D48 9CA6               M         bcf     EECON1, CFGS        ; Access EEPROM
000D4A 84A6               M         bsf     EECON1, WREN        ; enable write
000D4C 9EF2               M         bcf     INTCON, GIE         ; disable interrupts during write
000D4E 98A1               M         bcf     PIR2, EEIF
                          M 
000D50 0E55               M         movlw   0x55
000D52 6EA7               M         movwf   EECON2              ; write 55h
000D54 0EAA               M         movlw   0xaa
000D56 6EA7               M         movwf   EECON2              ; write 0xaa
000D58 82A6               M         bsf     EECON1, WR          ; begin write
000D5A B2A6               M         btfsc   EECON1, WR
000D5C D???               M         bra     $-2
                          M 
000D5E 8EF2               M         bsf     INTCON, GIE         ; enable interrupts after write
000D60 94A6               M         bcf     EECON1, WREN        ; disable writes
000D62 2A15           01186         incf            counter
000D64 2A22           01187         incf            L_EE
000D66 0E15           01188         movlw           d'21'
000D68 6215           01189         cpfseq          counter
000D6A EF?? F???      01190         goto            ClearNext
000D6E 6A21           01191         clrf            H_EE
000D70 6A22           01192         clrf            L_EE
000D72 0012           01193         return
                      01194         
000D74                01195 READ_KEY
000D74 A281           01196         btfss   PORTB, 1        ; check for keypad interrupt
000D76 EF?? F???      01197         goto    READ_KEY
000D7A 3881           01198         swapf   PORTB, W
000D7C 0B0F           01199         andlw   0x0F
000D7E 6E10           01200         movwf   KEY
000D80 B281           01201         btfsc   PORTB, 1
000D82 EF?? F???      01202         goto    $-2
000D86 0012           01203         return
                      01204 
000D88                01205 READ_KEY_TIME
000D88 EC?? F???      01206         call        LCD_L2          ; go to second line to print RTC
                      01207 
                      01208         ; display the time
000D8C EC?? F???      01209         call    DISPLAY_RTC
                      01210 
000D90 A281           01211         btfss       PORTB, 1    ; keypad interrupt
000D92 EF?? F???      01212         goto        READ_KEY_TIME
000D96 3881           01213         swapf       PORTB, W    ; copy PORTB7:4 to W3:0
000D98 0B0F           01214         andlw       0x0F        ; only want W3:0
000D9A 6E10           01215         movwf       KEY         ; write this value to the KEY
000D9C B281           01216         btfsc       PORTB, 1    ; wait for release
000D9E EF?? F???      01217         goto        $-2         ; go back one instruction
000DA2 0012           01218         return
                      01219 
000DA4                01220 DisplayExeTime
                      01221         READEE  REG_EE, H_EE, L_EE
000DA4 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000DA8 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000DAC 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000DAE 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000DB0 80A6               M         bsf     EECON1, RD          ; read EEPROM
000DB2 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000DB6 0EFF           01222         movlw   0xFF
000DB8 6223           01223         cpfseq  REG_EE
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000DBA EF?? F???      01224         goto    NoSkipDispExeTime
                      01225         Display NoData
  0000                    M         local   loop
000DBE 0E??               M         movlw   upper NoData    ; Move Table<20:16>
000DC0 6EF8               M         movwf   TBLPTRU
000DC2 0E??               M         movlw   high NoData     ; Move Table<15:8>
000DC4 6EF7               M         movwf   TBLPTRH
000DC6 0E??               M         movlw   low NoData      ; Move Table<7:0>
000DC8 6EF6               M         movwf   TBLPTRL
000DCA 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000DCC 50F5               M         movf    TABLAT, W
000DCE                    M loop
000DCE EC?? F???          M         call    WR_DATA         ; write to LCD
000DD2 000B               M         tblrd+*                 ; next row in table
000DD4 50F5               M         movf    TABLAT, W
000DD6 E1??               M         bnz     loop
000DD8 0EFF           01226         movlw   0xFF
000DDA 6023           01227         cpfslt  REG_EE
000DDC EF?? F???      01228         goto    SkipDispExeTime
000DE0 0012           01229         return
                      01230 
000DE2                01231 NoSkipDispExeTime
                      01232         READEE  WREG, H_EE, L_EE
000DE2 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000DE6 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000DEA 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000DEC 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000DEE 80A6               M         bsf     EECON1, RD          ; read EEPROM
000DF0 CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000DF4 EC?? F???      01233         call    WR_DATA
000DF8 2A22           01234         incf    L_EE
                      01235         
                      01236         READEE  WREG, H_EE, L_EE
000DFA C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000DFE C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E02 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E04 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E06 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E08 CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000E0C EC?? F???      01237         call    WR_DATA
000E10 2A22           01238         incf    L_EE
                      01239         
                      01240         READEE  WREG, H_EE, L_EE
000E12 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E16 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E1A 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E1C 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E1E 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E20 CFA8 FFE8          M         movff   EEDATA, WREG        ; put data into file
000E24 EC?? F???      01241         call    WR_DATA
000E28 2A22           01242         incf    L_EE
                      01243 
000E2A 0E73           01244         movlw   0x73            ; Write 's'
000E2C EC?? F???      01245         call    WR_DATA
000E30 EC?? F???      01246         call    LCD_L2
000E34                01247 SkipDispExeTime
000E34 0012           01248         return
                      01249 
000E36                01250 DispOpRTC
                      01251         READEE  REG_EE, H_EE, L_EE
000E36 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E3A C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E3E 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E40 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E42 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E44 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000E48 0EFF           01252         movlw   0xff
000E4A 6223           01253         cpfseq  REG_EE
000E4C EF?? F???      01254         goto    NoSkipDispOpRTC
                      01255         Display NoData
  0000                    M         local   loop
000E50 0E??               M         movlw   upper NoData    ; Move Table<20:16>
000E52 6EF8               M         movwf   TBLPTRU
000E54 0E??               M         movlw   high NoData     ; Move Table<15:8>
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000E56 6EF7               M         movwf   TBLPTRH
000E58 0E??               M         movlw   low NoData      ; Move Table<7:0>
000E5A 6EF6               M         movwf   TBLPTRL
000E5C 0008               M         tblrd*                  ; Read byte from TBLPTRL to TABLAT
000E5E 50F5               M         movf    TABLAT, W
000E60                    M loop
000E60 EC?? F???          M         call    WR_DATA         ; write to LCD
000E64 000B               M         tblrd+*                 ; next row in table
000E66 50F5               M         movf    TABLAT, W
000E68 E1??               M         bnz     loop
000E6A 0EFF           01256         movlw   0xff
000E6C 6023           01257         cpfslt  REG_EE
000E6E EF?? F???      01258         goto    SkipDispOpRTC
                      01259 
000E72                01260 NoSkipDispOpRTC
                      01261         READEE  REG_EE, H_EE, L_EE
000E72 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E76 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E7A 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E7C 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E7E 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E80 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000E84 C023 FFE8      01262         movff   REG_EE, WREG
000E88 EC?? F???      01263         call    WR_DATA
000E8C 2A22           01264         incf    L_EE
                      01265         
                      01266         READEE  REG_EE, H_EE, L_EE
000E8E C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000E92 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000E96 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000E98 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000E9A 80A6               M         bsf     EECON1, RD          ; read EEPROM
000E9C CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000EA0 C023 FFE8      01267         movff   REG_EE, WREG
000EA4 EC?? F???      01268         call    WR_DATA
000EA8 2A22           01269         incf    L_EE
                      01270 
000EAA 0E68           01271         movlw   "h"
000EAC EC?? F???      01272         call    WR_DATA
                      01273         
000EB0 EC?? F???      01274         call    DispOpRTC_Helper
                      01275         
000EB4 0E20           01276         movlw   " "
000EB6 EC?? F???      01277         call    WR_DATA
                      01278         
000EBA EC?? F???      01279         call    DispOpRTC_Helper
000EBE 0E2F           01280         movlw   "/"
000EC0 EC?? F???      01281         call    WR_DATA
                      01282 
000EC4 EC?? F???      01283         call    DispOpRTC_Helper
000EC8 0E2F           01284         movlw   "/"
000ECA EC?? F???      01285         call    WR_DATA
000ECE EC?? F???      01286         call    DispOpRTC_Helper
000ED2                01287 SkipDispOpRTC
000ED2 0012           01288                 return
000ED4                01289 DispOpRTC_Helper
                      01290         READEE          REG_EE, H_EE, L_EE
000ED4 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000ED8 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000EDC 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000EDE 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000EE0 80A6               M         bsf     EECON1, RD          ; read EEPROM
000EE2 CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000EE6 C023 FFE8      01291         movff           REG_EE, WREG
000EEA EC?? F???      01292         call            WR_DATA
000EEE 2A22           01293         incf            L_EE
                      01294         READEE          REG_EE, H_EE, L_EE
000EF0 C021 FFAA          M         movff   H_EE, EEADRH        ; read to high
000EF4 C022 FFA9          M         movff   L_EE, EEADR         ; read to low
000EF8 9EA6               M         bcf     EECON1, EEPGD       ; point to data memory
000EFA 9CA6               M         bcf     EECON1, CFGS        ; access to EEPROM
000EFC 80A6               M         bsf     EECON1, RD          ; read EEPROM
000EFE CFA8 F023          M         movff   EEDATA, REG_EE      ; put data into file
000F02 C023 FFE8      01295         movff           REG_EE, WREG
MPASM 5.71  /USERS/MREITER/DESKTOP/AER201/BO   2-25-2017  13:31:50         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000F06 EC?? F???      01296         call            WR_DATA
000F0A 2A22           01297         incf            L_EE
000F0C 0012           01298         return
Warning[205]: Found directive in column 1. (end)
                      01299 end

Errors   :     0
Warnings :    45 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

